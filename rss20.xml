<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<language>en</language>
	<description>Planet SymPy - http://planet.sympy.org/</description>

<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Introduction</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=13</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-introduction/</link>
	<description>&lt;p&gt;Hello Everyone,&lt;/p&gt;
&lt;p&gt;So, I got into the Google Summer of Code 2014 under SymPy. Let me introduce myself – My name is Soumya Dipta Biswas (but almost everyone calls me SD). I am currently pursuing M.Sc. (Tech.) Information Systems from Birla Institute of Technology and Science – Pilani, Goa Campus. I just completed my 3rd year and will be graduating in June 2015.&lt;/p&gt;
&lt;p&gt;Ok, so enough about me. Moving on to the program, I believe most of you would have heard of the GSoC (it has been around for 10 years now). However if you haven’t and are (or will be) in college and are interested in giving back to the open source community, you should definitely have a look at the &lt;a href=&quot;http://www.google-melange.com/&quot; target=&quot;_blank&quot; title=&quot;GSoC&quot;&gt;Google Summer of Code&lt;/a&gt; page and give it a shot next year.&lt;/p&gt;
&lt;p&gt;The open-source organization I will be contributing to is SymPy. If you have been using Python, then you have most likely used or atleast heard of SymPy. SymPy is a great Python tool for symbolic mathematics and has support for most of the commonly used areas: Calculus, Geometry, Matrices, Logic and even Physics. You can find out more about it at the &lt;a href=&quot;http://sympy.org/en/index.html&quot; target=&quot;_blank&quot; title=&quot;SymPy&quot;&gt;SymPy homepage&lt;/a&gt; or if you want to give it a try online, use the &lt;a href=&quot;http://live.sympy.org/&quot; target=&quot;_blank&quot; title=&quot;SymPy Live Shell&quot;&gt;SymPy Live Shell&lt;/a&gt;. If you have been using it and would like to contribute, visit &lt;a href=&quot;https://github.com/sympy/sympy/&quot; target=&quot;_blank&quot; title=&quot;SymPy on GitHub&quot;&gt;SymPy on GitHub&lt;/a&gt; (&lt;a href=&quot;https://github.com/sympy/sympy/wiki&quot; target=&quot;_blank&quot; title=&quot;wiki&quot;&gt;wiki&lt;/a&gt;). SymPy has a very supportive and really great community, so feel free to contact us in case you need any help.&lt;/p&gt;
&lt;p&gt;Now let’s move on to the focus of the program, the project. I will primarily be contributing to the Logic module already existing in SymPy. Currently, there exists a fully functional propositional logic module and I propose to improve it by making the entire system faster and more efficient. On the other hand, SymPy has almost no support for First Order Logic. So, I propose to build the architecture for First Order Logic module which will finally culminate into a full fledged Inference System. You can find more details about my project in my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Soumya-Dipta-Biswas:-Propositional-and-First-Order-Logic&quot; target=&quot;_blank&quot; title=&quot;GSoC Proposal&quot;&gt;GSoC Proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I guess that’s all for the introductions. Before signing off, I must mention that I am really exicted to be a part of SymPy and am looking forward to a great summer ahead.&lt;/p&gt;
&lt;p&gt;Cheers!!!&lt;/p&gt;</description>
	<pubDate>Sun, 01 Jun 2014 14:24:15 +0000</pubDate>
</item>
<item>
	<title>Jim Crist: GSoC Week 2: Started Work on Linearizer Class</title>
	<guid isPermaLink="false">tag:,2014-05-30:gsoc-week-2.html</guid>
	<link>http://jcrist.github.io/gsoc-week-2.html</link>
	<description>&lt;p&gt;This week I started work on implementing a general linearization method in 
&lt;code&gt;Sympy&lt;/code&gt;. The current plan is to implement this in three parts:&lt;/p&gt;
&lt;h3&gt;1. &lt;strong&gt;A &lt;code&gt;Linearizer&lt;/code&gt; class&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This will hold the general form described by Luke and Gilbert's paper. The form
is:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
f_{c}(q, t) &amp;amp;= 0_{lx1} \\
f_{v}(q, u, t) &amp;amp;= 0_{mx1} \\
f_{a}(q, \dot{q}, u, \dot{u}, t) &amp;amp;= 0_{mx1} \\
f_{0}(q, \dot{q}, t) + f_{1}(q, u, t) &amp;amp;= 0_{nx1} \\
f_{2}(q, \dot{u}, t) + f_{3}(q, \dot{q}, u, r, t) &amp;amp;= 0_{(o-m)x1}
\end{aligned}&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;\begin{aligned}
q, \dot{q} &amp;amp; \in \mathbb{R}^n \\
u, \dot{u} &amp;amp; \in \mathbb{R}^o \\
r &amp;amp; \in \mathbb{R}^s 
\end{aligned}&lt;/p&gt;
&lt;p&gt;Once in this general form, the algorithm devised by Luke and Gilbert is able to
linearize the system properly (not messing up due to constraints, as shown
&lt;a href=&quot;http://jcrist.github.io/gsoc-week-1.html&quot;&gt;last week&lt;/a&gt;). The resulting linearized
form is:&lt;/p&gt;
&lt;p&gt;$$ M \begin{bmatrix} \delta \dot{q} \\ \delta\dot{u} \end{bmatrix} = 
A \begin{bmatrix} \delta q_{i} \\ \delta u_{i} \end{bmatrix} + B \delta r $$&lt;/p&gt;
&lt;p&gt;where $M$, $A$, and $B$ are matrices. A class method &lt;code&gt;linearize&lt;/code&gt; is used to
perform this step.&lt;/p&gt;
&lt;h3&gt;2. &lt;strong&gt;A &lt;code&gt;linearize&lt;/code&gt; function&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This will take input systems of various forms (formed by &lt;code&gt;KanesMethod&lt;/code&gt;,
&lt;code&gt;LagrangesMethod&lt;/code&gt;, or ideally a general matrix of equations). The function
will then turn the system into the general form described above, create
an instance of &lt;code&gt;Linearizer&lt;/code&gt;, call the &lt;code&gt;linearize&lt;/code&gt; method, and return the
result.&lt;/p&gt;
&lt;p&gt;To make this conversion easy and general, any class that implements a
&lt;code&gt;to_linearizer&lt;/code&gt; method can be linearized. One has been written for
&lt;code&gt;KanesMethod&lt;/code&gt; already. Originally I thought I could get equations formed
with Lagranges Method into this general form as well, but now I'm not sure.
The multipliers could be treated as dependent speeds (eliminating them from
the state vector), but for the linearization to be valid a trim point for
each multiplier will still need to be chosen. I'm going to think about this for
a while, and finish the remaining functionality for the &lt;code&gt;KanesMethod&lt;/code&gt; class
first. If it turns out this can't be generalized for Lagrange's method, then a
seperate control flow path will need to be added.&lt;/p&gt;
&lt;h3&gt;3. &lt;strong&gt;&lt;code&gt;linearize&lt;/code&gt; class methods for &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;These will be nice wrappers for the linearize function, making the linearization
process as easy as creating the Method object, and then calling 
&lt;code&gt;Method.linearize()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What's done so far&lt;/h2&gt;
&lt;p&gt;This week I implemented the beginnings of the &lt;code&gt;Linearizer&lt;/code&gt; class. So far it can
only handle systems with &lt;em&gt;both&lt;/em&gt; motion and configuration constraints. I plan on
finishing up the remaining control paths for just motion, just
configuration, and no constraint systems next week. For testing this
functionality, I used the rolling disk example used in Luke and Gilbert's paper.
With the current functionality, linearization works as:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Equations for the disk are derived above, KM is a KanesMethod object&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linearizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_linearizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linearizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_qd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_ud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A_and_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Evaluating in an upright configuration at critical speed:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upright_critical_speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Calculating the critical speed eigenvalues, they should all be zero&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upright_critical_speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also added a &lt;code&gt;to_linearizer&lt;/code&gt; method to the &lt;code&gt;KanesMethod&lt;/code&gt; class. This finds all
the needed information in the &lt;code&gt;KanesMethod&lt;/code&gt; object, and returns a &lt;code&gt;Linearizer&lt;/code&gt;
object. I'd say this is done as well, and is also tested in the
&lt;code&gt;test_linearize_rolling_disc&lt;/code&gt; test.&lt;/p&gt;
&lt;p&gt;Two other tests were also written, but not finished. They build off the example
I wrote up &lt;a href=&quot;http://jcrist.github.io/gsoc-week-1.html&quot;&gt;last week&lt;/a&gt; with a minimal 
and nonminimal pendulum system. I also have this same system worked out in
minimal and nonminimal coordinates using &lt;code&gt;LagrangesMethod&lt;/code&gt;. Because it is so
quick to compute, and intuitive to know if it's correct or not I think this
will be an excellent way to test the functionality of the linearization
routines.&lt;/p&gt;
&lt;p&gt;All of this work can be seen (and hopefully commented on, I need code review!) 
in &lt;a href=&quot;https://github.com/jcrist/sympy/pull/1&quot;&gt;this pull request&lt;/a&gt;. As it's still
very much a work in progress, I made a pull request on my own master branch, 
so that others can review it before I submit it to Sympy proper.&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</description>
	<pubDate>Fri, 30 May 2014 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week 1</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-8828642408732656832</guid>
	<link>http://geekpy.blogspot.com/2014/05/gsoc-week-1.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;The first week of Gsoc has come to an end. Most of the time was spent on trying to decide the class structure for the new Point3D class.&lt;br /&gt;&lt;br /&gt;The initial class structure which I proposed was to let  the Point class inherit from the Point3D class as they have a lot of methods in common and also to allow interaction between these two classes.&lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;Point(1,2).distance(Point3D(1,2,3))&lt;br /&gt;3&lt;br /&gt;But after having a long discussion with Stefan and the mailing list we decided to keep both the classes seperate and raise an error for interactions like the one above.&lt;br /&gt;&lt;br /&gt;So what if the user wants the above interaction? For that we decided to have a method in the Plane class( to be implemented) which converts a 2D point to 3D allowing the user to choose any plane he wants, after that he could compute the distance in the above example.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/hqHC-9cA9UM&quot;&gt;Here&lt;/a&gt; is the link to the discussion on the mailing list.&lt;br /&gt;And I have implemented the Point3D class and the link to the PR is &lt;a href=&quot;https://github.com/sympy/sympy/pull/7522&quot;&gt;here.&lt;/a&gt;&lt;br /&gt;This following week I plan to  work on the Line class in 3D using the Point3D class as the base.&lt;br /&gt;&lt;br /&gt;Till then Cheers! &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 28 May 2014 11:48:24 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Thilina Rathnayake: GSoC 2014 – Implemented Basic Matrix Classes</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=302</guid>
	<link>http://thilinaatsympy.wordpress.com/2014/05/27/gsoc-2014-implemented-basic-matrix-classes/</link>
	<description>&lt;p&gt;Hi All, When the first week of the GSoC comes to an end, I was able to finish the basic structure of the Matrix class and implement some of the functionalities related to the `DenseMatrix` class. I implemented Matrix addition, multiplication, scalar addition and scalar multiplication. I am yet to update the PR with these changes. I am currently working on Gaussian elimination and having a few problems with that. I wish to solve these as soon as possible. After sorting it out, I wish to benchmark my implementation against other libraries such as Linbox and GiNaC.&lt;/p&gt;
&lt;h3&gt;Matrix Class Structure&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;`MatrixBase` Class&lt;br /&gt;
&lt;strong&gt;class MatrixBase: public Basic {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;public:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    MatrixBase(unsigned row, unsigned col)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        : row_{row}, col_{col} {};&lt;/strong&gt;&lt;strong&gt;    // Below methods should be implemented by the derived classes. If not&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // applicable, raise an exception&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    // Get and set elements&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const Basic&amp;gt;get(unsigned i) const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual void set(unsigned i, RCP&amp;lt;const Basic&amp;gt; &amp;amp;e) = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    virtual unsigned rank() const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const Basic&amp;gt; det() const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; inv() const = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    // These functions create a new instance of either DenseMatrix or&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // SparseMatrix and return a reference to the result&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; add_matrix(const MatrixBase &amp;amp;other) const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; mul_matrix(const MatrixBase &amp;amp;other) const = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;protected:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // Stores the dimension of the Matrix&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned col_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;};&lt;br /&gt;
&lt;/strong&gt;&lt;br /&gt;
Most important thing about the `MatrixBase` class is that it is derived from the CSymPy `Basic` class. This enables the classes that are derived from `MatrixBase` to be used wherever a `Basic` class is used. This has a lot of advantages. `DenseMatrix` class is derived from `MatrixBase` class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;`DenseMatrix` class&lt;br /&gt;
&lt;strong&gt;class DenseMatrix: public MatrixBase {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;public:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // Constructors&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    DenseMatrix(unsigned row, unsigned col);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    DenseMatrix(unsigned row, unsigned col, std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; &amp;amp;l);&lt;/strong&gt;&lt;strong&gt;    // Virtual functions inherited from Basic class&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual std::size_t __hash__() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual bool __eq__(const Basic &amp;amp;o) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual int compare(const Basic &amp;amp;o) const;&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    // Should implement all the virtual methods from MatrixBase&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // and throw an exception if a method is not applicable.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // add_matrix, mul_matrix will have to find the correct function&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // to call depending on the `other` argument.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    // Get and set elements&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const Basic&amp;gt; get(unsigned i) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual void set(unsigned i, RCP&amp;lt;const Basic&amp;gt; &amp;amp;e);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    virtual unsigned rank() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const Basic&amp;gt; det() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; inv() const;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    // Matrix addition&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; add_matrix(const MatrixBase &amp;amp;other) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    friend RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            const DenseMatrix &amp;amp;B);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    friend RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_scalar(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            RCP&amp;lt;const Basic&amp;gt; &amp;amp;k);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // Matrix multiplication&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    virtual RCP&amp;lt;const MatrixBase&amp;gt; mul_matrix(const MatrixBase &amp;amp;other) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    friend RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            const DenseMatrix &amp;amp;B);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    friend RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_scalar(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            RCP&amp;lt;const Basic&amp;gt; &amp;amp;k);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // Gaussian elimination&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    friend RCP&amp;lt;const DenseMatrix&amp;gt; gaussian_elimination(const DenseMatrix &amp;amp;A);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;protected:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    // Matrix elements are stored in row-major order&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; m_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of the functions are declared as friend functions so that these can access private and protected members of the `DenseMatrix` class. This makes coding the algorithms a bit easier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Friend function implementations
&lt;ul&gt;
&lt;li&gt;add_dense_dense&lt;br /&gt;
&lt;strong&gt;RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        const DenseMatrix &amp;amp;B)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;{&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned row = A.row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned col = A.col_;&lt;/strong&gt;&lt;strong&gt;    CSYMPY_ASSERT(row == B.row_ &amp;amp;&amp;amp; col == B.col_)&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; sum(row*col);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt;::const_iterator ait = A.m_.begin();&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt;::const_iterator bit = B.m_.begin();&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    for(auto &amp;amp;it: sum) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        it = add(*ait, *bit);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        ait++;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        bit++;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    return rcp(new DenseMatrix(row, col, sum));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;mul_dense_dense&lt;br /&gt;
&lt;strong&gt;RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        const DenseMatrix &amp;amp;B)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;{&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned row = A.row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    unsigned col = A.col_;&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    CSYMPY_ASSERT(col == B.row_)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; prod(row*B.col_);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    for (unsigned r = 0; r&amp;lt;row; r++) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        for (unsigned c = 0; c&amp;lt;B.col_; c++) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            prod[r*B.col_ + c] = zero; // Integer Zero&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;            for (unsigned k = 0; k&amp;lt;col; k++)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;                prod[r*B.col_ + c] = add(prod[r*B.col_ + c],&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;                        mul(A.m_[r*col + k], B.m_[k*B.col_ + c]));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;        }&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;    }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;    return rcp(new DenseMatrix(row, B.col_, prod));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Plan for this week&lt;/h3&gt;
&lt;p&gt;I wish to finish implementing Gaussian elimination and do some benchmarks.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/302/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/302/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=302&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 27 May 2014 17:10:13 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: GSoC 2014 with Sympy</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/gsoc-2014-with-sympy.html</guid>
	<link>https://hargup.github.io/posts/gsoc-2014-with-sympy.html</link>
	<description>&lt;div&gt;&lt;p&gt;Hi, I'm Harsh Gupta an undergrad student at IIT Kharagpur, I've been accepted
this year for the Google Summer of Code program with Sympy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, What is a Google Summer of Code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Summer of Code is a program by Google to promote opensource development.
In this program Google pays handsome stipends to students to work for various opensource
organisations. In the application phase the students have to write proposals to
the organisations describing the projects they want to do
and how do they fit for it. If the proposal is accepted the student is provided
with a mentor and with the guidance of the mentor the student has to complete
the project in the given timeline. You can look at my
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers&quot;&gt;proposal&lt;/a&gt;.
I proposed to work on improving the current equation solvers in
Sympy. My mentors for the Project are &lt;a href=&quot;https://github.com/mrocklin&quot;&gt;Matthew Rocklin&lt;/a&gt;
and &lt;a href=&quot;https://github.com/skirpichev&quot;&gt;Sergey B Kipirchev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A word about Sympy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sympy.org/&quot;&gt;Sympy&lt;/a&gt; is a pure python library for symbolic computation. Symbolic
computation is similar to the maths you do by hands and it differs from
numerical computations. More about Symbolic and Numerical computation in
some other post. Sympy has been created by hundreds of contributors starting from 2006.
It has an awesome developer
community and we encourage outsiders to contribute and get their hands dirty with
the code. What do you need to start contributing? Some python skills and little
patience. Download the &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;latest development code&lt;/a&gt;.
Go through the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Development-workflow&quot;&gt;development workflow&lt;/a&gt;.
Find something to work on from the
&lt;a href=&quot;https://github.com/sympy/sympy/issues?labels=Easy+to+Fix&amp;amp;milestone=&amp;amp;page=1&amp;amp;state=open&quot;&gt;EasyToFix Issues&lt;/a&gt;.
Code it and send us a &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;pull request&lt;/a&gt;. Happy Coding.&lt;/p&gt;
&lt;p&gt;I'll give a brief about the project aim and current state of work in the next post.
I'm looking forward for a great summer with Sympy.&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 26 May 2014 00:54:22 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-8694557721186369600</guid>
	<link>http://gsocblog.blogspot.com/2014/05/in-this-first-week-i-finished.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;In this first week I finished implementing the MrvAsympt algorithm as given by Dominik gruntz in his paper &quot;A new algorithm for computing asymptotic series&quot;.&lt;br /&gt;&lt;br /&gt;One of the features of this algorithm is hierarchical series where it terminates the recursion early perhaps to give better results. Determining whether terminating earlier is better is a tough task. I left it to the user by introducing a new parameter ``hir``. If its True, it terminates after one level of expansion.&lt;br /&gt;Also in some cases going further into recursion might fail to give an asymptotic expansion. In such cases this is useful as it at least gives the user some result.&lt;br /&gt;A good example for this would be:-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; e = sin(x) * cos(exp(-x))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x)  &lt;br /&gt; ...  &lt;br /&gt; PoleError  &lt;br /&gt; ...  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x, hir=True)  &lt;br /&gt; exp(-4*x)*sin(x)/24 - exp(-2*x)*sin(x)/2 + sin(x) + O(exp(-6*x), (x, oo))  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Also I checked for conditions of infinite recursion. If the most rapidly varying subexpression is same as the function, we need to find a canonical representation of the equivalence class. It is found by taking the leading term of the argument of the most rapidly varying subexpression. If the canonical representation is also an exponential, it goes into infinite recursion.&lt;br /&gt;&lt;br /&gt;The issues I faced was to how to integrate this code into the existing series method.&lt;br /&gt;E.g.:- series(sin(1/x + exp(-x)) - sin(1/x), x, oo) just returns O(x**-6, (x, oo)) before. Now, if series fails to produce any relevant result or gives an error, it calls this algorithm to try and find an asymptotic expansion of the function.&lt;br /&gt;&lt;br /&gt;Next week I plan to implement asymptotic expansion for special functions where ever possible. Also I'll add various test cases related to asymptotic series. Most of them are from examples given in Gruntz paper.&lt;br /&gt;I hope to send the PR soon and get it merged without giving any troubles. &lt;/div&gt;</description>
	<pubDate>Sun, 25 May 2014 19:53:07 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Sachin Joglekar: GSoC First Week: Getting priorities straight</title>
	<guid isPermaLink="false">http://codesachin.wordpress.com/?p=6</guid>
	<link>http://codesachin.wordpress.com/2014/05/25/gsoc-first-week-getting-priorities-straight/</link>
	<description>&lt;p&gt;Ok. My first week with the my second iteration of Google Summer of Code. Things have been different this time right from the word go. Mainly to do with software design, or rather the approach to it. Jason and I have had lengthy discussions about this, and we have been trying to work out a good plan to get things done in a structured way this summer. I am hoping that this will avoid the problems Prasoon and I encountered oh-so-frequently last summer. They were mainly because we had too many TODOs and objectives all at the same time, instead of doing things step-by-step, in an incremental manner.&lt;/p&gt;
&lt;p&gt;What I have been doing this week, is thinking and talking to people regarding what the use-cases of the new module will be. I had started out trying to design an overly generalized system, but talking to Jason and Stefan has made me realise that its better to get the set of objectives straight.&lt;/p&gt;
&lt;p&gt;Basically, I have been listing out as many micro-use-cases as I can. Something like – “I, as a SymPy developer, would like to use the new vector module to prove the integral forms of Maxwell’s equations.” This is where the talking to many people came into the picture. Things like these, though they may seem a lot to process, admittedly do help you focus on whats high-priority.&lt;/p&gt;
&lt;p&gt;Broadly, I have divided my objectives for the module into the following incremental development ‘steps’-&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;i)Implementation of a basic Vector framework&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;ii)Implementation of the Del operator&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;iii)Conversion to and from coordinate systems other than Cartesian&lt;/i&gt;&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;iv) Having an API for doing vector math in different coordinate systems.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;v)Implementation of Coordinate System class, along with a Point class&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;vi)Implementation of time-dependent functionality&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;vii)Implementation of LaTeX functionality &lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;viii) Implementation of vector-integral functionality&lt;br /&gt;
&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Each of these, as you can probably see, can be done one-at-a-time (ofcourse many of them have prerequisites, like vi requiring i and v). In any case, the incremental model of software design does seem to fit well to developing the new vector module – with something like the waterfall model being used for each of these objectives individually.&lt;/p&gt;
&lt;p&gt;On the coding front, I have pretty much done with objective i. I have a stable (with a few mods necessary) system of basic vector math in place on my &lt;em&gt;gsocvect&lt;/em&gt; branch on github. I have avoided usage of coordinate systems, to ensure that the Vector class fits well with the SymPy core. Some things still need to be ironed out, like usage of functions like&lt;em&gt; trigsimp &lt;/em&gt;on a given Vector instance – I’ll probably try my hand a little more, or ask the mailing list.&lt;/p&gt;
&lt;p&gt;Anyways, thats all for now &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;. Hope to have a great summer coding a new SymPy module. *excited*&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/6/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/6/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=6&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 25 May 2014 15:13:10 +0000</pubDate>
</item>
<item>
	<title>Kundan Kumar: First step toward GSoC</title>
	<guid isPermaLink="false">http://kundankumar185.wordpress.com/?p=6</guid>
	<link>http://kundankumar185.wordpress.com/2014/05/25/first-step-toward-gsoc/</link>
	<description>&lt;p&gt;One week has been added to my life under the name of GSoC. I have been working under Sympy and as my GSoC proposal I am implementing system of differential equation. It has been one of fruiteful week for me though I would add I became a little slow in the end. I thought its a good opportunity to learn vim along with working on codebase of sympy. So, I have started fighting with vim to understand him more. Yeah him!! I have read comments of people on vim its the best text editor, once used to it you wont be leaving it for anything else.&lt;/p&gt;
&lt;p&gt;Heh, I found it hard to operate with vim in starting but I am heck of guy to leave it. &lt;span class=&quot;wp-smiley emoji emoji-bigsmile&quot; title=&quot;:D&quot;&gt;:D&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;About my work on sympy, I have implemented first order linear system of two equation. Added all method considering it and aha also documentation. Though my mentors seemed a little busy this week so I dont know much how my implementation should look like from their point of view but I have added what seemed good. Thats was it for this week, next week I am hoping of implementing the same for second order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/6/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/6/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=6&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 25 May 2014 05:02:38 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC 14: First Week</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-4814788273799668813</guid>
	<link>http://lifelesscode.blogspot.com/2014/05/gsoc-14-first-week.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;The first week of GSoC is going to end very soon. I started working very late this week because of some issues. I spent most of my time in reading books on optics.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;Due to a dependency for 3D geometry, which will take some more time, I changed my timeline from what I had proposed. Besides starting with geometrical optics(3 weeks), I have started working on wave optics.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;This is what my proposal says:&lt;/div&gt;&lt;blockquote style=&quot;border-left-color: rgb(245, 245, 245); border-left-style: solid; border-left-width: 5px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 18px; margin: 0px 0px 18px; padding: 0px 0px 0px 15px;&quot;&gt;&lt;ul style=&quot;margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;During this week I'll write code for classical wave equation and simple harmonic motion.&lt;/li&gt;&lt;li&gt;Introduction of properties like phase angles, phase velocity, wave velocity, amplitude, intensity, frequency and wavelength. &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;&lt;a style=&quot;color: #4183c4; text-decoration: none;&quot; href=&quot;https://github.com/sympy/sympy/pull/7518&quot;&gt;This&lt;/a&gt; is my first pull request regarding my project (Thanks to Sean for the quick review). Till now I've only added a transverse wave class and will add more to it in the next 2 days.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;There were no hiccups yet!&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;&lt;span style=&quot;line-height: 1.3em;&quot;&gt;Cheers!&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 25 May 2014 00:14:11 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Sushant Hiray: Community Bonding and Week 1 in CSymPy</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week1/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week1/</link>
	<description>&lt;p&gt;Week 1 for GSoC is almost about to end and I’m pretty much excited about the progress I’ve made.
For those who are unaware I’m working on extending elementary functions in CSymPy. You can look over
the proposal &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Sushant-Hiray:-Extending-Elementary-Functions-CSymPy&quot;&gt;here&lt;/a&gt; to get a better idea regarding the project!
&lt;br /&gt;&lt;br /&gt;
The last few weeks have been fairly intensive. I shipped in a fair amount of code and we made a decent progress with the target. I’m quite ahead of my proposal now, so it gives quite a decent amount of buffer to improvise things as we keep on making progress.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;The community bonding period started off with closing some trivial issues such as adding a gitignore ( &lt;a href=&quot;https://github.com/sympy/csympy/pull/165&quot;&gt;pull 165&lt;/a&gt;). This was needed big time considering the number of untracked files we had!
&lt;br /&gt;&lt;br /&gt;
Next I started working on improving the trignometric module for CSymPy. It started with &lt;a href=&quot;https://github.com/sympy/csympy/pull/168&quot;&gt;pull 168&lt;/a&gt; which added all the remaining trignometric classes.
&lt;br /&gt;&lt;br /&gt;
After adding the trignometric classes we started working on implementing &lt;code&gt;eval&lt;/code&gt; for trignometric classes. This was based on Ondrej’s version of &lt;a href=&quot;https://github.com/certik/sympy/blob/trig/t.py&quot;&gt;eval&lt;/a&gt; which he had written for SymPy.
This PR took quite over a week to complete and get merged into master.
Now with this PR being merged we can directly evaluate arguments of type &lt;code&gt;theta + k*pi/12&lt;/code&gt; for all the trignometric classes.
&lt;br /&gt;&lt;br /&gt;
A couple of PR’s were added to improve the code quality. &lt;a href=&quot;https://github.com/sympy/csympy/pull/170&quot;&gt;PR 170&lt;/a&gt; looked into updating the constructors with C++11 standard and &lt;a href=&quot;https://github.com/sympy/csympy/pull/171&quot;&gt;pull 171&lt;/a&gt; made the argument a private member for the base class. 
&lt;br /&gt;&lt;br /&gt;
The code looks quite noeat now, later on we will try to reduce the code length. But its good for now.&lt;/p&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;Most of the discussions with Ondrej happened over the pull requests. Myself, Thilina and Ondrej had an online meetup on gitter this Thursday(IST). You can follow up on the details &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;here&lt;/a&gt;
We discussed mostly regarding our progress, we also discussed a bit about possibility of compile-time hashing.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;So for the next we have planned to get the basic implementation of inverse trignometric functions.
&lt;br /&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Sat, 24 May 2014 18:30:00 +0000</pubDate>
</item>
<item>
	<title>Jim Crist: GSoC Week 1: Project Overview</title>
	<guid isPermaLink="false">tag:,2014-05-24:gsoc-week-1.html</guid>
	<link>http://jcrist.github.io/gsoc-week-1.html</link>
	<description>&lt;p&gt;
&lt;/p&gt;&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This summer I got accepted into &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;Google Summer of Code&lt;/a&gt; under &lt;a href=&quot;http://sympy.org/en/index.html&quot;&gt;Sympy&lt;/a&gt;. For those that don't know, Sympy is a computer algebra system (CAS) written in Python. It can handle all sorts of mathematics, but what I use it most for is deriving and solving for the equations of motion for physical systems using the functionality found in &lt;code&gt;Sympy.physics.mechanics&lt;/code&gt; (as seen in &lt;a href=&quot;http://jcrist.github.io/differential-drive-part-1.html&quot;&gt;this previous post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My project this summer is adding a robust linearization routine to this package to linearize systems with constraints. The code provided in &lt;code&gt;sympy.physics.mechanics&lt;/code&gt; currently makes it very easy to generate the equations of motion (EOM) for the dynamics of rigid, multibody systems. However, these EOM are typically nonlinear in nature, and can be quite lengthy. For analysis, linearizing the equations about equilibrium points, or trajectories is desired. Linearized equations are exceptionally useful because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They reduce the computational complexity of analysis and simulation&lt;/li&gt;
&lt;li&gt;They allow for traditional stability analysis via eigenvalue decomposition&lt;/li&gt;
&lt;li&gt;They are often used in control theory for controller design and analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nonlinear equations can typically be written in the following form:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\dot{x} = f(t, x, u)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt; is time, &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; is the system state, and &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt; is the input to the system. For unconstrained systems (systems, where the states are only functions of time, and not of each other), linearization is as simple as taking the jacobian of &lt;span class=&quot;math&quot;&gt;\(f(t, x, u)\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\dot{\delta x} \approx \nabla_x f(t, x, u) |_{x^*, u^*} \delta x + \nabla_u f(t, x, u) |_{x^*, u^*} \delta u\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&quot;math&quot;&gt;\(x^*\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u^*\)&lt;/span&gt; represent the trajectory or equilibrium point that linearization is occuring about, and &lt;span class=&quot;math&quot;&gt;\(\delta x\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\delta u\)&lt;/span&gt; are the changes from this point (i.e. &lt;span class=&quot;math&quot;&gt;\(\delta x = x - x^*\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;However, if there are constraints, then linearization becomes more complicated, due to the fact that some variables in &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; are now functions of other variables, leading to the need to implement the chain rule. Simply taking the jacobian as you normally would leads to a linearization that doesn't accurately represent the system. This is demonstrated below with an example of a simple pendulum.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;example-single-pendulum-with-minimum-coordinates&quot;&gt;Example: Single Pendulum with Minimum Coordinates&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To derive the equations of motion, well first use Kane's Method with no constraints. Kane's Method is something I hadn't seen before in my dynamic's classes (we focussed more on Lagrange), so I spent part of this week learning it. It differs from Lagrange's method in that instead of only choosing generalized coordinats, generalized speeds are choosen as well. This can make the equations simpler, as the speeds do not have to be the derivatives of the coordinates.&lt;/p&gt;
&lt;p&gt;While Sympy has functions to make the derivation using Kane's Method easier, I'm going to show each calculation step for a clearer description of the method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [1]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pendulum_Min_Coord.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[1]:&lt;/div&gt;

&lt;div class=&quot;output_svg output_subarea output_pyout&quot;&gt;
&lt;svg width=&quot;372.53574&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; id=&quot;svg2&quot; version=&quot;1.1&quot; height=&quot;378.96869&quot;&gt;
  &amp;lt;sodipodi:namedview bordercolor=&quot;#666666&quot; borderopacity=&quot;1.0&quot; fit-margin-bottom=&quot;5&quot; fit-margin-left=&quot;5&quot; fit-margin-right=&quot;5&quot; fit-margin-top=&quot;5&quot; id=&quot;base&quot; inkscape:current-layer=&quot;layer1&quot; inkscape:cx=&quot;115.27797&quot; inkscape:cy=&quot;110.74674&quot; inkscape:document-units=&quot;px&quot; inkscape:pageopacity=&quot;0.0&quot; inkscape:pageshadow=&quot;2&quot; inkscape:window-height=&quot;693&quot; inkscape:window-maximized=&quot;1&quot; inkscape:window-width=&quot;1366&quot; inkscape:window-x=&quot;0&quot; inkscape:window-y=&quot;23&quot; inkscape:zoom=&quot;1&quot; pagecolor=&quot;#ffffff&quot; showgrid=&quot;false&quot;&amp;gt;
  &lt;defs id=&quot;defs4&quot;&gt;
    &amp;lt;pattern id=&quot;pattern6485&quot; inkscape:collect=&quot;always&quot; patterntransform=&quot;matrix(1.4782083,0,0,12.709288,204.03947,0)&quot; xlink:href=&quot;#Strips1_4&quot;&amp;gt;
    &amp;lt;pattern height=&quot;1&quot; id=&quot;Strips1_4&quot; inkscape:collect=&quot;always&quot; inkscape:stockid=&quot;Stripes 1:4&quot; patterntransform=&quot;translate(0,0) scale(10,10)&quot; patternunits=&quot;userSpaceOnUse&quot; width=&quot;5&quot;&amp;gt;
      &lt;rect style=&quot;fill: black; stroke: none;&quot; height=&quot;2&quot; width=&quot;1&quot; y=&quot;-0.5&quot; x=&quot;0&quot; id=&quot;rect5768&quot;&gt;
    &amp;lt;/pattern&amp;gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow1Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke: #000000; stroke-width: 1pt;&quot; transform=&quot;matrix(0.8,0,0,0.8,10,0)&quot; d=&quot;M 0,0 5,-5 -12.5,0 5,5 0,0 z&quot; id=&quot;path3791&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-7&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-74&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-3&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-8&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-6&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-4&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-5&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-9&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-90&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1k&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path7949&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8071&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199-5&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km-9&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196-3&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4Xq&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8390&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1kmM&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8393&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-2&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-6&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-2&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
  &lt;/rect&gt;&lt;/defs&gt;
  &lt;metadata id=&quot;metadata7&quot;&gt;
    &amp;lt;rdf:rdf&amp;gt;
      &amp;lt;cc:work rdf:about=&quot;&quot;&amp;gt;
        &amp;lt;dc:format&amp;gt;image/svg+xml&amp;lt;/dc:format&amp;gt;
        &amp;lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;&amp;gt;
        &amp;lt;dc:title&amp;gt;&amp;lt;/dc:title&amp;gt;
      &amp;lt;/cc:work&amp;gt;
    &amp;lt;/rdf:rdf&amp;gt;
  &lt;/metadata&gt;
  &lt;g id=&quot;layer1&quot; transform=&quot;translate(-184.9363,-178.42594)&quot;&gt;
    &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(0.22219926,0,0,0.21267643,384.59418,428.325)&quot; d=&quot;m 357.59401,430.10822 c 0,39.05242 -30.30147,70.71067 -67.68022,70.71067 -37.37876,0 -67.68022,-31.65825 -67.68022,-70.71067 0,-39.05243 30.30146,-70.71068 67.68022,-70.71068 37.37875,0 67.68022,31.65825 67.68022,70.71068 z&quot; id=&quot;path2989&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 3.51907468px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 202.92616,204.8442 c 262.86866,0 262.86866,0 262.86866,0&quot; id=&quot;path2991&quot;&gt;
    &lt;path style=&quot;fill: #ffff00; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(-1,0,0,-1,555.58391,486.45996)&quot; d=&quot;m 253.532,280.49304 -31.29843,0 -31.29844,0 15.64922,-27.10524 15.64922,-27.10523 15.64921,27.10523 z&quot; id=&quot;path2993&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 339.78704,249.0287 103.5984,256.81995&quot; id=&quot;path2997&quot;&gt;
    &lt;text y=&quot;413.79074&quot; x=&quot;405.85715&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4793&quot;&gt;&lt;tspan y=&quot;413.79074&quot; x=&quot;405.85715&quot; id=&quot;tspan4795&quot;&gt;L&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;531.36218&quot; x=&quot;467.71429&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4797&quot;&gt;&lt;tspan y=&quot;531.36218&quot; x=&quot;467.71429&quot; id=&quot;tspan4799&quot;&gt;m&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;302.36218&quot; x=&quot;530.71423&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text5019&quot;&gt;&lt;tspan y=&quot;302.36218&quot; x=&quot;530.71423&quot; id=&quot;tspan5021&quot;&gt;g&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect style=&quot;fill-opacity: 1; stroke: none;&quot; transform=&quot;matrix(1,0,0.72381295,0.68999624,0,0)&quot; rx=&quot;0&quot; ry=&quot;0&quot; height=&quot;29.007917&quot; width=&quot;251.274&quot; y=&quot;265.83615&quot; x=&quot;-2.4793456&quot; id=&quot;rect5023&quot;&gt;
    &lt;text y=&quot;499.35422&quot; x=&quot;361.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6597&quot;&gt;&lt;tspan y=&quot;499.35422&quot; x=&quot;361.93631&quot; id=&quot;tspan6599&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6601&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21877503; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 520.9149,264.05894 0,92.49758&quot; id=&quot;path4827-4&quot;&gt;
    &lt;g id=&quot;g8297&quot; transform=&quot;translate(-120,-14)&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2704,243.61034 0,56.62207&quot; id=&quot;path4827-70&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2074,243.13275 56.19646,0&quot; id=&quot;path4827-9-6&quot;&gt;
    &lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
    &lt;text y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301&quot;&gt;&lt;tspan y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8571&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307&quot;&gt;&lt;tspan y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8569&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.39519,236.31191 20.29154,52.86126&quot; id=&quot;path4827-70-2&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.16523,235.88862 52.46391,-20.13901&quot; id=&quot;path4827-9-6-9&quot;&gt;
    &lt;text y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301-7&quot;&gt;&lt;tspan y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303-9&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8567&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307-4&quot;&gt;&lt;tspan y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309-7&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8565&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.49994314; stroke-opacity: 1;&quot; transform=&quot;matrix(1.5707216,0,0,1.6326654,-402.16738,-380.32792)&quot; d=&quot;m 520.11084,512.98418 c -14.91916,5.78676 -30.7279,8.94566 -46.72524,9.33662&quot; id=&quot;path3785&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2.57029223; stroke-opacity: 1;&quot; transform=&quot;matrix(0.58676057,0,0,0.58043896,62.244133,29.528251)&quot; d=&quot;m 577.53786,471.18439 c -23.97211,29.49767 -59.00862,47.85327 -96.90679,50.76937&quot; id=&quot;path3785-5&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.30337703; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.10089,263.9655 -2.32918,287.77744&quot; id=&quot;path3009&quot;&gt;
    &lt;text y=&quot;328.55539&quot; x=&quot;402.47037&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4787&quot;&gt;&lt;tspan y=&quot;328.55539&quot; x=&quot;402.47037&quot; id=&quot;tspan4789&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan4791&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
  &lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/rect&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [2]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Import required functionality&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.physics.mechanics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For a simple pendulum, the system has one degree of freedom, so only one generalized coordinate is needed. In this case, we'll choose the angle off vertical (&lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt;). To make things simple, the generalized speed will be the angular velocity of the pendulum, which is just the derivative of this coordinate (&lt;span class=&quot;math&quot;&gt;\(u_1 = \dot{q_1}\)&lt;/span&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [3]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create generalized coordinate and speed variables. The `dynamicsymbols` &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# function creates each symbol as a function of time (i.e. q1 = q1(t))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# Generalized coordinate: angle of pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Derivative of generalized coordinate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# Generalized speed: angular velocity of pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Derivative of generalized speed&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# `symbols` is used for things that are constant, not functions of other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# variables.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# We need t later to take derivatives with respect to time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# Length of the pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# Mass of the pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                      &lt;span class=&quot;c&quot;&gt;# Gravity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;First we need to create the world reference frame &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; and its origin &lt;span class=&quot;math&quot;&gt;\(N^*\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [4]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReferenceFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'N*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set the velocity of the origin to 0, as it's not moving&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, a rotating reference frame &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; is created, attached to the pendulum. The rotation of this frame is &lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt; about the &lt;span class=&quot;math&quot;&gt;\(N_z\)&lt;/span&gt; axis, with an angular velocity of &lt;span class=&quot;math&quot;&gt;\(\dot{q}_1 = u_1\)&lt;/span&gt;. The location of the pendulum mass point &lt;span class=&quot;math&quot;&gt;\(P\)&lt;/span&gt; can then be set as &lt;span class=&quot;math&quot;&gt;\(r^{P/N^*} = L \hat{a}_x\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [5]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create and orient reference frame A, and set its angular velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'axis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ang_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Locate point P relative to the origin N*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locatenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'P'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The velocity of the point P can then be found:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [6]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Calculate velocity at the point&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2pt_theory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[6]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
L*u1*A.y
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we solve for the kinematic differential equations (KDE) for the system. These relate the derivatives of the generalized coordinates to the generalized velocities by&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ kde(q, \dot{q}, u, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For this system, since the generalized speed is just the derivative of the generalized coordinates, the KDEs are rather simple:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [7]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create Kinematic Differential Equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Solve for d/dt q in terms of u. This will be used throughout to eliminate&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# d/dt q from the equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Kane's method uses the partial derivative of the velocity of each point/body with respect to each generalized speed. In our case, with only one point and speed this is just a single value:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [8]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Calculate Partial velocity at the point&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This command chain in english is:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &quot;The velocity of P in frame N, with each d/dt q replaced by expression in terms of u,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# differentiated in terms of u_1 in frame N.&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we input the resultant at each point of all forces acting on that point. For the pendulum, this is just gravity acting on the mass in the &lt;span class=&quot;math&quot;&gt;\(N_x\)&lt;/span&gt; direction.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [9]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Input the force resultant at P&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The generalized active forces are then found by the following expression:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[F_r = \sum_{i=1}^v v_r^{P_i} \cdot R_i \quad (r = 1, ..., n)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;These form the &quot;&lt;strong&gt;&lt;em&gt;F&lt;/em&gt;&lt;/strong&gt;&quot; part of Newton's second law (&lt;strong&gt;&lt;em&gt;F = ma&lt;/em&gt;&lt;/strong&gt;). In this case, n = 1, v = 1, so &lt;span class=&quot;math&quot;&gt;\(F_1\)&lt;/span&gt; is then:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [10]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for F1:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we need to solve for the generalized inertial forces. This is the &quot;&lt;strong&gt;&lt;em&gt;ma&lt;/em&gt;&lt;/strong&gt;&quot; part in Newton's second law. To do this, we first need to find the acceleration of the pendulum point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [11]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for accelerations at the point&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The inertial force &lt;span class=&quot;math&quot;&gt;\(R^*\)&lt;/span&gt; for the point is then&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [12]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for generalized inertial forces&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The generalized inertial forces are then found by the following expression:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ F_r^* = \sum_{i=1}^v v_r^{P_i} \cdot R_i^* \quad (r = 1, ..., n)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As before, n = 1, v = 1, so &lt;span class=&quot;math&quot;&gt;\(F_1^*\)&lt;/span&gt; is then:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [13]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for F1_star&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F1_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Kanes equations for the dynamic differential equations are then&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ F_r + F_r^* = 0 \quad (r = 1, ... , n) \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [14]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for the dynamic differential equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dyn_eqs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Combining the kinematic differential equations with the dynamic differential equations yields a system with 2 unknowns (&lt;span class=&quot;math&quot;&gt;\(\dot{q}_1\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\dot{u}_1\)&lt;/span&gt;), and 2 equations. Thus, it can be solved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [15]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# The equations of motion are composed of the kinematic differential equations,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and the dynamic differential equations.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;dyn_eqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[                    -u1 + q1&amp;amp;apos],
[-L**2*m*u1&amp;amp;apos - 9.8*L*m*sin(q1)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [16]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solving the equations of motion for q1' and u1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [17]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Recomposing the system into a first order differential equation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[            u1],
[-9.8*sin(q1)/L]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Thus, the final form for the equations of motion is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \begin{bmatrix} \dot{q}_1 \\ \dot{u}_1 \end{bmatrix} = \begin{bmatrix} u_1 \\ \frac{-9.8}{L} sin(q_1) \end{bmatrix} \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As I'm still just learning Kane's method myself, the above derivation isn't very explanatory. I plan on making a post better explaining the procedure once I get the hang of it better. Luckily, Sympy contains a &lt;code&gt;KanesMethod&lt;/code&gt; class that crunches all the above math for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;using-kanes-method-class&quot;&gt;Using Kanes Method Class&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Continuing with what was already derived above, all that needs to be done is create a &lt;code&gt;Particle&lt;/code&gt; object for the pendulum mass, and then create a &lt;code&gt;KanesMethod&lt;/code&gt; object with the forces and bodies derived above. I won't go too in depth on these steps, as we're just replicating what was done above using the easy functionality provided by &lt;code&gt;sympy.physics.mechanics&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [18]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create a particle object representing the pendulum mass&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Particle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a KanesMethod object. This takes the global reference frame N,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the independent coordinates (q1), the independent velocities (q2), and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the Kinematic equations derived above (kde)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KanesMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kd_eqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [19]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Make a list of tuples of the form (Particle/Body, Force on Particle/Body)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Make a list of Particles/Bodies in the system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Derive the generalized active forces, and the generalized inertial forces&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frstar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kanes_equations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [20]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for the equations of motion in first order form.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# What's happening here is the mass matrix (M) and the forcing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# matrix (F) are being solved for. This results in a system of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# equations of the form M*[q', u']^T = F.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kindiffdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mass_matrix_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forcing_full&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The final first order form is then solved for as&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [q', u']^T = M^-1 * F.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[            u1],
[-9.8*sin(q1)/L]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As seen here, the results match what was solved for above by hand, but in a much easier manner using the methods provided in Sympy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;non-minimal-set-of-coordinates&quot;&gt;Non-minimal set of coordinates&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The pendulum system demonstrated above is extremely simple, and a minimal set of coordinates and speeds readily found. But for more complicated systems it's often not that easy to find a such a minimal representation. In these cases additional coordinates and speeds are used, and an additional set of &lt;em&gt;constraint equations&lt;/em&gt; are added relating the coordinates and speeds together.&lt;/p&gt;
&lt;p&gt;To demonstrate this, the pendulum system will be re-derived using the x and y coordinates of the mass as generalized coordinates, and their derivatives as the generalized speeds. While you would never do this in practice (it makes the problem much harder), it should be a good demonstration of both configuration and velocity constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [21]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pendulum_NonMin_Coord.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[21]:&lt;/div&gt;

&lt;div class=&quot;output_svg output_subarea output_pyout&quot;&gt;
&lt;svg width=&quot;378.90466&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; id=&quot;svg2&quot; version=&quot;1.1&quot; height=&quot;456.13843&quot;&gt;
  &amp;lt;sodipodi:namedview bordercolor=&quot;#666666&quot; borderopacity=&quot;1.0&quot; fit-margin-bottom=&quot;5&quot; fit-margin-left=&quot;5&quot; fit-margin-right=&quot;5&quot; fit-margin-top=&quot;5&quot; id=&quot;base&quot; inkscape:current-layer=&quot;layer1&quot; inkscape:cx=&quot;115.27797&quot; inkscape:cy=&quot;187.91648&quot; inkscape:document-units=&quot;px&quot; inkscape:pageopacity=&quot;0.0&quot; inkscape:pageshadow=&quot;2&quot; inkscape:window-height=&quot;693&quot; inkscape:window-maximized=&quot;1&quot; inkscape:window-width=&quot;1366&quot; inkscape:window-x=&quot;0&quot; inkscape:window-y=&quot;23&quot; inkscape:zoom=&quot;1&quot; pagecolor=&quot;#ffffff&quot; showgrid=&quot;false&quot;&amp;gt;
  &lt;defs id=&quot;defs4&quot;&gt;
    &amp;lt;pattern id=&quot;pattern6485&quot; inkscape:collect=&quot;always&quot; patterntransform=&quot;matrix(1.4782083,0,0,12.709288,204.03947,0)&quot; xlink:href=&quot;#Strips1_4&quot;&amp;gt;
    &amp;lt;pattern height=&quot;1&quot; id=&quot;Strips1_4&quot; inkscape:collect=&quot;always&quot; inkscape:stockid=&quot;Stripes 1:4&quot; patterntransform=&quot;translate(0,0) scale(10,10)&quot; patternunits=&quot;userSpaceOnUse&quot; width=&quot;5&quot;&amp;gt;
      &lt;rect style=&quot;fill: black; stroke: none;&quot; height=&quot;2&quot; width=&quot;1&quot; y=&quot;-0.5&quot; x=&quot;0&quot; id=&quot;rect5768&quot;&gt;
    &amp;lt;/pattern&amp;gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow1Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke: #000000; stroke-width: 1pt;&quot; transform=&quot;matrix(0.8,0,0,0.8,10,0)&quot; d=&quot;M 0,0 5,-5 -12.5,0 5,5 0,0 z&quot; id=&quot;path3791&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-7&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-74&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-3&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-8&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-6&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-4&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-5&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-9&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-90&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1k&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path7949&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8071&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199-5&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km-9&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196-3&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4Xq&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8390&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1kmM&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8393&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
  &lt;/rect&gt;&lt;/defs&gt;
  &lt;metadata id=&quot;metadata7&quot;&gt;
    &amp;lt;rdf:rdf&amp;gt;
      &amp;lt;cc:work rdf:about=&quot;&quot;&amp;gt;
        &amp;lt;dc:format&amp;gt;image/svg+xml&amp;lt;/dc:format&amp;gt;
        &amp;lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;&amp;gt;
        &amp;lt;dc:title&amp;gt;&amp;lt;/dc:title&amp;gt;
      &amp;lt;/cc:work&amp;gt;
    &amp;lt;/rdf:rdf&amp;gt;
  &lt;/metadata&gt;
  &lt;g id=&quot;layer1&quot; transform=&quot;translate(-184.9363,-178.42594)&quot;&gt;
    &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(0.22219926,0,0,0.21267643,384.59418,428.325)&quot; d=&quot;m 357.59401,430.10822 c 0,39.05242 -30.30147,70.71067 -67.68022,70.71067 -37.37876,0 -67.68022,-31.65825 -67.68022,-70.71067 0,-39.05243 30.30146,-70.71068 67.68022,-70.71068 37.37875,0 67.68022,31.65825 67.68022,70.71068 z&quot; id=&quot;path2989&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 3.51907468px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 202.92616,204.8442 c 262.86866,0 262.86866,0 262.86866,0&quot; id=&quot;path2991&quot;&gt;
    &lt;path style=&quot;fill: #ffff00; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(-1,0,0,-1,555.58391,486.45996)&quot; d=&quot;m 253.532,280.49304 -31.29843,0 -31.29844,0 15.64922,-27.10524 15.64922,-27.10523 15.64921,27.10523 z&quot; id=&quot;path2993&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 339.78704,249.0287 103.5984,256.81995&quot; id=&quot;path2997&quot;&gt;
    &lt;text y=&quot;383.79074&quot; x=&quot;402.85715&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4793&quot;&gt;&lt;tspan y=&quot;383.79074&quot; x=&quot;402.85715&quot; id=&quot;tspan4795&quot;&gt;L&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;559.36218&quot; x=&quot;459.71429&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4797&quot;&gt;&lt;tspan y=&quot;559.36218&quot; x=&quot;459.71429&quot; id=&quot;tspan4799&quot;&gt;m&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21548557; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 448.57079,536.36278 0,91.58741&quot; id=&quot;path4827&quot;&gt;
    &lt;text y=&quot;302.36218&quot; x=&quot;530.71423&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text5019&quot;&gt;&lt;tspan y=&quot;302.36218&quot; x=&quot;530.71423&quot; id=&quot;tspan5021&quot;&gt;g&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect style=&quot;fill-opacity: 1; stroke: none;&quot; transform=&quot;matrix(1,0,0.72381295,0.68999624,0,0)&quot; rx=&quot;0&quot; ry=&quot;0&quot; height=&quot;29.007917&quot; width=&quot;251.274&quot; y=&quot;265.83615&quot; x=&quot;-2.4793456&quot; id=&quot;rect5023&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.99330068; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.91099,256.55129 0,263.31654&quot; id=&quot;path4827-1&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.34446955; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.80895,522.381 113.26991,0&quot; id=&quot;path4827-7&quot;&gt;
    &lt;text y=&quot;388.35422&quot; x=&quot;287.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6597&quot;&gt;&lt;tspan y=&quot;388.35422&quot; x=&quot;287.93631&quot; id=&quot;tspan6599&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6601&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;506.35422&quot; x=&quot;366.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6603&quot;&gt;&lt;tspan y=&quot;506.35422&quot; x=&quot;366.93631&quot; id=&quot;tspan6605&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6607&quot;&gt;2&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21548557; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 465.63937,521.37564 91.58741,0&quot; id=&quot;path4827-9&quot;&gt;
    &lt;text y=&quot;582.35425&quot; x=&quot;402.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6633&quot;&gt;&lt;tspan y=&quot;582.35425&quot; x=&quot;402.93631&quot; id=&quot;tspan6635&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6637&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;508.35422&quot; x=&quot;481.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6639&quot;&gt;&lt;tspan y=&quot;508.35422&quot; x=&quot;481.93631&quot; id=&quot;tspan6641&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6643&quot;&gt;2&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21877503; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 520.9149,264.05894 0,92.49758&quot; id=&quot;path4827-4&quot;&gt;
    &lt;g id=&quot;g8297&quot; transform=&quot;translate(-120,-14)&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2704,243.61034 0,56.62207&quot; id=&quot;path4827-70&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2074,243.13275 56.19646,0&quot; id=&quot;path4827-9-6&quot;&gt;
    &lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
    &lt;text y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301&quot;&gt;&lt;tspan y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8571&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307&quot;&gt;&lt;tspan y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8569&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.39519,236.31191 20.29154,52.86126&quot; id=&quot;path4827-70-2&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.16523,235.88862 52.46391,-20.13901&quot; id=&quot;path4827-9-6-9&quot;&gt;
    &lt;text y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301-7&quot;&gt;&lt;tspan y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303-9&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8567&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307-4&quot;&gt;&lt;tspan y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309-7&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8565&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
  &lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/rect&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [22]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create generalized coordinates and speeds for this non-minimal realization&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As before, the a rotating reference frame &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; is attached to the pendulum. However, this time we don't have a generalized coordinate representing the rotation angle. This can be easily calculated though as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\theta = \arctan(q_2/q_1)\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [23]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;theta1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'axis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The pendulum mass can easily be located in the global reference frame &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; using the generalized coordinates, as they're just the x and y coordinates of the mass.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [24]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locatenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'P1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
q1*N.x + q2*N.y

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, we calculate the kinematic differential equations as before&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [25]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The velocity of point P is just the time derivative of its position vector from the origin. Here we substitute all &lt;span class=&quot;math&quot;&gt;\(\dot{q}\)&lt;/span&gt; terms for an equivalent expression using &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [26]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
u1*N.x + u2*N.y

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As the system has only one degree of freedom, but two generalized coordinates, there needs to be a configuration consttraint relating the coordinates. The configuration constraint is expressed in the form&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ f_c(q, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, the length of the pendulum must always be &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;, so &lt;span class=&quot;math&quot;&gt;\(f_c\)&lt;/span&gt; can be expressed as&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [27]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magnitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[-L + sqrt(q1**2 + q2**2)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Similarly, there are two generalized speeds, making the use of a velocity constraint equation necessary. Velocity constraints are written as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ f_v(q, u, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, the velocity in the &lt;span class=&quot;math&quot;&gt;\(A_x\)&lt;/span&gt; direction is always zero (the pendulum is never getting longer). This can be expressed by calculating the velocity of &lt;strong&gt;&lt;em&gt;P&lt;/em&gt;&lt;/strong&gt; in reference frame &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt;, and setting the component in the &lt;span class=&quot;math&quot;&gt;\(A_x\)&lt;/span&gt; direction to 0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [28]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[sqrt((q1**2 + q2**2)/q1**2)*(q1*u1 + q2*u2)*q1/(q1**2 + q2**2)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Acceleration constraints are then just the time derivative of the velocity constraint:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [29]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[sqrt((q1**2 + q2**2)/q1**2)*(q1**3*u1&amp;amp;apos + q1**2*q2*u2&amp;amp;apos + q1**2*u2*q2&amp;amp;apos + q1*q2**2*u1&amp;amp;apos - q1*q2*u1*q2&amp;amp;apos - q1*q2*u2*q1&amp;amp;apos + q2**3*u2&amp;amp;apos + q2**2*u1*q1&amp;amp;apos)*q1/(q1**4 + 2*q1**2*q2**2 + q2**4)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For this example, the remainder will be calculated using the &lt;code&gt;KanesMethod&lt;/code&gt; class as above. Due to the presence of velocity constraints (nonholonomic), Kanes Method proceeds a little different than before, and this post is already long enough...&lt;/p&gt;
&lt;p&gt;All you really need to know is that before the EOM are derived, a subset of generalized coordinates and speeds needs to be choosen to be the &quot;independent&quot; variables, making the remaining &quot;dependent&quot;. There are reasons to choose some variables over others, but here we'll just let &lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u_1\)&lt;/span&gt; be independent, making &lt;span class=&quot;math&quot;&gt;\(q_2\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u_2\)&lt;/span&gt; dependent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [30]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Derive the equations of motion using the KanesMethod class. This proceeds much the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# same as it did in the previous section. The only difference is the addition&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# of the dependent variable and constraint kwargs.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Particle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KanesMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;configuration_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acceleration_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kd_eqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frstar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kanes_equations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kindiffdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mass_matrix_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forcing_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Solve for the first order form of the EOM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[                                                                                                                                  u1],
[                                                                                                                                  u2],
[(-1.0*q1**3*u2**2 + 9.8*q1**2*q2**2 + 2.0*q1**2*q2*u1*u2 - 1.0*q1*q2**2*u1**2 + 9.8*q2**4)/(1.0*q1**4 + 2.0*q1**2*q2**2 + 1.0*q2**4)],
[  -1.0*(9.8*q1**3 + 1.0*q1**2*u2**2 + 9.8*q1*q2**2 - 2.0*q1*q2*u1*u2 + 1.0*q2**2*u1**2)*q2/(1.0*q1**4 + 2.0*q1**2*q2**2 + 1.0*q2**4)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Note that the right hand side is now a 4x1 matrix, rather than a 2x1 as before. This will be important later.&lt;/p&gt;
&lt;p&gt;To ensure that the derived equations are equivalent, a variable transformation could be done, and the minimal case trasnformed into the nonminimal equations. However, we're just going to simulate the system to show that they have the same response. Not rigorous at all, but it's good enough for now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;simulation&quot;&gt;Simulation&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [31]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.integrate&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;First we need to substitute in numbers for the constants &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [32]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Length of 1 m&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# Mass of 1/2 kg&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Substitute into the minimal and nonminimal EOM expressions:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Using &lt;code&gt;lambdify&lt;/code&gt;, the equations of motion derived above can then be converted into equivalent &lt;code&gt;Numpy&lt;/code&gt; expressions, allowing for fast computations. Then, a second lambda expression can be used to put the EOM into the needed for numerical integration with &lt;code&gt;odeint&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [33]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_minimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lambda expressions for use with odeint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Both systems can then be simulated with &lt;code&gt;odeint&lt;/code&gt;. Let's define the initial condition to be horizontal to the right, with no initial velocity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [34]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Define initial condition to be horizontal to the right, with no velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_0_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_0_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create time vector, and run the simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_0_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_0_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Plot both simulations on top of each other&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minimal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nonminimal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As can be seen by the above, the simulation results are identical. Thus, both the minimal and nonminimal sets of coordinates result in the same system equations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;linearization&quot;&gt;Linearization&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As mentioned at the beginning of this behemoth of a post, my project for the summer is on implementing functionality for linearizing systems of equations with and without constraints. While linearizing an unconstrained system is simple, some care must be taken for linearizing a system with constraints.&lt;/p&gt;
&lt;p&gt;In the above sections we derived two sets of equations of motion for a simple pendulum; one set without constraints, and one with. Now let's see what happens when we apply the naive linearization method of the simple jacobian to both systems:&lt;/p&gt;
&lt;p&gt;First, we need to determine the trim condition we wish to linearize about. This must be a valid position (satisfy the system of equations). For simplicity, lets choose the stable, straight down at rest configuration (&lt;span class=&quot;math&quot;&gt;\(\theta = 0\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(\omega = 0\)&lt;/span&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [35]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Set the trim condition for the minimal approach&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Perform simple linearization by computing the jacobian of the rhs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jacobian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[35]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
Matrix([
[   0, 1],
[-9.8, 0]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [36]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Set the trim condition for the nonminimal approach&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Perform naive linearization by computing the jacobian of the rhs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jacobian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[36]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
Matrix([
[0,    0, 1, 0],
[0,    0, 0, 1],
[0,    0, 0, 0],
[0, -9.8, 0, 0]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;One use for a linearized system is for stability analysis at the point of linearization. This is done by computing the eigenvalues of the resulting system matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [37]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minimal Eigenvalues:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nonminimal Eigenvalues:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Minimal Eigenvalues:
 {7*sqrt(5)*I/5: 1, -7*sqrt(5)*I/5: 1}
Nonminimal Eigenvalues:
 {0: 2, 7*sqrt(5)*I/5: 1, -7*sqrt(5)*I/5: 1}

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Looking at the eigenvalues of each matrix (as well as the &lt;em&gt;shape&lt;/em&gt; of each matrix) you can already see something's not quite correct with the nonminimal linearization. With only one coordinate and one speed needed to set the state for the system, there should be only 2 eigenvalues, while the nonminimal linearization gives 4.&lt;/p&gt;
&lt;p&gt;To further the point, the linearized systems can be simulated and compared with the nonlinear system. For small angle deviations, the system responses should be similar. We'll use a deviation of 1 degree, which should be small enough that they match:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [38]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create the initial conditions based on the trim a deviation of 1 degree&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# from the trim condition, with no initial velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [39]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create the required functions for simulation with odeint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_nonminimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_minimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_nonminimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_minimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_minimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [40]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run the simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [41]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Plot the results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Minimal Coordinates Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonlinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonminimal Coordinates Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonlinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;While the minimal coordinate linear and nonlinear simulation results line up nicely, the &lt;span class=&quot;math&quot;&gt;\(N_x\)&lt;/span&gt; coordinate response of the linearized nonminimal system is significantly off. This is because for the nonminimal system, the generalized coordinates and speeds aren't independent but functions of other coordinates and speeds. Thus, when taking the jacobian the chain rule needs to be applied correctly, and the dependent states removed from the linearized expression.&lt;/p&gt;
&lt;p&gt;This is the basis for my GSoC project. The implementation of a robust way to linearize systems that &lt;em&gt;works&lt;/em&gt;, regardless of constraints or nonminimal system realization. A method for doing this in a systematic manner was derived by one of my mentors, and I plan on starting with that. I think it can be generalized to Lagrange's equations, as well as other systems, but I need to think more on that.&lt;/p&gt;
&lt;p&gt;This week I spent some time teaching myself Kane's Method, and then the remainder working through a bunch of test cases to be used as unit tests for the linearization routines. Next week I'll begin work on the actual implementation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This ipython notebook can be found &lt;a href=&quot;https://github.com/jcrist/ipython_notebooks/tree/master/Pendulum&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</description>
	<pubDate>Sat, 24 May 2014 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba: GSoC 14: Community Bonding Period Ends</title>
	<guid isPermaLink="true">http://tarzzz.github.io/gsoc14/community-bonding.html</guid>
	<link>http://tarzzz.github.io/gsoc14/community-bonding.html</link>
	<description>{% include JB/setup %}


[ &amp;lt;-Back to posts ](/gsoc14)

Community bonding period has ended, and it has been great for multiple reasons.
Our organization has decided to introduce some new suggestions for improving
the quality of the projects, we would be collaborating with another open source project for a 
software package, and everybody will be having fun this summers!!

About the new suggestions, there are mainly two:

  - Firstly, the PR's of a student will be reviewed, in addition to the mentor
    by other students in the organization before merging. PyDy has three students this year
    and all three will be reviewing each other's PR's. This is a nice innovation to help other
    students keep track of what other students are up to. They can help them, correct them, 
    constructively criticize them, and above all become better friends. 

  - Secondly, We have decided to fix the pattern of the weekly blog posts. From now on, all 
    my _official_ weekly blog posts will come in AOI format (Not [A.O.E.](en.wikipedia.org/wiki/Age_of_Empires)).
    In this format I should mention the **Achievements** of the previous week(s), The **Objectives**
    of the next week, and the **Issues** involved. Introducing a fix pattern makes the official blog posts
    more readable and useful for those who want to get quick information of where the project is headed to!


Another good thing is that the organization has decided to collaborate with [Adam Leeper](http://adamleeper.com/), 
who has happily agreed to collaborate with us. Adam has written a software package MGView, which is similar to our 
PyDy visualizer, but uses a different dynamics backend. We will be collaborating on developing a generic 
dynamics visualizer, which should be able to visualize output data from various dynamics engines. 
We are working on an API for the new visualizer this week.

Apart from these, I have also been playing around to explore the new functionality of the Widgets introduced 
in IPython2.0, which is going to be helpful in my project. I will also try to give some demonstrations of 
new IPython2.0 features, hopefully(If I get enough _time_).

So another Summer of Code, kick starts!!

Happy Coding!


[ &amp;lt;-Back to posts ](/gsoc14)</description>
	<pubDate>Fri, 23 May 2014 08:40:42 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba: GSoC 14: First Post</title>
	<guid isPermaLink="true">http://tarzzz.github.io/gsoc14/first-post.html</guid>
	<link>http://tarzzz.github.io/gsoc14/first-post.html</link>
	<description>{% include JB/setup %}
[ &amp;lt;-Back to posts ](/gsoc14)

This is the first blog of the series, which I will maintain to provide information
and updates on my Google Summer of Code,14 project.

I feel very elated on getting selected consecutively for the second time for GSoC.
I had spent a great summer coding on the project last year, and I am really looking 
forward for an exciting summer this year as well.

In this very first blog post, I am going to give a bird's eye view of what is proposed
in this project.(it is a slightly long post, so please bear with me! :) )

In a nut-shell we plan to develop a generic dynamics visualizer and then provide IPython support for it.
Along with that we plan to create a gallery to showcase the benchmark problems in dynamics, and also help new users 
to be aware of all the functionality provided by `pydy.viz`.

About the generic visualizer, it should be able to take data input from major dynamics 
engines( [PyDy](https://pydy.org) and [MotionGenesis](https://www.motiongenesis.com/) at the very least ) and be able to visualize and animate it.

Another facet of this visualizer is that we should be able to change Simulation parameters from the GUI itself
and then re-run the simulations(in the respective dynamics engines) and then be able to produce the new results, visually.

IPython has become a great tool among scientific community, and we plan to provide IPython notebook support for the visualizer.

A call to:

    scene.display()


should be able to display the visualizer in the output cell of the IPython notebook, with the functionality to change 
the simulation parameters, which are then sent to dynamics engine, using IPython kernel, and then new results can be visualized.

Mainly the new visualizer is intended to run in IPython notebooks, but we also have to make arrangements for those who
(for some reasons!) don't want to use IPython to display the visualizations. We should be able to spit out static html files
for the visualizations, and they can then be run on a simple HTTP Server, or directly viewed in the browser. 
These static files will not have functionality to rerun the simulations after changing parameters, but it is useful in the sense
that we can keep the visualizations in the static format on the drive(or repository), and view it/publish it/present it.

[ &amp;lt;-Back to posts ](/gsoc14)</description>
	<pubDate>Wed, 21 May 2014 00:20:44 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: GSoC-2014 – Linear Algebra Module for CSymPy</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=274</guid>
	<link>http://thilinaatsympy.wordpress.com/2014/05/20/gsoc-2014-linear-algebra-module-for-csympy/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;This summer, as my GSoC project, I will be working on a Linear Algebra Module for CSymPy which is hoped to be used along with SymPy after the completion. I am going to mainly focus on Matrices and associated algorithms. This is my second GSoC project. I did my first project last summer with SymPy and I am really excited to work with the SymPy community again.&lt;/p&gt;
&lt;p&gt;CSymPy is a fast core written in C++ for SymPy. It was started by Ondrej and try to address some performance critical applications where python is rather slow.  Linear algebra and related algorithms are performance critical as we have to deal with large matrices. So writing them in C++ will make them faster and these fast algorithms can be used in SymPy via python wrappers. You can find more about CSymPy by visiting the &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;project page&lt;/a&gt; in github.&lt;/p&gt;
&lt;p&gt;Apart from focusing on performance, I like to pay special attention to symbolic matrices and their manipulations. My aim is to make CSymPy the fastest library available for symbolic mathematics. There are a few challenges we need to overcome, especially avoiding intermediate expression swelling.&lt;/p&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/sympy/csympy/pull/169&quot;&gt;PR&lt;/a&gt; with the basic structure for the Matrices. Please have a look. I would love to hear what you have to say.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/274/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/274/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=274&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 19 May 2014 22:27:09 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-501859786358105166</guid>
	<link>http://gsocblog.blogspot.com/2014/05/i-started-my-work-with-implementing.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I started my work with implementing asymptotic expansion.&lt;br /&gt;&lt;br /&gt;Gruntz mention the MrvAsympt algorithm to compute asymptotic expansion in his paper &quot;A new algorithm for computing asymptotic series&quot;. It uses mrv and rewrite sub-routines which are already implemented in SymPy making my work easier.&lt;br /&gt;However there are some issues that I must deal with. One of them is to figure out when to call this algorithm. Currently if the current implementation of series fails to return any relevant output, this algorithm is called to give an asymptotic expansion of the expression.&lt;br /&gt;The user can also directly call this algorithm by calling the aseries method similar to the previous nseries and lseries methods.&lt;br /&gt;&lt;br /&gt;This algorithm uses a top down recursion method. Next step will be to implement hierarchical series which is nothing but stopping the recursion at an early level. It should be under user's control so an extra parameter should be needed.&lt;br /&gt;This is just the beginning and I hope to add more interesting features to SymPy.&lt;br /&gt;&lt;br /&gt;Here are the results till now:-&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-_bxLsM3335g/U3o6L4fFPcI/AAAAAAAAAcY/e4I7ftfKV6g/s1600/Asympt.png&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-_bxLsM3335g/U3o6L4fFPcI/AAAAAAAAAcY/e4I7ftfKV6g/s1600/Asympt.png&quot; border=&quot;0&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 19 May 2014 17:09:43 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-3114660856880190348</guid>
	<link>http://gsocblog.blogspot.com/2014/05/this-summer-ill-be-coding-for-sympy-as.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This summer I'll be coding for SymPy as part of Google Summer Of Code 2014 program. SymPy is a computer algebra system written in pure python. &lt;a href=&quot;http://sympy.org/en/index.html&quot;&gt;Here&lt;/a&gt; is its official homepage. &lt;br /&gt;&lt;br /&gt;My project is &quot;Series expansion&quot;. I aim to improve asymptotic expansion and implement formal power series. My mentors for this project are Stefan Krastanov and Sergey B Kirpichev. I am really excited to get started with the project.&lt;br /&gt;&lt;br /&gt;During the community bonding period, I'll try to get started with my work and get a head start.&lt;br /&gt;&lt;br /&gt;Hope to have a great summer and thank you to Google and SymPy for the opportunity!&lt;/div&gt;</description>
	<pubDate>Mon, 12 May 2014 10:54:59 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Kundan Kumar: Beginning of a journey</title>
	<guid isPermaLink="false">http://kundankumar185.wordpress.com/?p=3</guid>
	<link>http://kundankumar185.wordpress.com/2014/05/04/beginning-of-a-journey/</link>
	<description>&lt;p align=&quot;justify&quot;&gt;Its matter of great happiness for me, I got selected in GSOC. Well not only that three of us (friends), out of four, who together were preparing for GSOC got selected. At the same time, it feels bad when someone is giving same input as you but does not get same output. Same happened with one of us, but nevertheless it gives an inspiration to work harder to achieve what we opt for.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;The sacrifice of holidays and mid-exams turned out in fruitful manner and here we are preparing ourselves to work with our respective organizations in GSOC’14. We gave what we had to our fullest during last 2 months with no knowledge of day and night.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;It’s my first time I am contributing to an open source organization. Sympy is the first open source organization with which I am engaging with and also got selected in GSOC under this organization. From the last two month I am playing with the sympy code on differential equation solving engine. Till now I have fixed two bugs and added a method to solve a type of ODE.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;After working in open source organization, particularly sympy, I got to learn many things. The thing I liked the most is that people contributing selflessly to build software which will be available to everyone, especially those who find it very difficult to buy a software because of its high cost. It has connected people across the globe to work together and know each other, being rare for those who can’t go abroad. It feels really great to know others and make friends from all over the world. In this matter, Google has done a great job by promoting open source through Google Summer of Code, thats a thing for which I would really like to praise Google among many others. It has provided a force to every coders to contribute to open source.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Well about how I started working in sympy is a long story of hard work and patience. I started working from 27 Feb, just 22 days before proposal submission and it took a lot of time to understand things, how sympy works. Initially I was even unable to understand its issues completely and didn’t know how to solve so I just kept reading the issues over and over. Well it was hard but sympy mentors helped a lot. That time I learned “time teaches everything what we need is dedication to work”.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;That’s it for now I think for my first post on first blog. I have a lot to say but they are for next time. There is a long journey I have to travel, being started with Google Summer of Code.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/3/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/3/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=3&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 May 2014 23:40:25 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC 2014 with SymPy</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-581868626457110552</guid>
	<link>http://lifelesscode.blogspot.com/2014/04/gsoc-2014-with-sympy.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;My proposal is intended to add more to optics in SymPy. Till now it can only do computations related to Gaussian optics and a bit of geometrical optics. &lt;a href=&quot;https://github.com/certik&quot; target=&quot;_blank&quot;&gt;Ondřej Čertík&lt;/a&gt; and &lt;a href=&quot;https://github.com/flacjacket&quot; target=&quot;_blank&quot;&gt;Sean Vig&lt;/a&gt; are my mentors for the project.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;For those who don't know what is SymPy, SymPy is a Python library for symbolic computation. It provides computer algebra capabilities either as a standalone application, as a library to other applications, or live on the web as SymPy Live. SymPy is trivial to install and to inspect because is written entirely in Python and because it does not depend on any additional libraries. This ease of access combined with a simple and extensible code base in a well known language make SymPy a computer algebra system with a relatively low barrier to entry. SymPy is free software and is licensed under New BSD license. The lead developers are Ondřej Čertík and Aaron Meurer.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Three more people other than me got selected for SymPy from my college, namely, Akshay, Sachin Joglekar and Soumya Dipta Biswas.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;During this &lt;i&gt;Community Bonding Period &lt;/i&gt;I'll try to get familiar with the huge code base of SymPy and its community of developers. I'm also working on few old pull requests that are dead for so long.&lt;br /&gt;&lt;br /&gt;Looking forward to work with such a great organization! Thanks to Google and SymPy for this opportunity!&lt;/div&gt;</description>
	<pubDate>Fri, 25 Apr 2014 18:00:29 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Akshay Narasimha: Gsoc-14 with SymPy</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-8832200362911847122</guid>
	<link>http://geekpy.blogspot.com/2014/04/gsoc-14-with-sympy.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This summer is really going to be productive as I will be writing code for SymPy as a part of Google Summer of Code-14 (Gsoc). For more details regarding the programme visit this &lt;a href=&quot;https://www.google-melange.com/&quot;&gt;site&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;For those of you who are not familiar with SymPy, well it is a Computational algebraic system(CAS) library written in pure python.The project is currently headed by Aaron Meurer and Ondrej Certik.&lt;br /&gt;&lt;br /&gt; My project &quot;Improvements to the Geometry library&quot; got accepted under SymPy organisation. My mentor for this project will be Stefan Krastanov and I am really excited to work with him. There are three other guys from my university who got selected for SymPy Sudhanshu Mishra, Sachin Joglekar, Soumya Dipta Biswas ,and I would like to wish them luck for their projects.&lt;br /&gt;&lt;br /&gt; Coming to my project I would be extending the geometry module of SymPy to include 3-D entities and also implementing some new classes along the way. For more details about my project you could check my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application--Akshay--Geometry-Module&quot;&gt;proposal&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt; This is my first time participating in Gsoc and I am looking forward to a great summer.&lt;/div&gt;</description>
	<pubDate>Thu, 24 Apr 2014 20:27:00 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Sushant Hiray: GSoC in Project CSymPy</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/selected-gsoc/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/selected-gsoc/</link>
	<description>&lt;p&gt;Well its endsem time and probably the first time I’m quite happy during this period. I’ve been selected for &lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;GSoC&lt;/a&gt; under the organization &lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/sympy&quot;&gt;SymPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will be working for the project &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;CSymPy&lt;/a&gt; in enhancing the elementary functions module. And well I will be mentored by the awesome &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej Certík&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;
&lt;p&gt;Currently there are very few functions implemented in CSymPy. I aim to extend the module of the elementary functions further, on the similar lines of SymPy . I expect to implement a certain subset of special functions which are already implemented in SymPy. Since CSymPy is particularly new, almost all the special functions have certain dependencies. The project aims in developing a modular architecture to first implement the dependencies and then develop the special functions.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;
&lt;p&gt;I have discussed my timeline in quite some details both in &lt;a href=&quot;https://groups.google.com/forum/#!forum/sympy&quot;&gt;SymPy mailinglist&lt;/a&gt; and on &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;gitter&lt;/a&gt;. My proposal is &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Sushant-Hiray:-Extending-Elementary-Functions-CSymPy&quot;&gt;here&lt;/a&gt;
This might get refined a bit during the ongoing community bonding period!&lt;/p&gt;

&lt;h2 id=&quot;road-ahead&quot;&gt;Road Ahead&lt;/h2&gt;
&lt;p&gt;Officially GSoC starts from May 19, well but we would probably start shipping in code post endsems.
If you are free this summer and would love to contribute, feel free to catch us up at &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;gitter&lt;/a&gt;. We will help you get started. Till then sayonara, will continue posting updates hopefully each week! :)&lt;/p&gt;</description>
	<pubDate>Sun, 20 Apr 2014 18:30:00 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer (old): This blog has moved</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1413</guid>
	<link>http://asmeurersympy.wordpress.com/2014/04/05/this-blog-has-moved/</link>
	<description>&lt;p&gt;This blog has moved to &lt;a href=&quot;http://asmeurer.github.io&quot;&gt;http://asmeurer.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://asmeurer.github.io/blog/posts/moving-to-github-pages-with-nikola/&quot;&gt;http://asmeurer.github.io/blog/posts/moving-to-github-pages-with-nikola/&lt;/a&gt; for more details on why I have moved. For now, all posts on this blog have not been migrated. &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1413/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1413/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1413&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 05 Apr 2014 01:16:25 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: Getting Started With Open Source</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/getting-started-with-open-source</guid>
	<link>http://sushant-hiray.in/posts/getting-started-with-open-source</link>
	<description>&lt;p&gt;Open source is so ubiquitous nowadays that its inevitable you are benefiting from it every day even if you don’t know it just by using applications on the desktop, web, or mobile. The applications you use most likely have dependencies that are open source. If you’re on Mac or Linux, the unix kernel that powers them is open source.&lt;/p&gt;

&lt;p&gt;Many people including myself feel encouraged to contribute projects that we use and benefit from because it helps the ecosystem as a whole. The entire ecosystem grows exponentially as more people contribute and work together, it’s a powerful thing.&lt;/p&gt;

&lt;p&gt;GitHub has made all of this easier by focusing on the most important aspects of every project, the source code as well as the ability to work on it and be social. Because of this there is now a surge in people contributing and working together for a common goal, making better things. People are working on open source everything, books, software, blogs, you name it, there is no limit to what people are working on.&lt;/p&gt;

&lt;h2&gt;Find a project&lt;/h2&gt;

&lt;p&gt;There are millions of projects on GitHub. Whatever  work you do, regardless of any language you use, there’s bound to be something. Every time I come across something I like and think I will some day use, I bookmark/star/watch it. Remember that strange bug you experienced with one of your libraries?
These are the best ways to start finding some interesting projects. Github also has an interesting &lt;a href=&quot;https://github.com/explore&quot;&gt;showcase&lt;/a&gt; of trending projects which you can explore.&lt;/p&gt;

&lt;h2&gt;Work on it&lt;/h2&gt;

&lt;p&gt;When you find something to work on, fork/clone it and start making changes. Add new features, fix bugs, discuss with other people, be social. Maybe the creator only knew English and you know French so you can help translate docs, if not anything else. There is so much potential and no limit to what you can do to help.&lt;/p&gt;

&lt;h2&gt;Submit your changes&lt;/h2&gt;

&lt;p&gt;When you’re ready to, submit a pull request back to the original project. It’s possible the maintainer will ask you to do some tweaks or modifications to meet their standards. Hopefully you will have your changes merged in the original and everyone who uses the project will benefit. Don’t know &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;? GitHub has made it easy to create and edit files in your browser. If it is software you are using and you’re not technical and can’t work on it, submit an issue so that everyone who uses it knows what the status of the project is.&lt;/p&gt;

&lt;h2&gt;Enjoy your karma&lt;/h2&gt;

&lt;p&gt;Do this for all of the projects you encounter, the internet will thank you for it.&lt;/p&gt;</description>
	<pubDate>Fri, 28 Mar 2014 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Moving to GitHub pages with Nikola</title>
	<guid isPermaLink="true">http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</guid>
	<link>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</link>
	<description>&lt;div&gt;&lt;p&gt;So I've finally decided to move my blog from Wordpress to GitHub pages.  I
highly recommend it if you are technically skilled enough to do it. I was
getting pretty annoyed at Wordpress. It forces you to write your posts in
html (or else using their WYSIWYG editor), the wordpress.com is locked down,
so you can't add any Javascript, their math is stuck in the past rendering png
instead of using MathJax. The list goes on.&lt;/p&gt;
&lt;p&gt;With GitHub pages, I can write my posts in Markdown, and I have full control
over everything. And there is no lock in. If I decide I don't like the
software that is generating the posts, I can easily move to something else,
since the post content itself is all Markdown (or the occasional rst or
IPython notebook if I want to do something that Markdown doesn't support). I
can use MathJax for math (like \( e^{i\pi} + 1 = 0 \)). Wordpress.com
doesn't let you install abtirary Javascript on your blog, so you can't do
things like install MathJax or enable some cool sidebar thing (like a Twitter
feed).&lt;/p&gt;
&lt;h2&gt;Setting up GitHub Pages&lt;/h2&gt;
&lt;p&gt;First, you need to set up GitHub pages. This is a bit confusing, because there
are actually two kinds of GitHub pages, user pages and project pages. User
pages are if you have a repo named &lt;code&gt;username.github.io&lt;/code&gt; (or &lt;code&gt;.com&lt;/code&gt;). The pages
are served from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;For project pages, you add a &lt;code&gt;gh-pages&lt;/code&gt; branch to any one of your projects,
and GitHub hosts the content automatically at
&lt;code&gt;username.github.io/projectname&lt;/code&gt;. I originally had my blog content at
&lt;code&gt;asmeurer.github.io&lt;/code&gt;, but I didn't like that I had to do everything in master,
both the generated and original content. So instead I created a repo called
&lt;code&gt;blog&lt;/code&gt;. I have my content in the &lt;code&gt;master&lt;/code&gt; branch and the generated pages in
the &lt;code&gt;gh-pages&lt;/code&gt; branch (more on this later). At my
&lt;a href=&quot;https://github.com/asmeurer/asmeurer.github.com&quot;&gt;&lt;code&gt;asmeurer.github.com&lt;/code&gt;&lt;/a&gt; repo,
I just have for now a basic redirect to the blog. In the future, I may want to
put additional, non-blog content on the website, and it would go there (or in
a separate project repo with its own &lt;code&gt;gh-pages&lt;/code&gt; branch).&lt;/p&gt;
&lt;h2&gt;Nikola&lt;/h2&gt;
&lt;p&gt;I had initially planned on using
&lt;a href=&quot;http://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;. However, I got stalled on the
Wordpress import. I like that Pelican is written in Python, but I was not too
keen on their abrasive
&lt;a href=&quot;https://github.com/getpelican/pelican/blob/master/LICENSE&quot;&gt;license&lt;/a&gt;. Frankly,
I shouldn't say too many bad things about Pelican because I never really tried
that hard with it.&lt;/p&gt;
&lt;p&gt;I have decided to try &lt;a href=&quot;http://getnikola.com/&quot;&gt;Nikola&lt;/a&gt; instead. It's also
written in Python. It has a very nice
&lt;a href=&quot;https://github.com/getnikola/nikola/blob/master/LICENSE.txt&quot;&gt;license&lt;/a&gt;. I like
the philosophy of the &lt;a href=&quot;http://getnikola.com/handbook.html&quot;&gt;manual&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've also discovered that the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/nikola-discuss&quot;&gt;Nikola community&lt;/a&gt; is
&lt;em&gt;very&lt;/em&gt; nice. And of course, even if Nikola ends up not being for me, it will
be easy to switch, because my actual content is just some Markdown files that
I own.&lt;/p&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Getting started with Nikola is pretty easy. First, you need to install it. It
has a &lt;em&gt;ton&lt;/em&gt; of dependencies (fortunately all Python, so it won't be that
hard). In addition to the ones in the requirements.txt, you should also
install &lt;code&gt;markdown&lt;/code&gt; and &lt;code&gt;webassets&lt;/code&gt;. While using &lt;code&gt;nikola&lt;/code&gt;, it will tell you if
you don't have something installed that you should, so if you see that, just
install what it tells you to.  If you use &lt;code&gt;conda&lt;/code&gt; and Mac OS X, I have
uploaded all the dependencies to my &lt;a href=&quot;https://binstar.org/asmeurer/&quot;&gt;Binstar&lt;/a&gt;,
so you can just &lt;code&gt;conda install -c asmeurer nikola&lt;/code&gt;. Oh and don't worry, Nikola
and its dependencies fully support Python 3 (I wouldn't be using it if they
didn't).&lt;/p&gt;
&lt;p&gt;Then you just run the commands from
http://getnikola.com/handbook.html#all-you-need-to-know.&lt;/p&gt;
&lt;p&gt;One thing that doesn't tell you is that after you init the site, you should
walk through &lt;code&gt;conf.py&lt;/code&gt; and change the settings to your liking.&lt;/p&gt;
&lt;p&gt;Another trick not there is that you can add&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`nikola tabcompletion`&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to your Bash profile to get tab completion.&lt;/p&gt;
&lt;h3&gt;Tricks&lt;/h3&gt;
&lt;p&gt;Here are some useful tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To enable MathJax, you have to type &lt;code&gt;mathjax&lt;/code&gt; in a line by itself in the
metadata file. There are some bugs right now, but ideally you could do inline
math with &lt;code&gt;$math$&lt;/code&gt; and display math with &lt;code&gt;$$math$$&lt;/code&gt;. &lt;code&gt;$math$&lt;/code&gt; doesn't work
currently, but you can do &lt;code&gt;\\(math\\)&lt;/code&gt; (both &lt;code&gt;\&lt;/code&gt;s are required, although this
is likely a bug). You can do &lt;code&gt;\\[math\\]&lt;/code&gt; for display math.  Here are some
examples. Inline: \( \sin ^2{x} + \cos^2{x} = 1\). Display: $$ e^{i\pi} + 1 = 0 .$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your one-stop command when blogging is &lt;code&gt;nikola auto&lt;/code&gt;. This requires
  &lt;code&gt;livereload&lt;/code&gt;. This will serve the blog on localhost, and automatically
  rebuild it when any change is made (and I really mean &lt;em&gt;any&lt;/em&gt; change: it can
  even detect when you change Nikola itself).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have the following in my conf.py to deploy:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;DEPLOY_COMMANDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git checkout gh-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ .&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git add -A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git commit -a -m 'Updating blog content'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git checkout master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WARNING: These commands are dangerous. If you don't properly exclude things
like &lt;code&gt;.git&lt;/code&gt;, you will wipe your entire git history. I &lt;em&gt;highly&lt;/em&gt; recommend
committing everything and pushing to GitHub before deploying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;_site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DS_Store&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Despite what it says on the Nikola page, be sure to read the docs, because
there are a lot of cool features you won't know about unless you read about
them. Also be sure to read through &lt;code&gt;conf.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wordpress import&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This is something that I am still figuring out. You can see the progress at
  &lt;a href=&quot;http://asmeurer.github.io/blog/old_blog&quot;&gt;http://asmeurer.github.io/blog/old_blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Importing from Wordpress is pretty easy actually (at least in theory). First
you need to go to the Wordpress site dashboard and go to &quot;Export&quot; from the
&quot;Tools&quot; menu. From here you can download an XML file with all your
content. Then just do&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;nikola&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import_wordpress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the current version of Nikola as of this writing (6.3.0) doesn't do
this right, so you'll need to use the
&lt;a href=&quot;https://github.com/getnikola/nikola&quot;&gt;git master&lt;/a&gt;. There are some issues with
the import, since Wordpress has its own markup that it doesn't know everything
about, so you may need to go in and fix things. Or report them as bugs to
Nikola and reimport when they are fixed.&lt;/p&gt;
&lt;p&gt;You'll need to go through the posts and make sure that they are rendered
correctly (this is one reason I haven't finished doing it yet).&lt;/p&gt;
&lt;p&gt;For comments, you first need to create a Disqus account, and enable it in your
conf.py. You should then upload the xml file that you exported from Wordpress
to Disqus. At this point, the comments should just work, because Nikola sets
the Disqus url for the imported comments to the old Wordpress url (look at the
Disqus section of one of the built pages).&lt;/p&gt;
&lt;p&gt;I don't know how to automatically backlink from Wordpress back to
Nikola. Maybe I should just automatically generate some links and paste them
in manually.&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 09 Feb 2014 23:19:18 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: Y U NO USE screen</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/y-u-no-use-screen</guid>
	<link>http://sushant-hiray.in/posts/y-u-no-use-screen</link>
	<description>&lt;p&gt;Imagine a fairly common situation — you are ssh'ed to a remote server, doing stuff and then all of a sudden your internet connection drops and the console has frozen. And even after the connection is back, console won’t respond, because the pipe between your computer and remote one has broken.&lt;/p&gt;

&lt;p&gt;We’ve all been there, it sucks. And it sucks even more if there was a long running process executed from that console say for example &lt;code&gt;scp&lt;/code&gt;ing a huge file.&lt;/p&gt;

&lt;p&gt;Well I faced this situation quite some times while working for our compiler’s lab assignment this weekend and it pissed me enough to search for a solution!&lt;/p&gt;

&lt;p&gt;There is a very old and simple tool, that can help you to prevent this from happening. It is called — &lt;code&gt;GNU Screen&lt;/code&gt;. I had a faint remembrance of seeing &lt;a href=&quot;https://www.facebook.com/manish.goregaokar&quot;&gt;Manish&lt;/a&gt; use it, so I decided to explore it a bit more. Basically, screen allows you to create a virtual session inside your ssh session(or any console session), that isn’t bound to your connection. Meaning that if your connection drops, you will be able to connect to this virtual session afterwards. Hopefully, you already see the benefits you can get from using it, so let’s get to how you actually use it.&lt;/p&gt;

&lt;h2&gt;1. Installing screen&lt;/h2&gt;

&lt;p&gt;Usually screen won’t be installed your system, so you would:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or do whatever you do to install stuff on your machine.&lt;/p&gt;

&lt;h2&gt;2. Starting a new screen session&lt;/h2&gt;

&lt;p&gt;To start and new virtual session simply type &lt;code&gt;screen&lt;/code&gt; into your console. Normally it would greet you with a copyright notice. Press return to skip it and you’re set — now you are inside the virtual console. Feels pretty much the same, right? Except now you can go ahead and disconnect from the internet and you will be able to connect to the session once you are back online.&lt;/p&gt;

&lt;h2&gt;3. Communicating with screen&lt;/h2&gt;

&lt;p&gt;Inside a virtual session you can initiate communication with the screen tool by pressing &lt;code&gt;Ctrl + A&lt;/code&gt;, followed by a single letter command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;D&lt;/code&gt; — ‘detach’. It detaches you from current session, leaving it running in background.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;K&lt;/code&gt; — ‘kill’. This would terminate the screen session. It would probably ask you to confirm this, so press y if you are sure about it. Logging out from a virtual console also terminates it.&lt;/p&gt;

&lt;p&gt;These are two commands that you would need for basic understanding of screen, but ofcourse, as most of the UNIX tools, &lt;code&gt;screen&lt;/code&gt; has much more power underneath the bonet.&lt;/p&gt;

&lt;h2&gt;4. Connecting to an existings virtual session&lt;/h2&gt;

&lt;p&gt;In case of a lost connection or to resume a previously started session, you need to type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will attach you to a screen session. In case there are more then one active session, you’ll see a list of them. To connect to a particular screen, simply add it’s identifier as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r 12345.pts-0.yourserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way you can have multiple sessions running, allowing you to switch between them and not having to keep multiple ssh connections alive. To see a list of active screens, just type in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -ls
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. Naming your screens&lt;/h2&gt;

&lt;p&gt;You can also give your screen a name, that you can use later on as a connection identifier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -S something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to restore that session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s basically it. With these few simple commands in mind you won’t be afraid of a frozen consoles and “Broken pipe” error messages, because your session is safe and sound with screen. So go ahead try it and get used to it, because it will help you a lot.&lt;/p&gt;

&lt;p&gt;ps: The title is motivated by a blogpost I recently saw being shared on &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 27 Jan 2014 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: 30 Days of Github Streaking</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/30-days-github-streak</guid>
	<link>http://sushant-hiray.in/posts/30-days-github-streak</link>
	<description>This winter I started off with an interesting aim, trying to maximize my commit streak on github.
&lt;br /&gt;
First of all, it’s really fun to see your stats (the green graph on your profile), and once you have a streak going, you should avoid breaking it! C'mon who likes seeing gray idle zones in a green graph!
&lt;br /&gt;
&lt;img src=&quot;http://sushant-hiray.in/images/streak.png&quot; /&gt;
&lt;br /&gt;
It all started when I was working on &lt;a href=&quot;http://sushant-hiray.github.io/tshn/&quot;&gt;TSHN&lt;/a&gt; I noticed that I had bettered my previous best was of 17 days streak! It was a lack-luster streak that I wanted to improve but just couldn’t find enough motivation. 
&lt;br /&gt;And &amp;lt;bold&amp;gt;bang&amp;lt;/bold&amp;gt; I broke my streak in just  &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-13&quot;&gt;3 days&lt;/a&gt; :(
&lt;br /&gt;
So I decided to set up a task for myself.
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;The 30 day challenge&lt;/h3&gt;
The task was simple: to keep the streak for atleast 30 days. &lt;br /&gt;
I started this streak off with a bang, contributing nearly &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-15&quot;&gt;20 commits&lt;/a&gt; to my &lt;a href=&quot;http://sushant-hiray.github.io/&quot;&gt;website&lt;/a&gt; and other various projects on the second day. Soon I wen past that with &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-17&quot;&gt;34 contributions&lt;/a&gt;This actually happened to be the most contributions in a single day that I made throughout the current streak.
&lt;br /&gt;
&lt;br /&gt;
One week into the challenge it was getting though to keep on contributing.
I was nearly forgetting to commit or otherwise contribute, waiting until the last possible moment to submit my daily contribution. Ofcourse since GitHub runs on PST, which meant I could contribute anywhere from 12am — 1:30pm local time (IST) and have it count for the previous day. When I got home extra late a few nights, this trick had my back.
&lt;br /&gt;
&lt;br /&gt;
Three weeks in it was easier to remember to commit, it was becoming more of a habit. 
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Thirty days&lt;/i&gt; was exciting! I had made it! And all I wanted to do was keep going! After a couple of weeks, it just became a way of life. Eat, sleep, commit was a part of routine and I no longer found it difficult to include in my day-to-day rituals. But it was hard to be 100% consistent, so there were definitely some close calls on busy days and some tricks did help me save from ruining my streak. &lt;br /&gt;
These are present in &lt;a href=&quot;https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile&quot;&gt;Github FAQ&lt;/a&gt;
 &lt;br /&gt;
 &lt;br /&gt;
&lt;h3&gt;Looking Back&lt;/h3&gt;
Looking back to the past 30 days, it has been quite fun to push myself and make sure I donot leave a dry mark. Also I did learn a couple of stuff:
&lt;ul&gt;
	&lt;li&gt;Try to work on multiple projects, in this way you have enough ways to contribute code &lt;/li&gt;
	&lt;li&gt;Its not necessary to start your own project, helping someone with minor fixes is almost as good. After all that is what social coding is for &lt;/li&gt;
	&lt;li&gt;I've noticed quite a few people commit a bulk of changes obly once, but this sorta beats the purpose of using version control. Try to break a big task into small sub tasks and commit them accordingly, this will help to revert back easily. Regardless to say, it does help increase your contribution stats!
&lt;/li&gt;&lt;/ul&gt;	
All in all it has been a git streak winter! I'm not sure how much more I can possibly extend this streak considering we have the most dreadful 3rd year 2nd sem starting!
&lt;br /&gt;&lt;br /&gt;
Happy Streaking! 
&lt;br /&gt;</description>
	<pubDate>Sun, 12 Jan 2014 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: Setting up post-receive hook</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/setting-up-post-receive-hook</guid>
	<link>http://sushant-hiray.in/posts/setting-up-post-receive-hook</link>
	<description>&lt;p&gt;Recently, we switched to using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for our &lt;a href=&quot;http://wncc-iitb.org/&quot;&gt;WnCC&lt;/a&gt; website.
This post will essentially help to configure &lt;code&gt;post-receive hooks&lt;/code&gt; on your local repository.&lt;/p&gt;

&lt;p&gt;Using git hooks you no longer need to manually deploy the website on your server. Everytime you push to git, a remote server handles the deployment.&lt;/p&gt;

&lt;p&gt;Setting up the post-receive hook is done as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptop$ ssh deployer@example.com
server$ mkdir myrepo.git
server$ cd myrepo.git
server$ git --bare init
server$ cp hooks/post-receive.sample hooks/post-receive
server$ mkdir /var/www/myrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add the following lines to &lt;code&gt;hooks/post-receive&lt;/code&gt; and be sure &lt;code&gt;Jekyll&lt;/code&gt; is installed on the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GIT_REPO=$HOME/myrepo.git
TMP_GIT_CLONE=$HOME/tmp/myrepo
PUBLIC_WWW=/var/www/myrepo
JEKYLL = /path/to/jekyll
git clone $GIT_REPO $TMP_GIT_CLONE
$JEKYLL build -s $TMP_GIT_CLONE -d $PUBLIC_WWW
rm -Rf $TMP_GIT_CLONE
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, run the following command on any users laptop that needs to be able to deploy using this hook:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git remote add deploy deployer@example.com:~/myrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everytime you push, make sure you push it to remote server as well&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case, you wish multiple users to be able to deploy
You need to run the following command on the other laptops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git remote add deploy deployer@example.com:~/myrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ofcourse goes without saying, each user should deploy to remote server using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you are maintaining the repository on github as well, make sure to sync the repositories.
So, your &lt;code&gt;git push&lt;/code&gt; could look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
laptops$ git push origin master
&lt;/code&gt;&lt;/pre&gt;</description>
	<pubDate>Fri, 10 Jan 2014 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: How to “Push It Good” to Git</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/push-it-good-to-git</guid>
	<link>http://sushant-hiray.in/posts/push-it-good-to-git</link>
	<description>&lt;p&gt;A couple of days back I saw a tweet regarding &lt;a href=&quot;http://valeriecoffman.com/git-push-it-good-salt-n-pepa/&quot;&gt;Push it to Good to Git in MAC&lt;/a&gt;. It was interesting so I built up a quick hack to emulate the same on linux.&lt;/p&gt;

&lt;p&gt;I was initially looking to use Sound Cloud API coz well spotify doesn’t work in India yet! Just then yesterday &lt;a href=&quot;https://plus.google.com/u/0/+DilawarSingh/&quot;&gt;Dilawar&lt;/a&gt; wrote an interesting post on &lt;a href=&quot;https://groups.google.com/forum/#!topic/wncc_iitb/UEodzMhLBVE&quot;&gt;configuring Music Player Daemon&lt;/a&gt; on &lt;a href=&quot;https://groups.google.com/forum/#!forum/wncc_iitb&quot;&gt;WnCC Google Group&lt;/a&gt;
So I just wrote a mini bash to emulate the push it to good to git for MAC!&lt;/p&gt;

&lt;h3&gt;What does this do?&lt;/h3&gt;

&lt;p&gt;Everytime you push to your repository via &lt;code&gt;pushit&lt;/code&gt;, it’ll play the &lt;a href=&quot;http://www.youtube.com/watch?v=vCadcBR95oUhttp://www.youtube.com/watch?v=vCadcBR95oU&quot;&gt;Push it By Salt N Pepa&lt;/a&gt; song! Oh ofcourse you can change the song to your own favorite version by tweaking the bash file!&lt;/p&gt;

&lt;h3&gt;Instructions&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt;       Configure MPC and download all the dependencies from gist!
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;       chmod +rx pushit
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;       sudo mv pushit /usr/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Usage&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;pushit {branch-name}&lt;/code&gt; instead of &lt;code&gt;git push origin {branch-name}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Inspired by &lt;a href=&quot;http://valeriecoffman.com/git-push-it-good-salt-n-pepa/&quot;&gt;Push it to Good to Git in MAC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Credits to configure mpc &lt;a href=&quot;https://plus.google.com/u/0/+DilawarSingh/&quot;&gt;Dilawar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=vCadcBR95oUhttp://www.youtube.com/watch?v=vCadcBR95oU&quot;&gt;Push it By Salt N Pepa&lt;/a&gt; Youtube link!&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Code&lt;/h3&gt;

&lt;p&gt;The entire code with dependencies is up on &lt;a href=&quot;https://gist.github.com/sushant-hiray/8065556&quot;&gt;gist&lt;/a&gt;&lt;/p&gt;

&amp;lt;script src=&quot;https://gist.github.com/8065556.js?file=pushit&quot;&amp;gt; &amp;lt;/script&amp;gt;</description>
	<pubDate>Sat, 21 Dec 2013 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: Setting up Ghost on Apache subdomain</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/setting-up-ghost</guid>
	<link>http://sushant-hiray.in/posts/setting-up-ghost</link>
	<description>&lt;p&gt;Ghost runs on top of node.js instead of apache or nginx. If you already have a website running on apache you will need to take a few extra steps in order to allow node.js to run along side apache&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that I’m assuming that your having a single IP and so you’re facing the problem. In case of multiple IP’s node.js and apache can listen on port 80 on different IP’s.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;First in your VPS hosting create a subdomain on your main domain. Something like &lt;code&gt;blog.sushant.me&lt;/code&gt; . Now the task we are set to achieve is simple, &lt;code&gt;sushant.me&lt;/code&gt; will be served by apache on port 80 and &lt;code&gt;blog.sushant.me&lt;/code&gt; will be served by node.js&lt;/p&gt;

&lt;p&gt;Ghost comes by default ready to listen on port 2368 which will work fine. The only thing we have to configure for Ghost is the IP address. Grab your VPS IP address using the command &lt;code&gt;ifconfig&lt;/code&gt;. Copy this IP address and replace all instances of 127.0.0.1 in &lt;code&gt;/path/to/ghost/config.js&lt;/code&gt; with your IP address.&lt;/p&gt;

&lt;p&gt;Next we will start Ghost in the background. I have Ghost installed in &lt;code&gt;/var/www/ghost/&lt;/code&gt; so these commands will start Ghost in a &lt;code&gt;screen&lt;/code&gt; session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /var/www/ghost/
screen npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;screen&lt;/code&gt; will start it in the background so you can continue working. Once Ghost is started you can exit the screen session with &lt;code&gt;control+d&lt;/code&gt; and then &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now if we access either blog.example.com or example.com, apache services our request. To change this we will create a new file say &lt;code&gt;blog&lt;/code&gt; in &lt;code&gt;/etc/apace2/sites-available/&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;VirtualHost 198.199.70.240:80&amp;gt;
     ServerName blog.sushant.me
     ProxyPreserveHost on
     ProxyPass / http://198.199.70.240:2368/
     DocumentRoot /var/www/ghost/
     &amp;lt;Directory /&amp;gt;
        Options FollowSymLinks
        AllowOverride None
        Order deny,allow
        deny from all
     &amp;lt;/Directory&amp;gt;
 &amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For “ServerName” put in your subdomain url instead of &lt;code&gt;blog.sushant.me&lt;/code&gt; and also replace the IP address on the top line with your IP address.&lt;/p&gt;

&lt;p&gt;Once you are done with this make sure you run the follwing commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;sudo a2ensite example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;sudo a2enmod proxy_http
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;sudo service apache2 restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After this access &lt;code&gt;blog.sushant.me&lt;/code&gt; and voila you’re done.&lt;/p&gt;

&lt;p&gt;Note: this tutorial assumes that you have properly installed ghost as stated on the shost documentation.&lt;/p&gt;</description>
	<pubDate>Sat, 14 Dec 2013 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: The end of a journey</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=760</guid>
	<link>http://manojbits.wordpress.com/2013/09/27/the-end-of-a-journey/</link>
	<description>&lt;p&gt;It all began sometime during this February/March when I had nothing to do (I almost have nothing to do always) and people around me were doing cool stuff, when I thought of giving GSoC a shot. (I had initially thought GSoC was for people who knew ten programming languages before they were born, or who started hacking on stuff since fifth grade, so I was a bit pessimistic and I had barely written my first Hello World program in C, a year back). And after some amount of bug fixing and a large amount of luck, my organistion decided to go with my proposal &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:)&quot;&gt;:)&lt;/span&gt; (For a slightly TLDR version of this, you can read &lt;a href=&quot;http://manojbits.wordpress.com/2013/04/22/sympy-and-my-tryst-with-open-source/&quot; rel=&quot;nofollow&quot;&gt;http://manojbits.wordpress.com/2013/04/22/sympy-and-my-tryst-with-open-source/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I was assigned one of the most awesome mentors in SymPy, Sean Vig, who is a physics grad student (I think) in University of Illinois -Urbana-Champaign. I’m not saying this just because he passed me, but also because all that I had to do if I got stuck somewhere, was to ping him and he would reply almost immediately with some solution to my query (except when he went biking of course).&lt;/p&gt;
&lt;p&gt;I don’t want to bore anyone with my project details, because I myself am slightly bored already, but a one line description would be that it involved strengthening the already existing ODE module, with a number of hints and power series solving methods. I want to mention two moments, which had me quite fascinated, the first one was the recursive design of the ODE module, which makes it really easy to to add additional hints, and the second one was when I hacked a bit of core SymPy, it would take me days to think of such an object oriented design.&lt;/p&gt;
&lt;p&gt;GSoC taught me much more than coding. Patience maybe. There were times when I got stuck really bad, and someone in the mailing list, usually came up with some answer. (Especially Raoul who saved the day with his research papers). And also humility from the core developers, who are seasoned programmers, and who treat people like me at par with them while reviewing Pull Requests or otherwise. Perseverance and dedication too. You can have things like a bad breakup or something, but you still got to put in the required hours of work.&lt;/p&gt;
&lt;p&gt;SymPy has a broad range of stuff that can be worked on, that I believe SymPy can be called as a separate language in itself. Also congrats to my fellow GSoCers, Sachin, Prasoon, Chetna, Katja, Mary Clark ,Thilina and Saurabh who managed to string up a project on his own. It was a pleasure working with you all. As I said, SymPy is so broad, that I have a very vague idea about what the other projects are, sometimes I never knew what was going on in my project itself, but yeah whatever. If you are looking for a well documented Python project to contribute to, SymPy should be at the top of your list.&lt;/p&gt;
&lt;p&gt;On a personal note, the way ahead is as undecided as before. I obviously will contribute to SymPy in my free time. Frankly speaking, I don’t consider myself as a programmer still, and I know plenty of people in my own college who are much better than me and I still have to improve on my skillset. Lets see where life takes me from here.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/760/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/760/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=760&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 27 Sep 2013 21:11:18 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: GSOC Wrapup</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=172</guid>
	<link>http://meclark256.wordpress.com/2013/09/24/gsoc-wrapup/</link>
	<description>&lt;p&gt;Well, GSOC 2013 is officially over.  I thought I’d write up a summary of what I accomplished over the last 14 weeks.&lt;/p&gt;
&lt;p&gt;-Classes for types A, B, C, D, E, F, and G which stores information about their Dynkin diagrams, Cartan matrices, roots, and size&lt;/p&gt;
&lt;p&gt;-A class, RootSystem, which allows users to work with the root system of a given Lie algebra.  It can generate all the roots of a Lie algebra, and has methods for adding roots together.&lt;/p&gt;
&lt;p&gt;-A class WeylGroup, which is about the Weyl group of a given Lie algebra.  It gives the size and name of a given Weyl group as well as the matrix form of an element, and an element’s order.&lt;/p&gt;
&lt;p&gt;-Methods for displaying the Cartan matrix and Dynkin diagram of a Lie algebra.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;That’s pretty much it.  I had a great time working with SymPy this summer!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/172/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/172/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=172&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 24 Sep 2013 19:00:55 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 13: Plans for the future</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=209</guid>
	<link>http://musingsofafriend.wordpress.com/2013/09/16/gsoc-week-13-plans-for-the-future/</link>
	<description>&lt;p&gt;Today is the official soft pencils down date for GSoC 2013.  Any my work isn’t finished. This post, with the benefit of hindsight, seems eventful.&lt;/p&gt;
&lt;p&gt;So, as I was quite worried about for the last two weeks, the exam week finally passed me by – and I can’t say I was unscathed. Nevertheless, I think I’ll get through without too bad a grade in most of my courses. Needless to say, I was unable to do any work this past week – exams had me occupied.&lt;/p&gt;
&lt;p&gt;Getting to the topic of this post. Well, I saw that I wouldn’t be able to get the work done in time – at least not before 16th. So, I wrote to my mentors and the organisation admin hoping to continue working after the GSoC period on my project. Thankfully, my mentors and the org admins were accommodating. So, here’s a post mentioning what is the final goal of this project is and how things should look like once finished. Of course, this isn’t a complete post – I’ll do follow-up posts on this one in the coming weeks.&lt;/p&gt;
&lt;p&gt;Right now, we are at a point where we have a foundation for the module – we can represent vectors in any orthogonal coordinate system (currently there are only three – although it is completely extensible with addition of classes for different coordinate systems) and do fundamental operations on it. In addition to the fundamental manipulations on the vectors, we can also do some other operations – dot and cross products, namely, for the time being. I should also point out the generic nature of our design – everything is generalized. That is how things stand now. In the near future – that is in the next one or two weeks, I believe that we should have implemented the differentiation methods on vectors – the simple differentiation, the grad (of scalars), the div and the curl. That much I am quite certain will work. The way ahead of that, I’m afraid, isn’t without its perils (okay, I exaggerate; :s/perils/challenges/g). The next thing to do is to implement the integration methods. I have already created a class for holding integrals – it is a base class. Then, there are two classes for two different type of integrals – one for line integrals and one for line integrals and one for surface integrals. I have also written methods that would reduce the integral to an internal in one variable for each of these classes. But, it remains to see if these will work.&lt;/p&gt;
&lt;p&gt;Once I have these integration classes working, then, I should like to proceed with other integration classes – for example integrating vector over simple limits. I am fairly confident that &lt;em&gt;if&lt;/em&gt; I can get the previous two classes working, then this class will work, too. The next order of business will be to implement numerical evaluation of these integration methods, which, given that I can reduce the integral to a normal scalar integration, shouldn’t be too difficult.&lt;/p&gt;
&lt;p&gt;That would finish quite a few of the methods required for vector calculus. Then, I would like to work on the part that deal with reference frames. Currently, we have only three coordinate systems – I’d like to add two more; parabolic and elliptical coordinate systems seem like a good way to begin. Also, I’d like to implement more rotation methods – like adding quaternions, for example. Also, Stefan and I had a chat where her mentioned that I should remove the string based interface for these orientation method (and elsewhere as well). So, to take it one step further, I’d like to do some general refactoring – keeping coordinate systems in their own file, keeping vector classes separate, keeping integration classes separate and perhaps more separation based on helper methods.&lt;/p&gt;
&lt;p&gt;One of the things that is quite important to do of course is profiling the code and optimizing the bottlenecks. Currently, I have identified several places in the code which can be easily optimized. But, I’m not beginning the optimization just yet; I should like to have a sense of completion before I begin optimizing the code. Currently, there is the &lt;em&gt;express&lt;/em&gt; method that appears slow and that is because of the dcm  method – which is slow. So, I have a fairly good idea of how to go ahead with the optimizations – it is just that I will do it towards the end.&lt;/p&gt;
&lt;p&gt;Now that those things are out-of-the-way, let me mention some of my current work. I am currently working to get the position of the coordinate systems work with the express method. That would work nicely except for the fact that I am having some trouble dealing with constant position dependent vectors. I am thinking of creating a new class for it. Anyway, that was a long post. There will be of course follow-up posts on my plans but for the time being, I would like to continue working.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/209/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/209/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=209&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 16 Sep 2013 17:38:49 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: 12th and 13th week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=352</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/09/15/12th-and-13th-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;Here is my status update on the factorization algorithm.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I was able to close all remaining gaps in the code and the algorithm is working smoothly now. In particular, I implemented the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;-adic lifting I was taking about last time, which should improve performance for polynomials with large coefficients. First, I had to make the Gaussian elimination code in matrices.py a little more flexible. For example, now one can pass a custom elimination function in addition to a custom iszero function. To solve linear systems over the ring &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5El%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_{p^l}&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_{p^l}&quot; /&gt;, I then call it in a slightly strange way. Namely, I make calculations modulo &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p%5El&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p^l&quot; class=&quot;latex&quot; title=&quot;p^l&quot; /&gt;, but being zero is checked modulo &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;. The only drawback of this approach is that rows that contain only multiples of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; will be treated as zero rows, thus the set of solutions might get bigger. However, in my use case this should happen only rarely and if it does, it will be detected later in the code.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In the last week of my GSoC I will keep fine tuning the code and issue a PR for the factorization algorithm.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, here are some comparisons with &lt;code&gt;%timeit&lt;/code&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First, a small example. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\alpha&quot; class=&quot;latex&quot; title=&quot;\alpha&quot; /&gt; be a root of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t%5E4+%2B+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;t^4 + 1&quot; class=&quot;latex&quot; title=&quot;t^4 + 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+x%5E4+%2B+y%5E4+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx%2C+y%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f = x^4 + y^4 \in \mathbb Q(\alpha)[x, y]&quot; class=&quot;latex&quot; title=&quot;f = x^4 + y^4 \in \mathbb Q(\alpha)[x, y]&quot; /&gt;. The current SymPy factorization algorithm needs 166 ms on my laptop, whereas the new one only takes 69.1 ms.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Now a bigger one. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\alpha&quot; class=&quot;latex&quot; title=&quot;\alpha&quot; /&gt; be a root of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t%5E4+%2B+t%5E3+%2B+t%5E2+%2B+t+%2B+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;t^4 + t^3 + t^2 + t + 1&quot; class=&quot;latex&quot; title=&quot;t^4 + t^3 + t^2 + t + 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%3D+f_1+%5Ccdot+f_2+%5Ccdot+f_3+%5Ccdot+f_4+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx%2C+y%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f = f_1 \cdot f_2 \cdot f_3 \cdot f_4 \in \mathbb Q(\alpha)[x, y, z]&quot; class=&quot;latex&quot; title=&quot;f = f_1 \cdot f_2 \cdot f_3 \cdot f_4 \in \mathbb Q(\alpha)[x, y, z]&quot; /&gt;, where&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_1+%3D+x%5E2+-+2+%5Calpha+x+-+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+z%5E2+%2B+%5Calpha%5E2+y+%2B+12+%5Calpha%5E3+&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle f_1 = x^2 - 2 \alpha x - ( \alpha^3 + \alpha^2 + \alpha + 1) z^2 + \alpha^2 y + 12 \alpha^3 &quot; class=&quot;latex&quot; title=&quot;\displaystyle f_1 = x^2 - 2 \alpha x - ( \alpha^3 + \alpha^2 + \alpha + 1) z^2 + \alpha^2 y + 12 \alpha^3 &quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_2+%3D+x%5E2+-+2+%5Calpha%5E2+x+%2B+%5Calpha%5E3+z%5E2+-+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+y+%2B+12+%5Calpha+&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle f_2 = x^2 - 2 \alpha^2 x + \alpha^3 z^2 - ( \alpha^3 + \alpha^2 + \alpha + 1) y + 12 \alpha &quot; class=&quot;latex&quot; title=&quot;\displaystyle f_2 = x^2 - 2 \alpha^2 x + \alpha^3 z^2 - ( \alpha^3 + \alpha^2 + \alpha + 1) y + 12 \alpha &quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_3+%3D+x%5E2+-+2+%5Calpha%5E3+x+%2B+%5Calpha%5E2+z%5E2+%2B+%5Calpha+y+-+12+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle f_3 = x^2 - 2 \alpha^3 x + \alpha^2 z^2 + \alpha y - 12 ( \alpha^3 + \alpha^2 + \alpha + 1) &quot; class=&quot;latex&quot; title=&quot;\displaystyle f_3 = x^2 - 2 \alpha^3 x + \alpha^2 z^2 + \alpha y - 12 ( \alpha^3 + \alpha^2 + \alpha + 1) &quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+f_4+%3D+x%5E2+%2B+2+%28+%5Calpha%5E3+%2B+%5Calpha%5E2+%2B+%5Calpha+%2B+1%29+x+%2B+%5Calpha+z%5E2+%2B+%5Calpha%5E3+y+%2B+12+%5Calpha%5E2+.+&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle f_4 = x^2 + 2 ( \alpha^3 + \alpha^2 + \alpha + 1) x + \alpha z^2 + \alpha^3 y + 12 \alpha^2 . &quot; class=&quot;latex&quot; title=&quot;\displaystyle f_4 = x^2 + 2 ( \alpha^3 + \alpha^2 + \alpha + 1) x + \alpha z^2 + \alpha^3 y + 12 \alpha^2 . &quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The current SymPy factorization algorithm needs 215 seconds, whereas the new one only takes 60.3 seconds. More than three times faster! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/352/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/352/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=352&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 15 Sep 2013 17:56:51 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Status of the Diophantine module</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=264</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/09/14/status-of-the-diophantine-module-2/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;In my project proposal for a Diophantine equation for SymPy, I mentioned the following five deliverables.&lt;/p&gt;
&lt;p&gt;1. Linear Diophantine equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_1x_1+%2B+a_2x_2+%2B+.+.+.+%2B+a_nx_n+%3D+b&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a_1x_1 + a_2x_2 + . . . + a_nx_n = b&quot; class=&quot;latex&quot; title=&quot;a_1x_1 + a_2x_2 + . . . + a_nx_n = b&quot; /&gt;:&lt;br /&gt;
I implemented solutions for linear diophantine equations, you can access this functionality through `diop_linear()`.&lt;/p&gt;
&lt;p&gt;2. Simplified Pell equation, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+-+Dy%5E2+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 - Dy^2 = 1&quot; class=&quot;latex&quot; title=&quot;x^2 - Dy^2 = 1&quot; /&gt;:&lt;br /&gt;
Not only I implemented solutions for simplified Pell equation, I completely solved the general binary quadratic equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;3. The equation, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+axy+%2B+y%5E2+%3D+z%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + axy + y^2 = z^2&quot; class=&quot;latex&quot; title=&quot;x^2 + axy + y^2 = z^2&quot; /&gt;:&lt;br /&gt;
I implemented solutions for more general ternary quadratic equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%2B+dxy+%2B+eyz+%2B+fxz+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 + cz^2 + dxy + eyz + fxz = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 + cz^2 + dxy + eyz + fxz = 0&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;4. Extended Pythagorean equation,  &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_1%5E2+%2B+x_2%5E2+%2B+.+.+.+%2B+x_n%5E2+%3D+x_%7Bn%2B1%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_1^2 + x_2^2 + . . . + x_n^2 = x_{n+1}^2&quot; class=&quot;latex&quot; title=&quot;x_1^2 + x_2^2 + . . . + x_n^2 = x_{n+1}^2&quot; /&gt;:&lt;br /&gt;
I implemented solutions for slightly more general equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_1%5E2x_1%5E2+%2B+a_2%5E2x_2%5E2+%2B+.+.+.+%2B+a_n%5E2x_n%5E2+%3D+a_%7Bn%2B1%7D%5E2x_%7Bn%2B1%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a_1^2x_1^2 + a_2^2x_2^2 + . . . + a_n^2x_n^2 = a_{n+1}^2x_{n+1}^2&quot; class=&quot;latex&quot; title=&quot;a_1^2x_1^2 + a_2^2x_2^2 + . . . + a_n^2x_n^2 = a_{n+1}^2x_{n+1}^2&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;5. General sum of squares, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_1%5E2+%2B+x_2%5E2+%2B+.+.+.+%2B+x_k%5E2+%3D+n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_1^2 + x_2^2 + . . . + x_k^2 = n&quot; class=&quot;latex&quot; title=&quot;x_1^2 + x_2^2 + . . . + x_k^2 = n&quot; /&gt;:&lt;br /&gt;
This is a computationally hard problem and method I implemented finds only one solution. It’s quick and work for large &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; but not complete. I also implemented a brute force version which finds all the solutions but it doesn’t work for larger &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/264/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/264/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=264&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 14 Sep 2013 17:22:56 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Change of plans for general sum of squares</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=261</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/09/14/change-of-plans-for-general-sum-of-squares/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;In my last post I described about Euler’s four square identity to for solving general sum of squares equation. My idea was to factorize the number, represent each prime as a sum of four squares, then use Euler’s four square identity to construct the sum of four squares representation for the original Number. But I found it slower than the algorithm I found &lt;a href=&quot;http://www.schorn.ch/howto.html&quot;&gt;here&lt;/a&gt;. So I adapted the latter. The idea is to reduce the problem of representing a number as a sum of four squares to representing a number as a sum of three squares.&lt;/p&gt;
&lt;h4&gt;Algorithm for representing a positive number n as a sum of three squares&lt;/h4&gt;
&lt;p&gt;1. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+%3D%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n == 0&quot; class=&quot;latex&quot; title=&quot;n == 0&quot; /&gt;, then return &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%280%2C+0%2C+0%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(0, 0, 0)&quot; class=&quot;latex&quot; title=&quot;(0, 0, 0)&quot; /&gt;&lt;br /&gt;
2. Write &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4%5Evn_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4^vn_{1}&quot; class=&quot;latex&quot; title=&quot;4^vn_{1}&quot; /&gt;&lt;br /&gt;
3. if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%5Cin+S&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} \in S&quot; class=&quot;latex&quot; title=&quot;n_{1} \in S&quot; /&gt; then return the hard coded representation of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1}&quot; class=&quot;latex&quot; title=&quot;n_{1}&quot; /&gt;. Here, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S+%3D+%7B2%2C+3%2C+10%2C+34%2C+58%2C+85%2C+130%2C+214%2C+226%2C+370%2C+526%2C+706%2C+730%2C+1414%2C+1906%2C+2986%2C+9634%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;S = {2, 3, 10, 34, 58, 85, 130, 214, 226, 370, 526, 706, 730, 1414, 1906, 2986, 9634}&quot; class=&quot;latex&quot; title=&quot;S = {2, 3, 10, 34, 58, 85, 130, 214, 226, 370, 526, 706, 730, 1414, 1906, 2986, 9634}&quot; /&gt;. Representations for these numbers can be found &lt;a href=&quot;http://www.schorn.ch/howto.html&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
4. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1}&quot; class=&quot;latex&quot; title=&quot;n_{1}&quot; /&gt; is a perfect square then return &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%282%5Ev%5Csqrt%7Bn_%7B1%7D%7D%2C+0%2C+0%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(2^v\sqrt{n_{1}}, 0, 0)&quot; class=&quot;latex&quot; title=&quot;(2^v\sqrt{n_{1}}, 0, 0)&quot; /&gt;&lt;br /&gt;
5. if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+3+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 3 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 3 (mod 8)&quot; /&gt;, find an odd number &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; class=&quot;latex&quot; title=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bn_%7B1%7D+-+i%5E2%7D%7B2%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{n_{1} - i^2}{2}&quot; class=&quot;latex&quot; title=&quot;\frac{n_{1} - i^2}{2}&quot; /&gt; is a prime. Set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+i&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = i&quot; class=&quot;latex&quot; title=&quot;x = i&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%3D+%5Cfrac%7Bn_%7B1%7D+-+i%5E2%7D%7B2%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;p = \frac{n_{1} - i^2}{2}&quot; class=&quot;latex&quot; title=&quot;p = \frac{n_{1} - i^2}{2}&quot; /&gt;. Find two numbers &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%2C+z&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y, z&quot; class=&quot;latex&quot; title=&quot;y, z&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%5E2+%2B+z%5E2+%3D+p&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y^2 + z^2 = p&quot; class=&quot;latex&quot; title=&quot;y^2 + z^2 = p&quot; /&gt;. (You can use Cornacchia’s  algorithm for this. Return &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%282%5Evx%2C+2%5Ev%28y+%2B+z%29%2C+2%5Ev%7Cy+-+z%7C%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(2^vx, 2^v(y + z), 2^v|y - z|)&quot; class=&quot;latex&quot; title=&quot;(2^vx, 2^v(y + z), 2^v|y - z|)&quot; /&gt;.&lt;br /&gt;
6. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+2+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 2 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 2 (mod 8)&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+6+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 6 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 6 (mod 8)&quot; /&gt; then find an odd number &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; class=&quot;latex&quot; title=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+-+i%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} - i^2&quot; class=&quot;latex&quot; title=&quot;n_{1} - i^2&quot; /&gt; is a prime. Else find an even number &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i%2C+i+%3C+%5Csqrt%7Bn_%7B1%7D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; class=&quot;latex&quot; title=&quot;i, i &amp;lt; \sqrt{n_{1}}&quot; /&gt; with the above requirement. Set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+i&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = i&quot; class=&quot;latex&quot; title=&quot;x = i&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p+%3D+n_%7B1%7D+-+i%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;p = n_{1} - i^2&quot; class=&quot;latex&quot; title=&quot;p = n_{1} - i^2&quot; /&gt;. Find &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%2C+z&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y, z&quot; class=&quot;latex&quot; title=&quot;y, z&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%5E2+%2B+z%5E2+%3D+p&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y^2 + z^2 = p&quot; class=&quot;latex&quot; title=&quot;y^2 + z^2 = p&quot; /&gt; . Return &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%282%5Evx%2C+2%5Evy%2C+2%5Evz%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(2^vx, 2^vy, 2^vz)&quot; class=&quot;latex&quot; title=&quot;(2^vx, 2^vy, 2^vz)&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Note that above algorithm can not be used if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+8k+%2B+7&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 8k + 7&quot; class=&quot;latex&quot; title=&quot;n_{1} = 8k + 7&quot; /&gt; for some integer &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%5Cin+Z&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k \in Z&quot; class=&quot;latex&quot; title=&quot;k \in Z&quot; /&gt;. That is if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; is in the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4%5Ev%288k+%2B+7%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4^v(8k + 7)&quot; class=&quot;latex&quot; title=&quot;4^v(8k + 7)&quot; /&gt;.&lt;/p&gt;
&lt;h4&gt;Algorithm for representing a positive number n as a sum of four squares&lt;/h4&gt;
&lt;p&gt;Every non-negative integer &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; can be represented as a sum of four squares.&lt;/p&gt;
&lt;p&gt;1. Write &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4%5Evn_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4^vn_{1}&quot; class=&quot;latex&quot; title=&quot;4^vn_{1}&quot; /&gt;.&lt;br /&gt;
2. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+7+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 7 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 7 (mod 8)&quot; /&gt; then set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d+%3D+2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;d = 2&quot; class=&quot;latex&quot; title=&quot;d = 2&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+n_%7B1%7D+-+4&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = n_{1} - 4&quot; class=&quot;latex&quot; title=&quot;n_{1} = n_{1} - 4&quot; /&gt;. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+6+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 6 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 6 (mod 8)&quot; /&gt; or &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+2+%28mod+8%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = 2 (mod 8)&quot; class=&quot;latex&quot; title=&quot;n_{1} = 2 (mod 8)&quot; /&gt; then set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;d = 1&quot; class=&quot;latex&quot; title=&quot;d = 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D+%3D+n_%7B1%7D+-+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1} = n_{1} - 1&quot; class=&quot;latex&quot; title=&quot;n_{1} = n_{1} - 1&quot; /&gt;. Otherwise set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=d+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;d = 0&quot; class=&quot;latex&quot; title=&quot;d = 0&quot; /&gt;.&lt;br /&gt;
3. Use the algorithm described earlier to represent &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n_{1}&quot; class=&quot;latex&quot; title=&quot;n_{1}&quot; /&gt; as a sum of three squares. Say, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%2B+z%5E2+%3D+n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + y^2 + z^2 = n&quot; class=&quot;latex&quot; title=&quot;x^2 + y^2 + z^2 = n&quot; /&gt;.&lt;br /&gt;
4. Return &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%282%5Evd%2C+2%5Evx%2C+2%5Evy%2C+2%5Evz%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(2^vd, 2^vx, 2^vy, 2^vz)&quot; class=&quot;latex&quot; title=&quot;(2^vd, 2^vx, 2^vy, 2^vz)&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;By using these two algorithms one can represent any non-negative integer as a sum of four squares. In the general sum of squares equation, where a given integer &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; needs to be represented as a sum of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; squares, we can divide &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt;  variables into segments of four and divide &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; into that same number of segments and represent each segment by four squares using the algorithm given above.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/261/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/261/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=261&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 14 Sep 2013 16:50:36 +0000</pubDate>
</item>
<item>
	<title>Cristóvão Sousa: Faster Common Subexpression Elimination (CSE) in SymPy</title>
	<guid isPermaLink="false">http://csousahome.wordpress.com/?p=120</guid>
	<link>http://csousahome.wordpress.com/2013/09/09/faster-common-subexpression-elimination-cse-in-sympy/</link>
	<description>&lt;p&gt;Over the past months I’ve been studying  how to improve performance of the Common Subexpression Elimination (CSE) routine of SymPy, so it can be used in &lt;a href=&quot;http://cdsousa.github.com/sympybotics/&quot; title=&quot;SymPyBotics&quot;&gt;SymPyBotics&lt;/a&gt; with acceptable computing times.&lt;/p&gt;
&lt;p&gt;This resulted in pull request &lt;a href=&quot;https://github.com/sympy/sympy/pull/2355&quot; title=&quot;PR #2355&quot;&gt;#2355&lt;/a&gt;, which had already been merged into SymPy master branch (for release in version 0.7.4).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://nbviewer.ipython.org/5986996&quot; title=&quot;CSE Implementations Comparison Example&quot;&gt;Here&lt;/a&gt; is an example comparing both new and previous CSE implementations when applied to the expressions of the “generic torque”, computed with SymPyBotics, for the first 3 joints of a 7-DOF WAM Arm robot.&lt;/p&gt;
&lt;p&gt;Cache has influence in times, but we can notice an average performance improvement of about 25x when external (pre and post) optimizations are used. When no external optimizations are used, the performance has an average improvement of &lt;span style=&quot;text-decoration: underline;&quot;&gt;90x&lt;/span&gt;. With the new `order=’none’` option, the improvement rises to &lt;span style=&quot;text-decoration: underline;&quot;&gt;500x&lt;/span&gt; for the non cached case, and to &lt;span style=&quot;text-decoration: underline;&quot;&gt;1000x&lt;/span&gt; for the cached one!&lt;/p&gt;
&lt;p&gt;For this particular case, the CSE is &lt;span style=&quot;text-decoration: underline;&quot;&gt;less&lt;/span&gt; optimized when external optimizations are done (output has more operations) than when they are not.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;How it works now&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;First, two remarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expressions are not trees but rather directed acyclic graphs (DAG).  E.g., in the expression sin(x+1)+cos(x+1), the arguments of sin and cos are the same, x+1; indeed the node x+1 has two parents;&lt;/li&gt;
&lt;li&gt;SymPy (sub)expressions are nicely and fastly hashable, thus great to use in sets and dictionaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The CSE core/raw algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The core of the new CSE parses the expression adding each seen subexpression to the &lt;em&gt;seen&lt;/em&gt; set. If a subexpression was already seen, it is added to the &lt;em&gt;repeated&lt;/em&gt; set and its children nodes are not parsed (there is no need to).&lt;/li&gt;
&lt;li&gt;After knowing the repeated subexpressions (nodes with more than one parent), the core CSE rebuilds the whole tree using intermediate variables in place of repeated subexpressions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The internal optimizations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before the core CSE algorithm is performed the expression is parsed to find optimization opportunities; when an optimizable subexpression is found it is added to the &lt;em&gt;opt_subs&lt;/em&gt; substitutions dictionary.&lt;/li&gt;
&lt;li&gt;When the core algorithm parses a subexpressions it looks for it in the &lt;em&gt;opt_subs&lt;/em&gt; dictionary, if it is there is parses the substitution instead.&lt;/li&gt;
&lt;li&gt;The currently implemented internal optimizations are the following:
&lt;ul&gt;
&lt;li&gt;negative signs are striped out from multiplications, e.g., -2*x is substituted by -1*(2*x)&lt;/li&gt;
&lt;li&gt;negative signs are striped out from exponents, e.g., x**(-2*y) is substituted by (x**(2*y))**-1&lt;/li&gt;
&lt;li&gt;common Add and Mul terms are grouped, e.g., in cos(a+b+c)+sin(a+b+d)),  a+b+c is substituted by (a+b)+c and a+b+d is substituted by (a+b)+d, so that a+b is a single and repeated node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Future work&lt;/h4&gt;
&lt;p&gt;In my opinion three things could further improve CSE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;add support for MatrixExprs;&lt;/li&gt;
&lt;li&gt;use replacement Symbols which could somehow clone the assumptions of the subexpressions they represent;&lt;/li&gt;
&lt;li&gt;implement an optimal Mul/Add term matching system (maybe using Matthew Rocklin’s &lt;a href=&quot;https://github.com/logpy/logpy&quot; title=&quot;Logic Programming in Python&quot;&gt;logpy&lt;/a&gt; package).&lt;/li&gt;
&lt;/ol&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;http://csousahome.wordpress.com/category/phd/&quot;&gt;PhD&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/category/sympybotics-2/&quot;&gt;SymPyBotics&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/category/work/&quot;&gt;Work&lt;/a&gt; Tagged: &lt;a href=&quot;http://csousahome.wordpress.com/tag/python/&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/subexpression-elimination/&quot;&gt;subexpression elimination&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/sympy/&quot;&gt;sympy&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/csousahome.wordpress.com/120/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/csousahome.wordpress.com/120/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;amp;blog=24437078&amp;amp;post=120&amp;amp;subd=csousahome&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 09 Sep 2013 11:59:37 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 12: Things are finally looking up!</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=206</guid>
	<link>http://musingsofafriend.wordpress.com/2013/09/09/gsoc-week-12-things-are-finally-looking-up/</link>
	<description>&lt;p&gt;This week, finally, I was able to get the express method working completely. I knew that once the express method starts working, everything else will fall into place. And, as you might deduce from the title of the post, things finally seem to be working.&lt;/p&gt;
&lt;p&gt;First, a bit of background. I am developing a framework that can be used to represent vectors in Python and operate on them. There is this method called &lt;em&gt;express&lt;/em&gt; that one can call on a vector and have it expressed in another coordinate systems. This vector calculus module was designed to with a very general approach – the vectors can be constructed from a variety of coordinate systems – the coordinate systems can be positioned, oriented and can also be in any orthogonal coordinate system (that are currently supported; new coordinate systems can be easily added). Also, and I won’t go into the details, the classes that represent vectors need to inherit from a SymPy class, &lt;em&gt;Basic&lt;/em&gt;. This essentially means there’s a tree like structure of components so that objects can be decomposed into their forming components. All of this means decreased complexity for the user, but, increased complexity of the code. Anyway, as I was saying, the express method can be used to convert the vectors into different coordinate systems so that they can be operated on. I simply cannot overemphasize the importance of this one method. It took me a 3 weeks to finally be able to write this method and another 2 to test and make it work but finally, it got done this week.&lt;/p&gt;
&lt;p&gt;Now that this method is working, I moved on the orientation methods. The majority of the work in this area was just the proper initialization of matrices when coordinate system objects are created. That was dealt with and as a result, the DCM methods (the methods that give the direction cosine matrices between two coordinate systems) are finally working as well.&lt;/p&gt;
&lt;p&gt;Then, I wanted the operations on vectors to be working. Already, the basic operations of addition, subtraction, multiplication, division, expansion, factorization etc. were working. The next step was to get the dot and cross methods to work. That is what I did next. So, the dot and cross methods are now working.&lt;/p&gt;
&lt;p&gt;Well, that was a bit of a long post. Anyway, I’d like to say that I did all this even though the next week (9-Sep-13 to 13-Sep-13) is the exam week. I didn’t study much in the last month. Usually, I would study really hard one week before the exams and hope for the best. But, I couldn’t follow my general practice this time. God knows what’ll happen this coming week! Anyway, just so that I don’t completely screw up my grades, I’ll try to study as much as humanly possible during the exam week and so, I won’t work at all during this week (till the weekend). That will give me from 13th evening to 16th night to get as much done as possible before the soft deadline. Then, there’d be about a week more before the hard deadline. Hopefully, I’ll be able to get most of the promised goals done by then including the documentation. Fingers crossed!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/206/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/206/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=206&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 09 Sep 2013 11:51:59 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: A late update</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=167</guid>
	<link>http://meclark256.wordpress.com/2013/09/09/a-late-update/</link>
	<description>&lt;p&gt;This week has been work on the WeylGroup module, unsurprisingly.  I’ve implemented element_order and matrix_form for types A, B, C, D and G2, and matrix_form for E and F.  I think that implementing order for E and F is going to be much more difficult, because it’s not easy at all to realise those two groups as permutations.  I’m going to look for the next day or two to see if I can find a clever way of doing it, but otherwise I’ll just utilise matrix_form to get the matrix representation of the element of the WeylGroup and then just brute force it to find the order of the element by just finding what power of the matrix gives the identity.  &lt;/p&gt;
&lt;p&gt;I also changed bits in in the root_system PR to utilise Rational(x, y) instead of using floating point numbers. &lt;/p&gt;
&lt;p&gt;I’m hoping to have most major coding done by the 13th, so I can spend the last 10 days of GSOC writing up more detailed docstrings and fixing other minor errors.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Sorry for the short update, but I’m not feeling particularly verbose today.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/167/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/167/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=167&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 09 Sep 2013 01:26:04 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Towards the end</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=746</guid>
	<link>http://manojbits.wordpress.com/2013/09/06/towards-the-end/</link>
	<description>&lt;p&gt;Hi, I finally managed to do some amount of work for the past ten days, and I’m happy to day that all that I had wanted to do this GSoC has been pushed in and I’m waiting for comments on my final Pull Request. These were the changes that I had made.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Making stuff similar to the series function &lt;/strong&gt;&lt;br /&gt;
While playing around with the code, I found out that, doing &lt;strong&gt;series(eq, n=terms)&lt;/strong&gt;, gives the series expansion upto &lt;img src=&quot;http://s0.wp.com/latex.php?latex=O%28x%5En%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;O(x^n)&quot; class=&quot;latex&quot; title=&quot;O(x^n)&quot; /&gt; rather than the nth term. This makes the code look a lot neater too. Also the default power is 6, so I changes that too. For instance, take this sample SymPy session&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;from sympy import dsolve, series
from sympy.abc import x, y
f = Function(&quot;f&quot;)
pprint(series(exp(x))
         2    3    4     5        
        x    x    x     x     ⎛ 6⎞
1 + x + ── + ── + ── + ─── + O⎝x ⎠
        2    6    24   120       
eq = f(x).diff(x) - x*f(x)
pprint(dsolve(eq, hint='1st_power_series'))
                2       4        
            C₀⋅x    C₀⋅x     ⎛ 6⎞
f(x) = C₀ + ───── + ───── + O⎝x ⎠
              2       8       
&lt;/pre&gt;
&lt;p&gt;I also added support for power series solutions of homogeneous differential equations at ordinary points, and regular singular points. A homogeneous second differential equation is of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%29%5Cfrac%7Bd%5E2f%7D%7Bdx%5E2%7D+%2B+Q%28x%29%5Cfrac%7Bdf%7D%7Bdx%7D+%2B+R%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)&quot; class=&quot;latex&quot; title=&quot;P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)&quot; /&gt;. (Any DE mentioned below is homogeneous second order unless otherwise specified, because typing DE is easier than typing a homogeneous second order differential equation).&lt;br /&gt;
a] A point &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x0&quot; class=&quot;latex&quot; title=&quot;x0&quot; /&gt; is said to be ordinary, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{Q(x)}{P(x)}&quot; class=&quot;latex&quot; title=&quot;\frac{Q(x)}{P(x)}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BR%28x%29%7D%7BP%28x%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{R(x)}{P(x)}&quot; class=&quot;latex&quot; title=&quot;\frac{R(x)}{P(x)}&quot; /&gt; are analytic at the point.&lt;br /&gt;
b] It is said to be regular singular, if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x+-+x0%29%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;(x - x0)\frac{Q(x)}{P(x)}&quot; class=&quot;latex&quot; title=&quot;(x - x0)\frac{Q(x)}{P(x)}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x+-+x0%29%5E2%5Cfrac%7BQ%28x%29%7D%7BP%28x%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;(x - x0)^2\frac{Q(x)}{P(x)}&quot; class=&quot;latex&quot; title=&quot;(x - x0)^2\frac{Q(x)}{P(x)}&quot; /&gt; are analytic. For simplicity in the series expansions, assumptions are made such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x)&quot; class=&quot;latex&quot; title=&quot;P(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;Q(x)&quot; class=&quot;latex&quot; title=&quot;Q(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;R(x)&quot; class=&quot;latex&quot; title=&quot;R(x)&quot; /&gt; are polynomials. Okay, now for a bit more detail&lt;/p&gt;
&lt;p&gt;1. &lt;strong&gt;Ordinary points&lt;/strong&gt; : A DE has a power series solution, at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x0&quot; class=&quot;latex&quot; title=&quot;x0&quot; /&gt;. This can be found by substituting &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+a_%7Bn%7Dx%5En&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sum_{k=0}^n a_{n}x^n&quot; class=&quot;latex&quot; title=&quot;\sum_{k=0}^n a_{n}x^n&quot; /&gt; in the DE, and equating the nth coefficient in order to obtain a recurrence relation. However this is not as trivial as it sounds and was one of the more tougher things I had to do.&lt;/p&gt;
&lt;p&gt;Take the general case of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%29%5Cfrac%7Bd%5E2f%7D%7Bdx%5E2%7D+%2B+Q%28x%29%5Cfrac%7Bdf%7D%7Bdx%7D+%2B+R%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)&quot; class=&quot;latex&quot; title=&quot;P(x)\frac{d^2f}{dx^2} + Q(x)\frac{df}{dx} + R(x)&quot; /&gt;. Substituting &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bn+%3D+0%7D%5E%5Cinfty+a_%7Bn%7Dx%5En&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sum_{n = 0}^\infty a_{n}x^n&quot; class=&quot;latex&quot; title=&quot;\sum_{n = 0}^\infty a_{n}x^n&quot; /&gt; in the DE. (One has to expand each of the terms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x)&quot; class=&quot;latex&quot; title=&quot;P(x)&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=Q%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;Q(x)&quot; class=&quot;latex&quot; title=&quot;Q(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=R%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;R(x)&quot; class=&quot;latex&quot; title=&quot;R(x)&quot; /&gt;), make transformations such that for each term the power of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt;. The catch here is that the starting point of the summation also changes, so the necessary terms shouls be stripped off such that the starting point is same. This is better explained in one of these tutorials, &lt;a href=&quot;http://tutorial.math.lamar.edu/Classes/DE/SeriesSolutions.aspx&quot; rel=&quot;nofollow&quot;&gt;http://tutorial.math.lamar.edu/Classes/DE/SeriesSolutions.aspx&lt;/a&gt; , so you could read that after you’ve read the rest of the blogpost.&lt;/p&gt;
&lt;p&gt;A small sample session.&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;from sympy import *
from sympy.abc import x, y
eq = (1 + x**2)*(f(x).diff(x, 2)) + 2*x*(f(x).diff(x)) -2*f(x)
pprint(eq)
                          2               
    d          ⎛ 2    ⎞  d                
2⋅x⋅──(f(x)) + ⎝x  + 1⎠⋅───(f(x)) - 2⋅f(x)
    dx                    2               
                        dx
pprint(dsolve(eq))
                 ⎛   4         ⎞        
                 ⎜  x     2    ⎟    ⎛ 6⎞
f(x) = C₁⋅x + C₀⋅⎜- ── + x  + 1⎟ + O⎝x ⎠
                 ⎝  3          ⎠
eq = f(x).diff(x, 2) + x*(f(x).diff(x)) + f(x)
pprint(eq)
                      2      
  d                  d       
x⋅──(f(x)) + f(x) + ───(f(x))
  dx                  2      
                    dx
pprint(dsolve(eq))
            ⎛   2    ⎞      ⎛ 4    2    ⎞        
            ⎜  x     ⎟      ⎜x    x     ⎟    ⎛ 6⎞
f(x) = C₁⋅x⋅⎜- ── + 1⎟ + C₀⋅⎜── - ── + 1⎟ + O⎝x ⎠
            ⎝  3     ⎠      ⎝8    2     ⎠  
&lt;/pre&gt;
&lt;p&gt;2. &lt;strong&gt;Regular singular points&lt;/strong&gt; :&lt;br /&gt;
    1.  Try expressing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x+-+x0%29P%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;(x - x0)P(x)&quot; class=&quot;latex&quot; title=&quot;(x - x0)P(x)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28%28x+-+x0%29%5E%7B2%7D%29Q%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;((x - x0)^{2})Q(x)&quot; class=&quot;latex&quot; title=&quot;((x - x0)^{2})Q(x)&quot; /&gt; as power series&lt;br /&gt;
        solutions about &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x0&quot; class=&quot;latex&quot; title=&quot;x0&quot; /&gt;. Find &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;p0&quot; class=&quot;latex&quot; title=&quot;p0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=q0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;q0&quot; class=&quot;latex&quot; title=&quot;q0&quot; /&gt; which are the constants of the&lt;br /&gt;
        power series expansions.&lt;br /&gt;
    2.  Solve the indicial equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28m%29+%3D+m%28m+-+1%29+%2B+m%2Ap0+%2B+q0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f(m) = m(m - 1) + m*p0 + q0&quot; class=&quot;latex&quot; title=&quot;f(m) = m(m - 1) + m*p0 + q0&quot; /&gt;, to obtain the&lt;br /&gt;
        roots &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m1&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m1&quot; class=&quot;latex&quot; title=&quot;m1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m2&quot; class=&quot;latex&quot; title=&quot;m2&quot; /&gt; of the indicial equation.&lt;br /&gt;
    3.  If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m1+-+m2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m1 - m2&quot; class=&quot;latex&quot; title=&quot;m1 - m2&quot; /&gt; is a non integer there exists two series solutions. If&lt;br /&gt;
        &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m1+%3D+m2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m1 = m2&quot; class=&quot;latex&quot; title=&quot;m1 = m2&quot; /&gt;, there exists only one solution. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m1+-+m2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m1 - m2&quot; class=&quot;latex&quot; title=&quot;m1 - m2&quot; /&gt; is an integer,&lt;br /&gt;
        then the existence of one solution is confirmed. The other solution may&lt;br /&gt;
        or may not exist.&lt;/p&gt;
&lt;p&gt;    The power series solution is of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E%7Bm%7D%5Csum_%7Bn%3D0%7D%5E%5Cinfty+a_%7Bn%7Dx%5En&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x^{m}\sum_{n=0}^\infty a_{n}x^n&quot; class=&quot;latex&quot; title=&quot;x^{m}\sum_{n=0}^\infty a_{n}x^n&quot; /&gt;. The&lt;br /&gt;
    coefficients are determined by the following recurrence relation.&lt;br /&gt;
    &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_%7Bn%7D+%3D+-%5Cfrac%7B%5Csum_%7Bk%3D0%7D%5E%7Bn-1%7D+q_%7Bn-k%7D+%2B+%28m+%2B+k%29p_%7Bn-k%7D%7D%7Bf%28m+%2B+n%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;a_{n} = -\frac{\sum_{k=0}^{n-1} q_{n-k} + (m + k)p_{n-k}}{f(m + n)}&quot; class=&quot;latex&quot; title=&quot;a_{n} = -\frac{\sum_{k=0}^{n-1} q_{n-k} + (m + k)p_{n-k}}{f(m + n)}&quot; /&gt;. For the case&lt;br /&gt;
    in which &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m1+-+m2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m1 - m2&quot; class=&quot;latex&quot; title=&quot;m1 - m2&quot; /&gt; is an integer, it can be seen from the recurrence relation&lt;br /&gt;
    that for the lower root &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;m&quot; class=&quot;latex&quot; title=&quot;m&quot; /&gt;, when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; equals the difference of both the&lt;br /&gt;
    roots, the denominator becomes zero. So if the numerator is not equal to zero,&lt;br /&gt;
    a second series solution exists. (Oh and by the way I just copy – pasted the docstring for the&lt;br /&gt;
    last part, because I was lazy to write the whole thing again :P)&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;    eq = x**2*(f(x).diff(x, 2)) - 3*x*(f(x).diff(x)) + (4*x + 4)*f(x)  # One solution
    pprint(dsolve(eq))
                ⎛      3                 ⎞        
              2 ⎜  16⋅x       2          ⎟    ⎛ 6⎞
   f(x) = C₀⋅x ⋅⎜- ───── + 4⋅x  - 4⋅x + 1⎟ + O⎝x ⎠
                ⎝    9                   ⎠  
    eq = x**2*(f(x).diff(x, 2)) - x**2*(f(x).diff(x)) + (
        x**2 - 2)*f(x)  # Two solutions
             ⎛    6      5    4    2        ⎞                                    
             ⎜   x    3⋅x    x    x    x    ⎟                                    
          C₁⋅⎜- ─── - ──── - ── + ── + ─ + 1⎟         ⎛   3    2        ⎞        
             ⎝  720    80    8    2    2    ⎠       2 ⎜  x    x    x    ⎟    ⎛ 6⎞
   f(x) = ─────────────────────────────────── + C₀⋅x ⋅⎜- ── + ── + ─ + 1⎟ + O⎝x ⎠
                           x                          ⎝  60   20   2    ⎠  
    &lt;/pre&gt;
&lt;p&gt;Anyway, that sums up my official GSoC work. Now that I just need to address comments made on my PR which is at, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2395&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2395&lt;/a&gt; . And I just realised that I have my exams coming up the next week, and its been a while since I touched my books (and gone to classes), and thats not a good thing. So have to catch up there. Seems like my whole life is about catching up.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/746/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/746/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=746&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 06 Sep 2013 17:13:24 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Testing of cds and is_deriv branches</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=410</guid>
	<link>http://geekiology.wordpress.com/2013/09/03/testing-of-cds-and-is_deriv-branches/</link>
	<description>&lt;p&gt;Currently we have merged cds and is_deriv branch to test and make the code working. We have been working to find the possible test errors to debug the every-bit of any condition added to the code&lt;/p&gt;
&lt;p&gt;This week I have worked on the issue of solving infinite loop in cds.py&lt;br /&gt;
Cases Like:&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;cds_cancel_primitive(Poly(sqrt(-1), t2), Poly(x, t2), Poly(2*x, t2),
 Poly(2*x/(x**2 + 1) - x*t2), Poly(2*x/(x**2 + 1) + 3*x*t2), DE, 5)
&lt;/pre&gt;
&lt;p&gt;I am happy to announce that after having a brainstorming week, trying to look for every parameter missing, I did finally resolve the error of the infinite loop.&lt;br /&gt;
This would mean that integrate_hypertangent would start working for complicated tests etc and hence we would be able to get answers for rich_integrate for some of the hypertangent cases now.&lt;/p&gt;
&lt;p&gt;Ouptut for the test&lt;/p&gt;
&lt;p&gt;Above case translates as follows:&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D2%2Ax%2F%28x%5E2+%2B+1%29%5C%5C+2%2Ax%2F%28x%5E2+%2B+1%29+%5Cend%7Bpmatrix%7D+%2B+%5Cbegin%7Bpmatrix%7Dx+%26+-2x%5C%5C+2x+%26+x%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7Dt2%5C%5C+t2%5Cend%7Bpmatrix%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\begin{pmatrix}2*x/(x^2 + 1)\\ 2*x/(x^2 + 1) \end{pmatrix} + \begin{pmatrix}x &amp;amp; -2x\\ 2x &amp;amp; x\end{pmatrix}\begin{pmatrix}t2\\ t2\end{pmatrix}&quot; class=&quot;latex&quot; title=&quot;\begin{pmatrix}2*x/(x^2 + 1)\\ 2*x/(x^2 + 1) \end{pmatrix} + \begin{pmatrix}x &amp;amp; -2x\\ 2x &amp;amp; x\end{pmatrix}\begin{pmatrix}t2\\ t2\end{pmatrix}&quot; /&gt; = &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbegin%7Bpmatrix%7D2%2Ax%2F%28x%5E2+%2B+1%29+-+x%2At2%5C%5C+2%2Ax%2F%28x%5E2+%2B+1%29+%2B+3x+t2+%5Cend%7Bpmatrix%7D&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\begin{pmatrix}2*x/(x^2 + 1) - x*t2\\ 2*x/(x^2 + 1) + 3x t2 \end{pmatrix}&quot; class=&quot;latex&quot; title=&quot;\begin{pmatrix}2*x/(x^2 + 1) - x*t2\\ 2*x/(x^2 + 1) + 3x t2 \end{pmatrix}&quot; /&gt;&lt;br /&gt;
where t2 = &lt;img src=&quot;http://s0.wp.com/latex.php?latex=log%28x%5E2+%2B+1%29&amp;amp;bg=ffffff&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;log(x^2 + 1)&quot; class=&quot;latex&quot; title=&quot;log(x^2 + 1)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-180938.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-180938.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-09-03 18:09:38&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-417&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previous week&lt;br /&gt;
I and Aaron solved the major difficulties incurred in the is_deriv part of the code.&lt;br /&gt;
&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-175154.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/09/screenshot-from-2013-09-03-175154.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-09-03 17:51:54&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-413&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
Cases like above where giving incorrect answers before, have a solution now.&lt;/p&gt;
&lt;p&gt;The only issues which is till unresolved from the precious week is the infinite loops for polynomial_reduce kt . While I see similar issues in the original code for case polynomial_reduce(Poly((-64*t**6 + 64*t**4 + 64*t**2 – 64, t)/(2048*t**4 – 4096*t**2 + 2048)), DE) I am not able to find the stopping-condition for the same in the book.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/410/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/410/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=410&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Sep 2013 13:10:40 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: 10th and 11th week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=281</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/09/01/10th-and-11th-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;Wow, time seems to be flying right now, it’s already been two weeks again! In order to keep things clear, I described the factorization algorithm I am currently working on in &lt;a href=&quot;http://sophiessympyblog.wordpress.com/2013/09/01/factoring-polynomials-over-algebraic-number-fields/&quot; title=&quot;Factoring polynomials over algebraic number fields&quot;&gt;another post&lt;/a&gt;. So here I want to talk about my progress and problems in the last two weeks.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Let’s start with good news. My first two PRs have been merged! So now the modular GCD algorithms I implemented for polynomials over the integers and algebraic number fields are part of SymPy. &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Progress on the factorization algorithm has not been as fast as I would have liked. I spent a lot of time with Hensel lifting, since the description of the algorithm is not very explicit in this part. I ended up adapting the already implemented Hensel lifting code to my use case. The last (big) part missing is the sparse &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;-adic lifting algorithm. The problem here is that I would have to solve a cumbersome system of linear equations over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5Em%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_{p^m}&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_{p^m}&quot; /&gt;. One possible way to work around this is to choose a large prime so that no lifting is necessary, which is the way it is currently done in the integer polynomial case. But of course, a lifting would be more efficient.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I already made successful factorizations (by using big enough primes) for certain polynomials, and next week I hope to get it to work for arbitrary ones.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/281/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/281/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=281&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 01 Sep 2013 14:52:35 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Factoring polynomials over algebraic number fields</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=283</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/09/01/factoring-polynomials-over-algebraic-number-fields/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;In this post I will describe the factorization algorithm given in [1] for polynomials over simple algebraic extensions of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q&quot; class=&quot;latex&quot; title=&quot;\mathbb Q&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First, I have to introduce some definitions and notations.&lt;br /&gt;
We define the &lt;em&gt;denominator &lt;/em&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%28f%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathrm{den}(f)&quot; class=&quot;latex&quot; title=&quot;\mathrm{den}(f)&quot; /&gt; of a polynomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f \in \mathbb Q(\alpha)[x_o, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;f \in \mathbb Q(\alpha)[x_o, \ldots, x_n]&quot; /&gt; as the smallest integer, such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%28f%29+f+%5Cin+%5Cmathbb+Z%5Bx_o%2C+%5Cldots%2C+x_n%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathrm{den}(f) f \in \mathbb Z[x_o, \ldots, x_n, z]&quot; class=&quot;latex&quot; title=&quot;\mathrm{den}(f) f \in \mathbb Z[x_o, \ldots, x_n, z]&quot; /&gt;. Most of the time we will work with the &lt;em&gt;monic associate &lt;/em&gt;&lt;em&gt; &lt;/em&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f+%5Cin+%5Cmathbb+Z%5Bx_o%2C+%5Cldots%2C+x_n%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f \in \mathbb Z[x_o, \ldots, x_n, z]&quot; class=&quot;latex&quot; title=&quot;\tilde f \in \mathbb Z[x_o, \ldots, x_n, z]&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt;. It is defined as the associate of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathrm%7Bden%7D%5Cleft%28%5Cfrac+1+%7B%5Cmathrm%7Blc%7D%28f%29%7D+f+%5Cright%29+%5Cfrac+1+%7B%5Cmathrm%7Blc%7D%28f%29%7D+f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathrm{den}\left(\frac 1 {\mathrm{lc}(f)} f \right) \frac 1 {\mathrm{lc}(f)} f&quot; class=&quot;latex&quot; title=&quot;\mathrm{den}\left(\frac 1 {\mathrm{lc}(f)} f \right) \frac 1 {\mathrm{lc}(f)} f&quot; /&gt; which is primitive in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_o%2C+%5Cldots%2C+x_n%2C+z&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_o, \ldots, x_n, z&quot; class=&quot;latex&quot; title=&quot;x_o, \ldots, x_n, z&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;We will assume that the input polynomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; is square-free and primitive in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_o&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_o&quot; class=&quot;latex&quot; title=&quot;x_o&quot; /&gt;, because if this is not the case, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt; can be easily factored into square-free parts and its content in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_o&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_o&quot; class=&quot;latex&quot; title=&quot;x_o&quot; /&gt;. This can be done using only GCD computations.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;First, we compute &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f&quot; class=&quot;latex&quot; title=&quot;\tilde f&quot; /&gt; and recursively call our algorithm to factor its leading coefficient in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_0&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_0&quot; class=&quot;latex&quot; title=&quot;x_0&quot; /&gt; and obtain&lt;/p&gt;
&lt;p align=&quot;center&quot; style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cmathrm%7Blc%7D_%7Bx_o%7D+%28%5Ctilde+f%29+%3D+%5Cgamma+%5Ccdot+%5Cprod_%7Bi+%3D+1%7D%5Er+l_i%5E%7Be_i%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle \mathrm{lc}_{x_o} (\tilde f) = \gamma \cdot \prod_{i = 1}^r l_i^{e_i}&quot; class=&quot;latex&quot; title=&quot;\displaystyle \mathrm{lc}_{x_o} (\tilde f) = \gamma \cdot \prod_{i = 1}^r l_i^{e_i}&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(\alpha)[x_1, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(\alpha)[x_1, \ldots, x_n]&quot; /&gt;. If we get to the univariate case, we use the existing factoring algorithm by Trager.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Now we enter the main loop. We choose a new evaluation point &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbf+a+%3D+%28a_1%2C+%5Cldots%2C+a_n%29+%5Cin+%5Cmathbb+Z%5E%7Bn%7D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbf a = (a_1, \ldots, a_n) \in \mathbb Z^{n}&quot; class=&quot;latex&quot; title=&quot;\mathbf a = (a_1, \ldots, a_n) \in \mathbb Z^{n}&quot; /&gt;, which has to satisfy certain conditions, e. g. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f(x_o, \mathbf a)&quot; class=&quot;latex&quot; title=&quot;\tilde f(x_o, \mathbf a)&quot; /&gt; has to stay square-free.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Again we use Trager’s algorithm, this time to factor &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f(x_o, \mathbf a)&quot; class=&quot;latex&quot; title=&quot;\tilde f(x_o, \mathbf a)&quot; /&gt; in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29%5Bx_o%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(\alpha)[x_o]&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(\alpha)[x_o]&quot; /&gt; and obtain&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29+%3D+%5COmega%27+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+u_j%2C&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle \tilde f(x_o, \mathbf a) = \Omega' \cdot \prod_{j = 1}^s u_j,&quot; class=&quot;latex&quot; title=&quot;\displaystyle \tilde f(x_o, \mathbf a) = \Omega' \cdot \prod_{j = 1}^s u_j,&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5COmega%27+%3D+%5Cmathrm%7Blc%7D_%7Bx_o%7D%28f%28x_o%2C+%5Cmathbf+a%29%29+%5Cin+%5Cmathbb+Q%28%5Calpha%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\Omega' = \mathrm{lc}_{x_o}(f(x_o, \mathbf a)) \in \mathbb Q(\alpha)&quot; class=&quot;latex&quot; title=&quot;\Omega' = \mathrm{lc}_{x_o}(f(x_o, \mathbf a)) \in \mathbb Q(\alpha)&quot; /&gt;. Note that if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f(x_o, \mathbf a)&quot; class=&quot;latex&quot; title=&quot;\tilde f(x_o, \mathbf a)&quot; /&gt; is irreducible, we know that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f&quot; class=&quot;latex&quot; title=&quot;\tilde f&quot; /&gt; is irreducible and hence &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;f&quot; class=&quot;latex&quot; title=&quot;f&quot; /&gt;, so in this case we are done.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In order to use Hensel lifting, we need to compute the true leading coefficients &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbar+l_1%2C+%5Cldots%2C+%5Cbar+l_r+%5Cin+%5Cmathbb+Q%28%5Calpha%29%5Bx_1%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\bar l_1, \ldots, \bar l_r \in \mathbb Q(\alpha)[x_1, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;\bar l_1, \ldots, \bar l_r \in \mathbb Q(\alpha)[x_1, \ldots, x_n]&quot; /&gt; of the irreducible factors of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f&quot; class=&quot;latex&quot; title=&quot;\tilde f&quot; /&gt;. This can be done with simple GCD computations.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Now we choose a new prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;, which also has to satisfy certain requirements, e.g. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctilde+f%28x_o%2C+%5Cmathbf+a%29+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\tilde f(x_o, \mathbf a) \; \mathrm{mod} \, p&quot; class=&quot;latex&quot; title=&quot;\tilde f(x_o, \mathbf a) \; \mathrm{mod} \, p&quot; /&gt; is still square-free and the minimal polynomial &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmu%28z%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mu(z)&quot; class=&quot;latex&quot; title=&quot;\mu(z)&quot; /&gt; of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Calpha&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\alpha&quot; class=&quot;latex&quot; title=&quot;\alpha&quot; /&gt; is still irreducible modulo &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Since evaluating at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_1+%3D+a_1%2C+%5Cldots%2C+x_n+%3D+a_n&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_1 = a_1, \ldots, x_n = a_n&quot; class=&quot;latex&quot; title=&quot;x_1 = a_1, \ldots, x_n = a_n&quot; /&gt; is the same as factoring modulo the ideal &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathcal+I&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathcal I&quot; class=&quot;latex&quot; title=&quot;\mathcal I&quot; /&gt; generated by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_1+-+a_1%2C+%5Cldots%2C+x_n+-+a_n&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;x_1 - a_1, \ldots, x_n - a_n&quot; class=&quot;latex&quot; title=&quot;x_1 - a_1, \ldots, x_n - a_n&quot; /&gt;, we can use Hensel lifting to lift the univariate factors &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_1%2C+%5Cldots%2C+u_s&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;u_1, \ldots, u_s&quot; class=&quot;latex&quot; title=&quot;u_1, \ldots, u_s&quot; /&gt; and obtain&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cldots%2C+x_n%29+%3D+l+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+%5Cbar+f_j%28x_o%2C+%5Cldots%2C+x_n%29+%5C%3B+%5Cmathrm%7Bmod%7D+%5C%2C+%5Cleft%5Clangle+p%2C+%5Cmathcal+I%5ET%5Cright%5Crangle%2C&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s \bar f_j(x_o, \ldots, x_n) \; \mathrm{mod} \, \left\langle p, \mathcal I^T\right\rangle,&quot; class=&quot;latex&quot; title=&quot;\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s \bar f_j(x_o, \ldots, x_n) \; \mathrm{mod} \, \left\langle p, \mathcal I^T\right\rangle,&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=T+%5Cin+%5Cmathbb+N&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;T \in \mathbb N&quot; class=&quot;latex&quot; title=&quot;T \in \mathbb N&quot; /&gt; is chosen large enough.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;That means, we have the correct factorization modulo the prime &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;. In order to get the desired factorization, we use a procedure that is also based on Hensel’s Lemma, called &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt;-adic lifting. We lift the factors &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cbar+f_j&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\bar f_j&quot; class=&quot;latex&quot; title=&quot;\bar f_j&quot; /&gt; from &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_p%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_p(\alpha)[x_o, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_p(\alpha)[x_o, \ldots, x_n]&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z_%7Bp%5Em%7D%28%5Calpha%29%5Bx_o%2C+%5Cldots%2C+x_n%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z_{p^m}(\alpha)[x_o, \ldots, x_n]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z_{p^m}(\alpha)[x_o, \ldots, x_n]&quot; /&gt;, where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;m&quot; class=&quot;latex&quot; title=&quot;m&quot; /&gt; is chosen big enough, such that&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Ctilde+f%28x_o%2C+%5Cldots%2C+x_n%29+%3D+l+%5Ccdot+%5Cprod_%7Bj+%3D+1%7D%5Es+f_j%28x_o%2C+%5Cldots%2C+x_n%29+&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s f_j(x_o, \ldots, x_n) &quot; class=&quot;latex&quot; title=&quot;\displaystyle \tilde f(x_o, \ldots, x_n) = l \cdot \prod_{j = 1}^s f_j(x_o, \ldots, x_n) &quot; /&gt;&lt;/p&gt;
&lt;p&gt;also holds over &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Q%28%5Calpha%29&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Q(\alpha)&quot; class=&quot;latex&quot; title=&quot;\mathbb Q(\alpha)&quot; /&gt; and we are done.&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/283/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/283/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=283&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 01 Sep 2013 13:21:54 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Status of the Diophantine Module</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=237</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/08/31/status-of-the-diophantine-module/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;I am really pleased to say that my work (proposed) with Diophantine equation is coming to an end. I have implemented all the deliverables in my project report. When the current &lt;a href=&quot;https://github.com/sympy/sympy/pull/2303&quot;&gt;PR&lt;/a&gt; gets merged into the master, I can start pushing the rest of my work. I also hope to improve the documentation during the weekend and get them in quickly. Ondrej is currently reviewing the PR. I invite all of you to go through the work and give your feedback. I am really thankful to Aaron, Pernici, Stephen and Julien for the support given so far. First of all let me give you a rough idea about the work currently not in Github.&lt;/p&gt;
&lt;h4&gt;General Pythagorean equation&lt;/h4&gt;
&lt;p&gt;A general Pythagorean equation is an equation of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B1%7D%5E2+%2B+x_%7B2%7D%5E2+%2B+.+.+.+%2B+x_%7Bk%7D%5E2+%3D+x_%7Bk%2B1%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{1}^2 + x_{2}^2 + . . . + x_{k}^2 = x_{k+1}^2&quot; class=&quot;latex&quot; title=&quot;x_{1}^2 + x_{2}^2 + . . . + x_{k}^2 = x_{k+1}^2&quot; /&gt;. The solutions for the equation can be given by using &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; parameters like below,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B1%7D+%3D+m_%7B1%7D%5E2+%2B+m_%7B2%7D%5E2+%2B+.+.+.+%2B+m_%7Bk-1%7D%5E2+-+m_%7Bk%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 - m_{k}^2&quot; class=&quot;latex&quot; title=&quot;x_{1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 - m_{k}^2&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7B2%7D+%3D+2m_%7B1%7Dm_%7Bk%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{2} = 2m_{1}m_{k}&quot; class=&quot;latex&quot; title=&quot;x_{2} = 2m_{1}m_{k}&quot; /&gt;&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bk%7D+%3D+2m_%7Bk-1%7Dm_%7Bk%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{k} = 2m_{k-1}m_{k}&quot; class=&quot;latex&quot; title=&quot;x_{k} = 2m_{k-1}m_{k}&quot; /&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bk+%2B1%7D+%3D+m_%7B1%7D%5E2+%2B+m_%7B2%7D%5E2+%2B+.+.+.+%2B+m_%7Bk-1%7D%5E2+%2B+m_%7Bk%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{k +1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 + m_{k}^2&quot; class=&quot;latex&quot; title=&quot;x_{k +1} = m_{1}^2 + m_{2}^2 + . . . + m_{k-1}^2 + m_{k}^2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I implemented solutions for slightly more  general equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a_%7B1%7D%5E2x_%7B1%7D%5E2+%2B+a_%7B2%7D%5E2x_%7B2%7D%5E2+%2B+.+.+.+%2B+a_%7Bk%7D%5E2x_%7Bk%7D%5E2+%3D+a_%7Bk%2B1%7D%5E2x_%7Bk%2B1%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 + . . . + a_{k}^2x_{k}^2 = a_{k+1}^2x_{k+1}^2&quot; class=&quot;latex&quot; title=&quot;a_{1}^2x_{1}^2 + a_{2}^2x_{2}^2 + . . . + a_{k}^2x_{k}^2 = a_{k+1}^2x_{k+1}^2&quot; /&gt;. Solutions for this equation can be constructed from the solutions of the former equation, multiplying each solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{i}&quot; class=&quot;latex&quot; title=&quot;x_{i}&quot; /&gt; of it by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Blcm%28a_%7B1%7D%2C+a_%7B2%7D%2C+.+.+.+a_%7Bn%7D%29%7D%7Ba_%7Bi%7D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\frac{lcm(a_{1}, a_{2}, . . . a_{n})}{a_{i}}&quot; class=&quot;latex&quot; title=&quot;\frac{lcm(a_{1}, a_{2}, . . . a_{n})}{a_{i}}&quot; /&gt;.&lt;/p&gt;
&lt;h4&gt;General sum of n squares&lt;/h4&gt;
&lt;p&gt;I also implemented solutions for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x_%7Bi%7D%5E2+%2B+x_%7B2%7D%5E2+%2B+.+.+.+%2B+x_%7Bn%7D%5E2+%3D+k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x_{i}^2 + x_{2}^2 + . . . + x_{n}^2 = k&quot; class=&quot;latex&quot; title=&quot;x_{i}^2 + x_{2}^2 + . . . + x_{n}^2 = k&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; is an integer. It is obvious that equation is solvable only when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%5Cgeq+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k \geq 0&quot; class=&quot;latex&quot; title=&quot;k \geq 0&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Lagrange’s four square theorem states&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B1%5D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\textsuperscript{[1]}&quot; class=&quot;latex&quot; title=&quot;\textsuperscript{[1]}&quot; /&gt; that every non-negative number can be expressed as a sum of four squares. It is also known that every integer not in the the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4%5Ek%288m+%2B+7%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4^k(8m + 7)&quot; class=&quot;latex&quot; title=&quot;4^k(8m + 7)&quot; /&gt; can be expressed as a sum of three squares&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B2%5D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\textsuperscript{[2]}&quot; class=&quot;latex&quot; title=&quot;\textsuperscript{[2]}&quot; /&gt; where &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m%2C+n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m, n&quot; class=&quot;latex&quot; title=&quot;m, n&quot; /&gt; are non-negative integers.  Also any integer which doesn’t contain, in it’s canonical representation, odd powers of a prime of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4m+%2B+3&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4m + 3&quot; class=&quot;latex&quot; title=&quot;4m + 3&quot; /&gt; can be expressed as a sum of two squares&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B3%5D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\textsuperscript{[3]}&quot; class=&quot;latex&quot; title=&quot;\textsuperscript{[3]}&quot; /&gt;. For example, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=N+%3D+2%5E2.5%5E3.11%5E2.3%5E3&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;N = 2^2.5^3.11^2.3^3&quot; class=&quot;latex&quot; title=&quot;N = 2^2.5^3.11^2.3^3&quot; /&gt; can’t be expressed as a sum of two squares since it contains and odd power of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=3&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;3&quot; class=&quot;latex&quot; title=&quot;3&quot; /&gt;, which is a prime of the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=4m%2B3&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;4m+3&quot; class=&quot;latex&quot; title=&quot;4m+3&quot; /&gt;. But we can express &lt;img src=&quot;http://s0.wp.com/latex.php?latex=N+%3D+2%5E2.5%5E3.+11%5E2.3%5E4&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;N = 2^2.5^3. 11^2.3^4&quot; class=&quot;latex&quot; title=&quot;N = 2^2.5^3. 11^2.3^4&quot; /&gt; as a sum of two squares.&lt;/p&gt;
&lt;p&gt;Also, there is an interesting identity, found by Euler, known as Euler’s four square identity which can be stated as,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28a_1%5E2%2Ba_2%5E2%2Ba_3%5E2%2Ba_4%5E2%29%28b_1%5E2%2Bb_2%5E2%2Bb_3%5E2%2Bb_4%5E2%29+%3D+%28a_1+b_1+-+a_2+b_2+-+a_3+b_3+-+a_4+b_4%29%5E2+%2B+%28a_1+b_2+%2B+a_2+b_1+%2B+a_3+b_4+-+a_4+b_3%29%5E2+%2B+%28a_1+b_3+-+a_2+b_4+%2B+a_3+b_1+%2B+a_4+b_2%29%5E2+%2B+%28a_1+b_4+%2B+a_2+b_3+-+a_3+b_2+%2B+a_4+b_1%29%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(a_1^2+a_2^2+a_3^2+a_4^2)(b_1^2+b_2^2+b_3^2+b_4^2) = (a_1 b_1 - a_2 b_2 - a_3 b_3 - a_4 b_4)^2 + (a_1 b_2 + a_2 b_1 + a_3 b_4 - a_4 b_3)^2 + (a_1 b_3 - a_2 b_4 + a_3 b_1 + a_4 b_2)^2 + (a_1 b_4 + a_2 b_3 - a_3 b_2 + a_4 b_1)^2&quot; class=&quot;latex&quot; title=&quot;(a_1^2+a_2^2+a_3^2+a_4^2)(b_1^2+b_2^2+b_3^2+b_4^2) = (a_1 b_1 - a_2 b_2 - a_3 b_3 - a_4 b_4)^2 + (a_1 b_2 + a_2 b_1 + a_3 b_4 - a_4 b_3)^2 + (a_1 b_3 - a_2 b_4 + a_3 b_1 + a_4 b_2)^2 + (a_1 b_4 + a_2 b_3 - a_3 b_2 + a_4 b_1)^2&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;So, if we can represent each prime divisor of a number &lt;img src=&quot;http://s0.wp.com/latex.php?latex=N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;N&quot; class=&quot;latex&quot; title=&quot;N&quot; /&gt; as a sum of four squares, we can then use this identity to construct such a representation for&lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt;. This is the idea behind my implementation of representing number as a sum of four squares. When we know how to do this, we have several approaches for representing a given non-negative integer &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; as a sum of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n&quot; class=&quot;latex&quot; title=&quot;n&quot; /&gt; squares. Most obvious thing to do is, represent &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; as a sum of four squares and set other &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n+-4&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n -4&quot; class=&quot;latex&quot; title=&quot;n -4&quot; /&gt; variables to zero. We can also partition &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;k&quot; class=&quot;latex&quot; title=&quot;k&quot; /&gt; into approximately &lt;img src=&quot;http://s0.wp.com/latex.php?latex=n%2F4&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;n/4&quot; class=&quot;latex&quot; title=&quot;n/4&quot; /&gt; groups and represent each as a sum of four squares and later combine those results. I still haven’t decided on how to do this, I would like to know the ideas of the community.  I used a slightly modified version of  the algorithm found in&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ctextsuperscript%7B%5B5%5D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\textsuperscript{[5]}&quot; class=&quot;latex&quot; title=&quot;\textsuperscript{[5]}&quot; /&gt;.  I’ll describe the algorithm in my next blog post.&lt;/p&gt;
&lt;p&gt;Apart from that, I did a lot of bug fixing and reviewed Pernici’s Pull request. My tests are now 2x faster after using his functions. A huge thank should go to Pernici for doing a great Job with solving quadratic congruences.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;[1] Lagrange’s four square theorem, [online], Available: &lt;a href=&quot;http://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem&lt;/a&gt;&lt;br /&gt;
[2] Integer as a sum of three squares, [online], Available: &lt;a href=&quot;http://www.proofwiki.org/wiki/Integer_as_Sum_of_Three_Squares&quot; rel=&quot;nofollow&quot;&gt;http://www.proofwiki.org/wiki/Integer_as_Sum_of_Three_Squares&lt;/a&gt;&lt;br /&gt;
[3] Sum of Squares, [online], Available: &lt;a href=&quot;http://mathworld.wolfram.com/SumofSquaresFunction.html&quot; rel=&quot;nofollow&quot;&gt;http://mathworld.wolfram.com/SumofSquaresFunction.html&lt;/a&gt;&lt;br /&gt;
[4] Euler’s four square identity, [online], Available: &lt;a href=&quot;http://en.wikipedia.org/wiki/Euler%27s_four-square_identity&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Euler%27s_four-square_identity&lt;/a&gt;&lt;br /&gt;
[5] &lt;a href=&quot;http://www.schorn.ch/howto.html&quot; rel=&quot;nofollow&quot;&gt;http://www.schorn.ch/howto.html&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/237/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/237/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=237&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 31 Aug 2013 13:07:12 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: More thoughts on the Weyl group module</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=137</guid>
	<link>http://meclark256.wordpress.com/2013/08/31/more-thoughts-on-the-weyl-group-module/</link>
	<description>&lt;p&gt;So this week has been a lot more thinking about the Weyl group module.  I feel as though I didn’t accomplish much, but I have spent a fair amount of time researching and thinking.  I should note that I also did some fixes on the RootSystem module (fixing some doctests and whatnot).  &lt;/p&gt;
&lt;p&gt;After conferring with David, I’ve concluded that I want to implement a method that displays the Coxeter diagram corresponding to a Weyl group (i.e. the undirected Dynkin diagram), and that the best way to proceed with the Weyl group module is to implement all the Weyl groups as permutation groups.  This makes sense, because as I noted in my last post, the Weyl group for type A is the symmetric group, and the Weyl group for B&amp;amp;C is the hyperoctahedral groups, which canb e thought of as permutations on the set [-n, ..., -1, 1, ... n].  The Weyl group for type D is is a subgroup of the hyperoctahedral group.  &lt;/p&gt;
&lt;p&gt;This would make things like computing the order of an element of the Weyl group quite easy, as I could take input from the user and then get the permutation associated with it, and then use methods from the Permutation class to do what I want.  Now, the obvious challenge with this is that the Permutation class only allows permutations on positive integers like [0, ... , n].  So this presents problems with the hyperoctahedral group, since it include permutations on negative integers.  I reckon that I do not have the time to rewrite the entire Permutation class to allow it to act on an arbitrary set.  So, I am going to map the set [-n, ...., -1, 1, .... n] to a set of positive integers.  So I’m still thinking about how I want to do that.  &lt;/p&gt;
&lt;p&gt;Furthermore, upon the suggestion of David, I think that I will try to include information about the hyperoctahedral group in the named groups module. &lt;/p&gt;
&lt;p&gt;Lastly I am also trying to find more concrete information about the Weyl group of type D; I know that it is a subgroup of index 2, but I’m not sure what exact permutations and stuff that it corresponds to.  &lt;/p&gt;
&lt;p&gt;So yeah.  This coming week, my plan is to figure out how I want to write the permutations of the hyperoctahedral group as permutations on positive integers, and then to take input from the user in the form of products of simple reflections, and generate the corresponding permutation, at least for types A, B, and C.  &lt;/p&gt;
&lt;p&gt;For example, given A3, the Coxeter diagram is 0—0–0, and the generating reflections are r1, r2, r3, and the Weyl group is S4.   We can think of r1 as the permutation (1,2), r2 as (2,3), and r3 as (3,4).  So if the user gave the input r1r2 that would be the permutation (1,2)(2,3) = (1 3 2).  Oh, I also need to remember that the Permutation class starts with 0 instead of 1, so I need to remember to take that into account.&lt;/p&gt;
&lt;p&gt;This week I will also implement a method that gives the Coxeter diagram of a given Weyl group.  This should be very easy, given the Coxeter diagram is the undirected Dynkin diagram. &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/137/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/137/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=137&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 31 Aug 2013 00:07:10 +0000</pubDate>
</item>
<item>
	<title>Cristóvão Sousa: PyLMI-SDP</title>
	<guid isPermaLink="false">http://csousahome.wordpress.com/?p=116</guid>
	<link>http://csousahome.wordpress.com/2013/08/30/pylmi-sdp/</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://cdsousa.github.io/PyLMI-SDP/&quot; title=&quot;PyLMI-SDP&quot;&gt;PyLMI-SDP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Symbolic linear matrix inequalities (LMI) and semi-definite programming (SDP) tools for Python&lt;/em&gt;&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;http://csousahome.wordpress.com/category/phd/&quot;&gt;PhD&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/category/work/&quot;&gt;Work&lt;/a&gt; Tagged: &lt;a href=&quot;http://csousahome.wordpress.com/tag/git-2/&quot;&gt;git&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/lmi/&quot;&gt;lmi&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/python/&quot;&gt;python&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/sdp/&quot;&gt;sdp&lt;/a&gt;, &lt;a href=&quot;http://csousahome.wordpress.com/tag/sympy/&quot;&gt;sympy&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/csousahome.wordpress.com/116/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/csousahome.wordpress.com/116/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=csousahome.wordpress.com&amp;amp;blog=24437078&amp;amp;post=116&amp;amp;subd=csousahome&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Aug 2013 17:50:09 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 10: On to the testing</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=202</guid>
	<link>http://musingsofafriend.wordpress.com/2013/08/26/gsoc-week-10-on-to-the-testing/</link>
	<description>&lt;p&gt;One of the things that I didn’t like about the way the development of code went was that I really couldn’t test most of the code until a certain amount of code was already written. This problem has raised its head many times. So, when I had finally written the code for integration methods, I was finally able to put the pieces together for testing.&lt;/p&gt;
&lt;p&gt;The tests were performed in the order of increasing complexity of procedures. So, the first thing that was tested was proper initialization of coordinate systems, base scalars, base vectors, VectMuls, and, VectAdds and while the initialization of coordinate systems, base scalars and base vectors could be done smoothly, the VectMul and the VectAdd objects raised errors. While debugging these errors, at first I thought that this might be another cache issues (here’s the first one &lt;a href=&quot;https://github.com/sympy/sympy/pull/1746&quot;&gt;#1746&lt;/a&gt;) but fortunately, the error still showed with SYMPY_USE_CACHE=no. Upon further inspection, the error was due to args attribute of BaseScalar and BaseVector. That was fixed.&lt;/p&gt;
&lt;p&gt;Once initialization problems were cured, then, I moved on to printing. Just setting the _sympystr function corrected that.&lt;/p&gt;
&lt;p&gt;After that, I started initializing complex (as in long and nested) vector expressions. That pointed out some more errors in various helpers and some public methods too. Those were fixed as well – though it did take some time.&lt;/p&gt;
&lt;p&gt;Next, I moved on to the operations on vectors. By now, the basic addition, multiplication operators etc. were working fine. The methods that I tested now were some other methods of low complexity (including helpers). Those included, for example, the express and the factor methods and the is_const_vect function. Problems were corrected as they appeared. Also, initialization of coordinate systems with their origins at any given point in space is also now possible.&lt;/p&gt;
&lt;p&gt;The next piece of the puzzle was the express method. As I have repeatedly mentioned, this method is like the spine of the entire structure. In order for the testing to proceed any further, I need the express method to work flawlessly. So, the next order of business was to fix the express method. That is what I am doing now. Once the express method works, I’ll move on to  the other methods which have the express method as a dependency.&lt;/p&gt;
&lt;p&gt;When the testing is finished, the project won’t in any way be finished. There’s a sprinkling of TODO comments throughout the code. But any work that will be done from there will be much easier.&lt;/p&gt;
&lt;p&gt;On a side note, my mid semester exams are approaching, and fast. I think that I will be able to devote my full attention to the project till 5th September, I speculate. After that, I’ll be lucky to be able to contribute 3-4 hours daily. This shall go on till 13th September, when the exams will end. On a brighter note though, I just noticed that the final date of submission is 23rd September (and not 16th September, as I had been assuming until now). That will give me 10 days after my exams to get everything in order (perhaps also discussions on Github).&lt;/p&gt;
&lt;p&gt;Back to testing!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/202/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/202/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=202&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 26 Aug 2013 12:24:23 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Moving on to power series methods</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=728</guid>
	<link>http://manojbits.wordpress.com/2013/08/26/moving-on-to-power-series-methods/</link>
	<description>&lt;p&gt;Hi, Sorry for the late post this week. I couldn’t do much of work last week, but I did manage to write some code.&lt;/p&gt;
&lt;p&gt;First of all, I managed to get the lie group hint finally in.  The Pull Request can be seen here, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2359&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2359&lt;/a&gt; . Its nice to see the work that you have been doing, for around two months, finally in &lt;span class=&quot;wp-smiley emoji emoji-bigsmile&quot; title=&quot;:D&quot;&gt;:D&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I just started work on the power series methods for first order differential equations. Contrary to what I learnt, which is substituting &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+a_%7Bk%7Dx%5Ek&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sum_{k=0}^n a_{k}x^k&quot; class=&quot;latex&quot; title=&quot;\sum_{k=0}^n a_{k}x^k&quot; /&gt; and finding out a recurrence relation, I found out a much better (straightforward) way to find the power series methods to a given differential equation. Before discussing the algorithm, when does any first order differential equation have a power series solution and what is a power series solution?. &lt;/p&gt;
&lt;p&gt;1. Condition for power series solution: Let us take a general first order ODE &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%2C+y%29+%2B+Q%28x%2C+y%29%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x, y) + Q(x, y)\frac{dy}{dx} = 0&quot; class=&quot;latex&quot; title=&quot;P(x, y) + Q(x, y)\frac{dy}{dx} = 0&quot; /&gt;. It has a power series solution, at a given point when \frac{Q(x, y)}{P(x, y)} is analytic at a given point. Analyticity of an expression at a point is confirmed when, either the expression is infinitely differentiable at a given point, or when the expression has a Power series solution, at a given point. Right now, it is impossible to find out (atleast using SymPy) whether,&lt;br /&gt;
any of the above conditions are true. So for now, checking is just being done to see if &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7BQ%28x%2C+y%29%7D%7BP%28x%2C+y%29%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{Q(x, y)}{P(x, y)}&quot; class=&quot;latex&quot; title=&quot;\frac{Q(x, y)}{P(x, y)}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd+%5Cfrac%7BQ%28x%2C+y%29%7D%7BP%28x%2C+y%29%7D%7D%7Bdx%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{d \frac{Q(x, y)}{P(x, y)}}{dx}&quot; class=&quot;latex&quot; title=&quot;\frac{d \frac{Q(x, y)}{P(x, y)}}{dx}&quot; /&gt; , exist at the given point.&lt;/p&gt;
&lt;p&gt;2.  A power series solution is when you can express the solution in the form of a Taylor series. Let us say the solution to a differential equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=P%28x%2C+y%29+%2B+Q%28x%2C+y%29%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;P(x, y) + Q(x, y)\frac{dy}{dx} = 0&quot; class=&quot;latex&quot; title=&quot;P(x, y) + Q(x, y)\frac{dy}{dx} = 0&quot; /&gt;, is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y+%3D+f%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;y = f(x)&quot; class=&quot;latex&quot; title=&quot;y = f(x)&quot; /&gt;, then a power series solution exists at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x0&quot; class=&quot;latex&quot; title=&quot;x0&quot; /&gt; when, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt;, can be written as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Csum_%7Bk%3D0%7D%5En+%28x+-+x0%29%5Cfrac%7Bf%5E%7Bn%7D%28x0%29%7D%7Bn%21%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\sum_{k=0}^n (x - x0)\frac{f^{n}(x0)}{n!}&quot; class=&quot;latex&quot; title=&quot;\sum_{k=0}^n (x - x0)\frac{f^{n}(x0)}{n!}&quot; /&gt;. As is evident, this can exist only when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=f%28x%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; title=&quot;f(x)&quot; /&gt; is infinitely differentible at &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x0&quot; class=&quot;latex&quot; title=&quot;x0&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The algorithm is as follows, lets say &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = h(x, y)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = h(x, y)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y%28x0%29+%3D+y0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;y(x0) = y0&quot; class=&quot;latex&quot; title=&quot;y(x0) = y0&quot; /&gt;. Then&lt;/p&gt;
&lt;p&gt;1] &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+F1&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = F1&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = F1&quot; /&gt;&lt;br /&gt;
2] &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd%5E2+y%7D%7Bdx+%5E2%7D+%3D+%5Cfrac%7BdF1%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Cpartial+F1%7D%7B%5Cpartial+x%7D+%2B+F1%5Cfrac%7B%5Cpartial+F1%7D%7B%5Cpartial+y%7D+%3D+F2&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{d^2 y}{dx ^2} = \frac{dF1}{dx} = \frac{\partial F1}{\partial x} + F1\frac{\partial F1}{\partial y} = F2&quot; class=&quot;latex&quot; title=&quot;\frac{d^2 y}{dx ^2} = \frac{dF1}{dx} = \frac{\partial F1}{\partial x} + F1\frac{\partial F1}{\partial y} = F2&quot; /&gt;&lt;br /&gt;
3] &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bd%5E2+y%7D%7Bdx+%5E2%7D+%3D+%5Cfrac%7BdF2%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Cpartial+F2%7D%7B%5Cpartial+x%7D+%2B+F1%5Cfrac%7B%5Cpartial+F2%7D%7B%5Cpartial+y%7D+%3D+F3&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{d^2 y}{dx ^2} = \frac{dF2}{dx} = \frac{\partial F2}{\partial x} + F1\frac{\partial F2}{\partial y} = F3&quot; class=&quot;latex&quot; title=&quot;\frac{d^2 y}{dx ^2} = \frac{dF2}{dx} = \frac{\partial F2}{\partial x} + F1\frac{\partial F2}{\partial y} = F3&quot; /&gt;&lt;/p&gt;
&lt;p&gt;and so on. Since we know the expressions, we can also find their value at a particular point.&lt;/p&gt;
&lt;p&gt;A sample session.&lt;/p&gt;
&lt;pre class=&quot;brush: python; title: ; notranslate&quot;&gt;from sympy import *
f = Function(&quot;f&quot;)
eq = f(x).diff(x) - sin(x*f(x))
pprint(dsolve(eq, hint='1st_power_series', ics={f(2):2, 'terms':1}))
f(x) = (x - 2)⋅sin(4) + 2
pprint(dsolve(eq, hint='1st_power_series', ics={f(2):2, 'terms':3}))
                                   2                                     
                            (x - 2) ⋅(2⋅cos(4) + 2⋅sin(4)⋅cos(4))    ⎛ 3⎞
f(x) = 2 + (x - 2)⋅sin(4) + ───────────────────────────────────── + O⎝x ⎠
                                              2
pprint(dsolve(eq))
        4 ⎛    3       ⎞            2        
       x ⋅⎝- C₀  + 3⋅C₀⎠        C₀⋅x     ⎛ 6⎞
f(x) = ───────────────── + C₀ + ───── + O⎝x ⎠
               24                 2

eq = f(x).diff(x) - x*f(x)
pprint(dsolve(eq, hint='1st_power_series'))

                2       4        
            C₀⋅x    C₀⋅x     ⎛ 6⎞
f(x) = C₀ + ───── + ───── + O⎝x ⎠
              2       8     
&lt;/pre&gt;
&lt;p&gt;Thats all for now. Cheers!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/728/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/728/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=728&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 26 Aug 2013 10:54:14 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Weyl Groups</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=113</guid>
	<link>http://meclark256.wordpress.com/2013/08/23/weyl-groups/</link>
	<description>&lt;p&gt;So, for each semisimple Lie group, we have a Weyl group.  It is a subgroup of the isometry group of the root system.  Specifically, it’s the subgroup that is generated by reflections through the hyperplanes orthogonal to the roots.  Therefore, Weyl groups are reflection groups, and so a Weyl group is a finite Coxeter group. &lt;/p&gt;
&lt;p&gt;Now, if we take a Lie algebra’s Dynkin diagram and delete all arrows from it, we have its Coxeter diagram, which encodes information about the reflections which generate the Weyl group, as follows.  The vertices of the Coxeter diagram represent the generating reflections of the Weyl group, s_i.  An edge is drawn between s_i and s_j if the order m(i, j) of s_i*s_j is greater than two.  If there is one edge, the order m(i, j) is 3.  If there are two edges, the order m(i, j) is 4, and if there are three edges, the order m(i, j) is 5.  &lt;/p&gt;
&lt;p&gt;We note that the B series and the C series have the same Coxeter diagram, and hence have the same Weyl group, which is the hyperoctahedral group, which is the group of symmetries of a hypercube.  Considered as a permutation group, it is the signed symmetric group of permutations of the set  { −&lt;i&gt;n&lt;/i&gt;, −&lt;i&gt;n&lt;/i&gt; + 1, …, −1, 1, 2, …, &lt;i&gt;n&lt;/i&gt; } such that &lt;i&gt;π&lt;/i&gt;(&lt;i&gt;i&lt;/i&gt;) = −&lt;i&gt;π&lt;/i&gt;(−&lt;i&gt;i&lt;/i&gt;) for all &lt;i&gt;i&lt;/i&gt;.  The Weyl group of D_n is a subgroup of index two in the hyperoctahedral group.  The Weyl group of A_n is the symmetric group on n variables. &lt;/p&gt;
&lt;p&gt;So, I’m now looking at working on the class WeylGroup.  Obviously it’s easy enough to write out the generating reflections, but I’m not sure how exactly I want to proceed from there.  Perhaps a function where a user can specify a reflection as a product of the generating reflections (e.g. input s1s2s5 or something…) and then have the function output its order?  I’m also thinking about how to I want to represent a given reflection.  I’m leaning towards representing it at the product of the generating reflections.  We’ll see.  I also have included a function which returns the order of a given Weyl group.  So yeah, that’s where I’m at.  This week has been generally slow in terms of concrete output, but I’ve been spending a lot of time reading and researching (as Weyl groups aren’t my specialty) and generally contemplating where I want to go with this class.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/113/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/113/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=113&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 23 Aug 2013 20:00:56 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer (old): Python 3: Single codebase vs. 2to3</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1401</guid>
	<link>http://asmeurersympy.wordpress.com/2013/08/22/python-3-single-codebase-vs-2to3/</link>
	<description>&lt;p&gt;In my &lt;a href=&quot;http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/&quot;&gt;previous post&lt;/a&gt; about switching to Python 3 as my default Python, I praised the use of a single codebase for supporting both Python 2 and Python 3. I even chastised the Python core developers for creating 2to3, writing, “I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the print function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea.”&lt;/p&gt;
&lt;p&gt;Well, this isn’t entirely fair, because I myself used to be one of the biggest advocates of using 2to3 over a single codebase. Take this &lt;a href=&quot;https://github.com/ipython/ipython/issues/2440#issuecomment-9058182&quot;&gt;GitHub comment&lt;/a&gt; from when the IPython guys were considering this issue, where I wrote, “maintaining a common code base is going to be a bit annoying from the developer side.…The main benefit of using 2to3 is that 99% of the time, you can just write your code as you would for Python 2, and when it gets to Python 3, it just works (maybe that percent is a bit smaller if you use strings a lot, but it’s still quite high). To write for Python 2 and 3 at the same time, you have to remember a lot of little rules, which no one will remember (and new contributors will not even know about). And given that IPython’s test coverage is still poor (unless I am mistaken, in which case, please correct me), little mistakes will slip through, and no one will notice until they try the certain behavior in Python 3.”&lt;/p&gt;
&lt;p&gt;So I just want to clarify a few things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I was wrong.&lt;/strong&gt;  When I chastised the Python core developers for making people believe that Python 3 is a different language from Python 2, &lt;em&gt;I too&lt;/em&gt; fell into that trap. It took a month of me working on a codebase that had to be directly Python 3 compatible to see the fallacy of this.  And seeing just how small the SymPy &lt;a href=&quot;https://github.com/sympy/sympy/blob/master/sympy/core/compatibility.py&quot;&gt;compatibility&lt;/a&gt; file is sealed the deal. I now believe that I was completely wrong in saying that maintaining a common codebase is annoying. As I wrote in the previous post, it is no different from supporting 2.4-2.7, for instance (actually, by my memory, supporting 2.4-2.7 was much worse than supporting 2.6-3.3, because &lt;em&gt;so&lt;/em&gt; many language features were introduced in Python 2.5)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you have to support 2.5 or earlier and Python 3, then 2to3 might actually be better.&lt;/strong&gt; The reason is simple: Python 2.6 was the first version of Python to “know” about Python 3. So, for instance, &lt;code&gt;from __future__ import print_function&lt;/code&gt; was introduced in Python 2.6. This means that to support a single codebase for 2.5-3.x you have to write &lt;code&gt;print('\n')&lt;/code&gt; to print an empty line and to print something without a newline at the end, you have to use &lt;code&gt;sys.stdout.write&lt;/code&gt;. Also, &lt;code&gt;except Exception as e&lt;/code&gt;, using the &lt;code&gt;as&lt;/code&gt; keyword, which is the only syntax allowed in Python 3, was introduced in Python 2.6, so if you want to catch an exception you have to use &lt;code&gt;sys.exc_info()[1]&lt;/code&gt;. Now that really &lt;em&gt;is&lt;/em&gt; annoying. But in Python 2.6, most differences can be fixed with simple definitions, most of which boil down to try, except ImportError, import x as y type workarounds. The worst are the print function, which can be imported from __future__, division, which can also be imported from __future__ (or worked around), and unicode literals (if it’s a big deal, drop support for Python 3.2). Most other things are just simple renames, like xrange -&amp;gt; range, or making sure that you wrap functions that are iterators in Python 3 in &lt;code&gt;list&lt;/code&gt; if you want to access items from them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I was right about test coverage.&lt;/strong&gt; Supporting Python 2 and Python 3 in a single codebase if you have bad test coverage is not going to work. You can get around the worst things by making sure that __future__ imports are at the top of each file, but you are bound to miss things, because, as I said, you will forget that &lt;code&gt;map(f, s)[0]&lt;/code&gt; doesn’t work in Python 3 or that the &lt;code&gt;StringIO&lt;/code&gt; module has been renamed to &lt;code&gt;io&lt;/code&gt;, or that you can’t pass around data as strings—they have to be bytes.
&lt;p&gt;Of course, you also need good test coverage to support Python 3 well using 2to3, but you can get away with more because 2to3 will take care of things like the above for you.  Perhaps instead of 2to3 what really should have been made is a pyflakes-like tool that uses the same knowledge as 2to3 to check for cross-compatibility for Python 2 and Python 3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In the end, you have to be actually using Python 3.&lt;/strong&gt; I feel like people haven’t been, even today, taking Python 3 seriously. They aren’t actually using it. There’s a feeling that someday in the future they will, but for now, Python 2 is the way to go. 2to3 exacerbates this feeling, because to use it, you have to develop in Python 2. You shouldn’t touch the code generated by 2to3. As it is, then, if you develop with 2to3, you only ever use Python 3 to test that things are working in Python 3. You don’t prototype your code in Python 3, because then you will write code that doesn’t work in Python 2.
&lt;p&gt;With the single codebase, your view should change. You should start prototyping in Python 3. You should only use Python 2 to test that things work in Python 2 (and since you’ve been using Python 2 for so long before switching to Python 3, or at least if you’re like me you have, this is not that bad). Just yesterday, I found a &lt;a href=&quot;https://github.com/sympy/sympy/pull/2398&quot;&gt;bug&lt;/a&gt; in SymPy in Python 3 that went unnoticed. It relates to what I said above about using bytes instead of strings for data. I just checked, and 2to3 wouldn’t have fixed it (and indeed, the bug is present in SymPy 0.7.3, which used 2to3), because there’s no way for 2to3 to have known that the data was bytes and not a string.  The code was obviously untested, but it would have been obvious that it didn’t work if anyone was using Python 3 to use SymPy interactively.  As it turns out, some of our users are doing this, and they pointed it out on the mailing list, but it remained unfixed until I found it myself independently. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So old mistakes aside, the lessons to take away from this and the &lt;a href=&quot;http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/&quot;&gt;previous blog post&lt;/a&gt; are &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a single codebase instead of 2to3 to support both Python 2 and Python 3.&lt;/li&gt;
&lt;li&gt;Use Python 3 as your default Python.&lt;/li&gt;
&lt;li&gt;Keep Python 2 around, though, because not everything supports Python 3 yet.&lt;/li&gt;
&lt;li&gt;Expect to find some bugs, because, until everyone starts doing this, people aren’t going to test their software in Python 3.&lt;/li&gt;
&lt;/ol&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1401/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1401/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1401&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 22 Aug 2013 00:45:57 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Slow Progress</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=726</guid>
	<link>http://manojbits.wordpress.com/2013/08/18/slow-progress/</link>
	<description>&lt;p&gt;Hi, this week I decided to take a break from my actual GSoC project, and work on things that would indirectly some parts of my GSoC project.&lt;/p&gt;
&lt;p&gt;Firstly, I discovered this bug, when I was playing with the lie group solver, &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?id=3976&quot; rel=&quot;nofollow&quot;&gt;https://code.google.com/p/sympy/issues/detail?id=3976&lt;/a&gt; . I thought I could fix it myself, but the source code of solve seemed to be a bit too dense for me to comprehend, or atleast within a couple of days. Anyway as I was playing with the source code, I found another bug in solve_linear. This time however someone I found out what actually was wrong and managed to open a Pull Request to it &lt;a href=&quot;https://github.com/sympy/sympy/pull/2385&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2385&lt;/a&gt; . The problem was that, &lt;strong&gt;solve_linear(&lt;code&gt;y - Integral(f(x), y)&lt;/code&gt;) &lt;/strong&gt;was giving &lt;strong&gt;&lt;code&gt;(y, Integral(f(x), y)/(-f(x) + 1))&lt;/code&gt; &lt;/strong&gt;rather than &lt;strong&gt;(y, 0) &lt;/strong&gt;. I managed to implement a quick hack that would get around the issue, though it had me atleast thinking for two hours.&lt;/p&gt;
&lt;p&gt;Secondly the issue with Integral subs, I read thoroughly the discussion on the issue, and the respective Pull request , and I tried fixing the issue, &lt;a href=&quot;https://github.com/sympy/sympy/pull/2390&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2390&lt;/a&gt; . There seems to be a lot of test failures, so I am waiting for reviews on the PR, to see if my approach is right, before attempting to fix the failures.&lt;/p&gt;
&lt;p&gt;Thirdly, the lie group hint is almost ready to go in, just a few major tweaks here and there and a final yes by Sean.&lt;/p&gt;
&lt;p&gt;Finally, it seems that my exams are on September 14, so I need atleast five days before, so that I can pass them without any backlogs. And also I found a bit of time to clean up a bit, on some minor stuff I was “working” on last year &lt;a href=&quot;https://github.com/Manoj-Kumar-S/Thermo&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Manoj-Kumar-S/Thermo&lt;/a&gt; . Contributors to the repository are welcome &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:)&quot;&gt;:)&lt;/span&gt; . That’s it for now, I guess.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/726/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/726/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=726&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 18 Aug 2013 19:41:45 +0000</pubDate>
</item>
<item>
	<title>Prasoon Shukla: GSoC Week 9: Getting some work done</title>
	<guid isPermaLink="false">http://musingsofafriend.wordpress.com/?p=199</guid>
	<link>http://musingsofafriend.wordpress.com/2013/08/18/gsoc-week-9-getting-some-wotk-done/</link>
	<description>&lt;p&gt;This week was quite productive, I think. Finally, I was able to get some important parts done.&lt;/p&gt;
&lt;p&gt;So, for the last couple of weeks, I had been stuck on the express method for vectors. Reasons were many – the most prominent one being an onging coleege semester. Nevertheless, I knew that once I am done with the express method, then things will proceed at a much better pace. And it seems, foe once, I was right.&lt;/p&gt;
&lt;p&gt;In the last post, I wrote that I had got started with the vector calculus methods for vectors. This means all the methods required to perform both differntiation operations as well as integration operations on vectors. The first in this series was the ‘grad’ method. This one required a little repetition of code from the express method; I’ll need to refactor that later on. One of the problems I faced with this method was due to the generic nature of coordinate system. Indeed, we are allowing for a vector field to be composed of any number of coordinate systems – limited only by the memory of the computer. But, because we are using such a generalized approach, we cannot apply even the most generalized of the formulae on these vector fields. Our only choice now is, either to operate on each component – while applying the generalized formula – or, to express the vector field in a single coordinate system. But even in the former method, we can have a component, say, c0.x * c1.y – which is still in two different coordinate systems. So, we’ll still need to apply express on this &lt;em&gt;part&lt;/em&gt; of the vector field.&lt;/p&gt;
&lt;p&gt;On doing some analysis, I reached the conclusion that computationally, we will end up doing many more calls to express and doing similar kinds of calculations, no matter which way we go. So, I chose the method which is clearer; if the vector is in a single coordinate systems, well and good; but, if the vector is in more than one coordinate systems, then, the user will need to provide a coordinate system to express the results in.&lt;/p&gt;
&lt;p&gt;Anyway, that’s how I proceeded with this method. On similar lines, I also implemented the &lt;em&gt;div&lt;/em&gt; and the &lt;em&gt;curl&lt;/em&gt; methods for vector fields.&lt;em&gt; &lt;/em&gt;Also, I finalized the &lt;em&gt;dot &lt;/em&gt;and &lt;em&gt;cross&lt;/em&gt; methods for vectors.&lt;i&gt;&lt;br /&gt;
&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Once this was done, I wanted to start with methods related to integration. The first step to vector integrals was to have a class that can be used to represent parametric regions in space. Right now, I have allowed for at most 2 free parameters do define a region in space. In other words, the user can define curves and surfaces in space but not voulmes. Of course, I’ll add support for volumes later on subject to the availibility of time. Anyway, after this class had been defined, I wanted to have a class to hold integrals. First, I was thinking of adding a generic class for all kinds of integrals. But, just a little bit f thinking proced to me that this method will be quote inefficient not to mention very complex adding to the complexity of the code. So, I decided to have a base class &lt;em&gt;VectIntegral&lt;/em&gt; wich will be subclasses by classes that will represent each differnt category of integrals.&lt;/p&gt;
&lt;p&gt;For now, I have added two classes - &lt;em&gt;LineVectIntegral&lt;/em&gt; and &lt;em&gt;SurfaceVectInetgral. &lt;/em&gt;These will represent line and surface intrgrals of vectors fields. I have also added and eval method for the &lt;em&gt;LineVectIntegral &lt;/em&gt;class as well. Currently, I am trying to add an eval method to the &lt;em&gt;SurfaceVectIntegral&lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;Anyway, this is how the work is going on. According to the Google timeline, there is still one month to go till the end of the coding period. But for me, things will be much harder. Again, the reason is academics. My midterm examinations start 10th September and that means I’ll have to begin preparing a week before that. So, for me, only about 18 days are left at best. I’ll try to do the most I can in that period.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/musingsofafriend.wordpress.com/199/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/musingsofafriend.wordpress.com/199/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=musingsofafriend.wordpress.com&amp;amp;blog=36409097&amp;amp;post=199&amp;amp;subd=musingsofafriend&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 18 Aug 2013 10:58:15 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: Improving the solving process using Cornacchia</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=186</guid>
	<link>http://thilinaatsympy.wordpress.com/2013/08/18/improving-the-solving-process-by-using-cornacchia/</link>
	<description>&lt;p&gt;Hi All, It has been sometime since I last wrote about my project.  I spent most of my time improving the solving methods used in binary quadratic forms. I also did a fair bit of refactoring of the earlier work and bug fixing. The implementation of ternary quadratic forms is now almost done and once the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2307&quot;&gt;pull request&lt;/a&gt; by Pernici gets merged, we can use his function for finding the solutions for the quadratic congruence &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%5Cequiv+a+%5C+%28mod+%5C+p%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 \equiv a \ (mod \ p)&quot; class=&quot;latex&quot; title=&quot;x^2 \equiv a \ (mod \ p)&quot; /&gt; and the time taken to find the solutions for ternary / binary quadratic forms will be reduced considerably.&lt;/p&gt;
&lt;h4&gt;Tweaks to the algorithms used in solving quadratic binary forms&lt;/h4&gt;
&lt;p&gt;I had a misunderstanding earlier that the binary quadratic form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+bxy+%2B+cy%5E2+%2B+dx+%2B+ey+%2B+f+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + bxy + cy^2 + dx + ey + f = 0&quot; /&gt; can be converted to the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+-+Dy%5E2+%3D+N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 - Dy^2 = N&quot; class=&quot;latex&quot; title=&quot;x^2 - Dy^2 = N&quot; /&gt; only in the case &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+%3E+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;\Delta &amp;gt; 0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta &quot; class=&quot;latex&quot; title=&quot;\Delta &quot; /&gt; is not a perfect square. Here &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+%3D+b%5E2+-+4ac&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta = b^2 - 4ac&quot; class=&quot;latex&quot; title=&quot;\Delta = b^2 - 4ac&quot; /&gt;. It occurred to me only when I read [1] more carefully that any binary quadratic with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%5Cneq+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a \neq 0&quot; class=&quot;latex&quot; title=&quot;a \neq 0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c+%5Cneq+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c \neq 0&quot; class=&quot;latex&quot; title=&quot;c \neq 0&quot; /&gt; can be transformed to the latter form. With this new discovery, our treatment of the binary quadratic becomes more general and efficient.  Now in both the cases &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+%3E+0%2C+%5CDelta&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta &amp;gt; 0, \Delta&quot; class=&quot;latex&quot; title=&quot;\Delta &amp;gt; 0, \Delta&quot; /&gt; is not a perfect square and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+%3C+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta &amp;lt; 0&quot; class=&quot;latex&quot; title=&quot;\Delta &amp;lt; 0&quot; /&gt;, we transform the equation to the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+-Dy%5E2+%3D+N&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 -Dy^2 = N&quot; class=&quot;latex&quot; title=&quot;x^2 -Dy^2 = N&quot; /&gt;. The former case was earlier addressed under solving generalized Pell equation as the equation reduces to a generalized Pell equation in that case. My earlier approach with the latter case was to use brute force. I managed to implement the Cornacchia’s algorithm for this case as suggested by Pernici. Cornacchia’s algorithm can be used to solve the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 = m&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 = m&quot; /&gt; with &lt;img src=&quot;http://s0.wp.com/latex.php?latex=gcd%28a%2C+b%29+%3D+1+%3D+gcd%28a%2C+m%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;gcd(a, b) = 1 = gcd(a, m)&quot; class=&quot;latex&quot; title=&quot;gcd(a, b) = 1 = gcd(a, m)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%3E+0%2C+b+%3E+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a &amp;gt; 0, b &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;a &amp;gt; 0, b &amp;gt; 0&quot; /&gt;. In our form under the case &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5CDelta+%3C+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;\Delta &amp;lt; 0&quot; class=&quot;latex&quot; title=&quot;\Delta &amp;lt; 0&quot; /&gt;, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a = 1&quot; class=&quot;latex&quot; title=&quot;a = 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%3D+-D+%3E+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b = -D &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;b = -D &amp;gt; 0&quot; /&gt;, so these two conditions are automatically fulfilled. Below is a rough outline of the Cornacchia’s algorithm. Refer [2] and [3] for more details.&lt;/p&gt;
&lt;p&gt;Solving &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 = m&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 = m&quot; /&gt; by Cornacchia’s method&lt;/p&gt;
&lt;p&gt;1. Let &lt;img src=&quot;http://s0.wp.com/latex.php?latex=p&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;p&quot; class=&quot;latex&quot; title=&quot;p&quot; /&gt; be such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ap+%2B+mq+%3D+gcd%28a%2C+m%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ap + mq = gcd(a, m)&quot; class=&quot;latex&quot; title=&quot;ap + mq = gcd(a, m)&quot; /&gt;.&lt;br /&gt;
2. Construct a set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v&quot; class=&quot;latex&quot; title=&quot;v&quot; /&gt; such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=v+%3D+%5C%7B+x+%7C+x%5E2+%5Cequiv+-bp+%5C+%28mod+%5C+m%29+%5C%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;v = \{ x | x^2 \equiv -bp \ (mod \ m) \}&quot; class=&quot;latex&quot; title=&quot;v = \{ x | x^2 \equiv -bp \ (mod \ m) \}&quot; /&gt;. We can ommit solutions greater than &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m%2F2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m/2&quot; class=&quot;latex&quot; title=&quot;m/2&quot; /&gt;.&lt;br /&gt;
3. For each &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t+%5Cin+v&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;t \in v&quot; class=&quot;latex&quot; title=&quot;t \in v&quot; /&gt; set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_%7B1%7D+%3D+t%2C+r_%7B1%7D+%3D+m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;u_{1} = t, r_{1} = m&quot; class=&quot;latex&quot; title=&quot;u_{1} = t, r_{1} = m&quot; /&gt;.&lt;br /&gt;
4. Define the sequences, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_%7Bi%2B1%7D+%3D+r_%7Bi%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;u_{i+1} = r_{i}&quot; class=&quot;latex&quot; title=&quot;u_{i+1} = r_{i}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r_%7Bi%2B1%7D+%3D+u_%7Bi%7D+%5C+mod+%5C+r_%7Bi%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;r_{i+1} = u_{i} \ mod \ r_{i}&quot; class=&quot;latex&quot; title=&quot;r_{i+1} = u_{i} \ mod \ r_{i}&quot; /&gt; for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=i+%3E+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;i &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;i &amp;gt; 1&quot; /&gt;.&lt;br /&gt;
5. Find the terms &lt;img src=&quot;http://s0.wp.com/latex.php?latex=u_%7Bi%7D%2C+r_%7Bi%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;u_{i}, r_{i}&quot; class=&quot;latex&quot; title=&quot;u_{i}, r_{i}&quot; /&gt; until the condition &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ar_%7Bi%7D%5E2+%3C+m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ar_{i}^2 &amp;lt; m&quot; class=&quot;latex&quot; title=&quot;ar_{i}^2 &amp;lt; m&quot; /&gt; is met.&lt;br /&gt;
6. Set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m_%7B1%7D+%3D+m+-+ar_%7Bi%7D%5E2&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m_{1} = m - ar_{i}^2&quot; class=&quot;latex&quot; title=&quot;m_{1} = m - ar_{i}^2&quot; /&gt;.&lt;br /&gt;
7. If &lt;img src=&quot;http://s0.wp.com/latex.php?latex=b+%7C+m_%7B1%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;b | m_{1}&quot; class=&quot;latex&quot; title=&quot;b | m_{1}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m_%7B2%7D+%3D+m_%7B1%7D%2Fb&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m_{2} = m_{1}/b&quot; class=&quot;latex&quot; title=&quot;m_{2} = m_{1}/b&quot; /&gt; is a perfect square we have the solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+r_%7Bi%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = r_{i}&quot; class=&quot;latex&quot; title=&quot;x = r_{i}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y+%3D+%5Csqrt%7Bm_%7B2%7D%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;y = \sqrt{m_{2}}&quot; class=&quot;latex&quot; title=&quot;y = \sqrt{m_{2}}&quot; /&gt;.&lt;br /&gt;
8. Add &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y)&quot; class=&quot;latex&quot; title=&quot;(x, y)&quot; /&gt; to a set &lt;img src=&quot;http://s0.wp.com/latex.php?latex=S&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;S&quot; class=&quot;latex&quot; title=&quot;S&quot; /&gt;.&lt;br /&gt;
9. When we are done with all &lt;img src=&quot;http://s0.wp.com/latex.php?latex=t%2C+S&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;t, S&quot; class=&quot;latex&quot; title=&quot;t, S&quot; /&gt; contains all the solutions to the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%3D+m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 = m&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 = m&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Cornacchia’s method finds solutions such that &lt;img src=&quot;http://s0.wp.com/latex.php?latex=gcd%28x%2C+y%29+%3D+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;gcd(x, y) = 1&quot; class=&quot;latex&quot; title=&quot;gcd(x, y) = 1&quot; /&gt;. So it won’t find solutions to the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%3D+20&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + y^2 = 20&quot; class=&quot;latex&quot; title=&quot;x^2 + y^2 = 20&quot; /&gt; since the solutions of this equation is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%29+%3D+%284%2C+2%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y) = (4, 2)&quot; class=&quot;latex&quot; title=&quot;(x, y) = (4, 2)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=gcd%28x%2C+y%29+%3E+1&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;gcd(x, y) &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;gcd(x, y) &amp;gt; 1&quot; /&gt;. So we have to extract out square factors in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m&quot; class=&quot;latex&quot; title=&quot;m&quot; /&gt; and find solutions to the equation with this new &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m&quot; class=&quot;latex&quot; title=&quot;m&quot; /&gt; value and reconstruct the solutions. For example in the above example, 2 is a square factor of 20 (i.e square of two divides 20) so, we find solutions to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=m+%3D+20+%2F2%5E2+%3D+5&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;m = 20 /2^2 = 5&quot; class=&quot;latex&quot; title=&quot;m = 20 /2^2 = 5&quot; /&gt;, i.e for the equation &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+y%5E2+%3D+5&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + y^2 = 5&quot; class=&quot;latex&quot; title=&quot;x^2 + y^2 = 5&quot; /&gt; and then reconstruct the solutions for the original equation.&lt;/p&gt;
&lt;h4&gt;diophantine() and check_solutions()&lt;/h4&gt;
&lt;p&gt;I replaced the main routine of the module by a new method `diophantine()`. What the old method,`diop_solve()` did was, when given with an input equation, it tried to find  the type of the equation using `classify_diop()` and called the appropriate solving function accordingly. So when given an equation like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+3xy+%2B+5x+%3D+0+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + 3xy + 5x = 0 &quot; class=&quot;latex&quot; title=&quot;x^2 + 3xy + 5x = 0 &quot; /&gt;, diop_solve will identify this as a binary quadratic and try to solve this using methods for binary quadratics. But the best thing to do in this case is to factorize the above equation as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%28x+%2B+3y+%2B+5%29+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x(x + 3y + 5) = 0&quot; class=&quot;latex&quot; title=&quot;x(x + 3y + 5) = 0&quot; /&gt; and solve &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = 0&quot; class=&quot;latex&quot; title=&quot;x = 0&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%2B3y%2B5+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x+3y+5 = 0&quot; class=&quot;latex&quot; title=&quot;x+3y+5 = 0&quot; /&gt; separately. After that, we can construct the general solution by adding parameters. The general solution &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28x%2C+y%2C+z%29+%3D+%280%2C+n_%7B1%7D%2C+n_%7B2%7D%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(x, y, z) = (0, n_{1}, n_{2})&quot; class=&quot;latex&quot; title=&quot;(x, y, z) = (0, n_{1}, n_{2})&quot; /&gt; will be constructed after solving &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x = 0&quot; class=&quot;latex&quot; title=&quot;x = 0&quot; /&gt; and will be added to the solution set for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E2+%2B+3xy+%2B+5x+%3D+0+&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;x^2 + 3xy + 5x = 0 &quot; class=&quot;latex&quot; title=&quot;x^2 + 3xy + 5x = 0 &quot; /&gt;. This was done by introducing the new routine `diophantine()`. This is now the main routine for the module and when we call `diophantine(eq)`, first `diophantine()` tries to factor `eq` and then solve each factor using `diop_solve()`. Then it creates the general solution and that will be added to the solution set for `eq`. This is a very good approach and it is also a very common method used when we try to solve Diophantine equations manually.&lt;/p&gt;
&lt;p&gt;I also unified various kinds of  functions in `test_diophantine.py` which were used to find whether the solutions returned by a function satisfies the input equation. I wrote a new method `check_solutions()`. Aaron should be thanked for proposing such a method and now the `test_diophantine.py` looks nicer and whoever trying to hack it doesn’t need to study various kinds of solution checking functions. To be honest, I was running out of names for these functions because a new one had to be created for each equation type.&lt;/p&gt;
&lt;h4&gt;Bug Fixing&lt;/h4&gt;
&lt;p&gt;I spent a considerable time fixing the bugs in the module, especially towards the end of the last week. I had done some mistakes when transforming general ternary quadratic equation into the form &lt;img src=&quot;http://s0.wp.com/latex.php?latex=ax%5E2+%2B+by%5E2+%2B+cz%5E2+%3D+0&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;ax^2 + by^2 + cz^2 = 0&quot; class=&quot;latex&quot; title=&quot;ax^2 + by^2 + cz^2 = 0&quot; /&gt;. Also, in `diophantine()` method, I hadn’t check for the case when None is returned to indicate the insolubility of the equation. I also found a bug in the `factor_list()` function under Python3. Here is the issue I created for it: &lt;a href=&quot;https://code.google.com/p/sympy/issues/detail?id=3968&quot; rel=&quot;nofollow&quot;&gt;https://code.google.com/p/sympy/issues/detail?id=3968&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hmm, That is pretty much everything I did during the past weeks. I hope in the upcoming week I can start on solving extended Pythagorean equation.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;[1]&lt;em&gt; Solving the equation ax^2 + bxy + cy^2 + dx + ey + f = 0&lt;/em&gt;, John P.Robertson, May 8, 2003. &lt;a href=&quot;http://www.jpr2718.org/ax2p.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.jpr2718.org/ax2p.pdf&lt;/a&gt;&lt;br /&gt;
[2] &lt;em&gt;Solving ax^2 + by^2 = m by Cornacchia’s method&lt;/em&gt;, Number theory web, &lt;a href=&quot;http://www.numbertheory.org/php/cornacchia.html&quot; rel=&quot;nofollow&quot;&gt;http://www.numbertheory.org/php/cornacchia.html&lt;/a&gt;&lt;br /&gt;
[3] A. Nitaj, &lt;em&gt;L’algorithme de Cornacchia&lt;/em&gt;, Expositiones Mathematicae 13 (1995), 358-365&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/186/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/186/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=186&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 18 Aug 2013 04:25:25 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Week 9</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=98</guid>
	<link>http://meclark256.wordpress.com/2013/08/16/week-9/</link>
	<description>&lt;p&gt;This week I have been doing more work with the RootSystem class.   I created a PR (&lt;a href=&quot;https://github.com/sympy/sympy/pull/2382&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2382&lt;/a&gt;) with everything that I accomplished on it last week, just so that it’s up there and people can comment on it. &lt;/p&gt;
&lt;p&gt;This week, I implemented the root adding functions.  One function just takes any two simple roots and adds them together, and returns the new root.  It functions by having the user input two integers (which must be less than the rank of the lie algebra) and takes these integers to be the keys in the dictionary of positive roots, and retrieves the corresponding simple root.  Then it just add adds the lists corresponding to the roots (by adding together the two first elements, the two second elements, etc) and returns a new list, which is the new root.  &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Then, I also implemented a function which takes two roots as input, and if their sum is a root, returns their sum as a new root.  To do this, I first needed to have all the roots of a given Lie algebra available.  That is why last week I implemented a method for generating all the positive roots for A, B, C, and D.  This week I also did that for E, F, and G.  This enabled me to implement a method in RootSystem that generates all the roots of a given Lie algebra, by first getting the positive roots, and then using the positive roots to generate the negative roots (by multiplying each positive root by -1). &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Then the method add_as_root works by checking the dictionary of all roots to see if the sum of the two input roots is also a root.  If it’s not, it returns a string saying “The sum of these two roots is not a root”.  Otherwise it returns the sum as a list, as usual.&lt;/p&gt;
&lt;p&gt;This week I also worked on documentation and the like for all my functions.  This weekend I’m going to make sure all the doctests pass.  Then, my plan for next week is to start work on the the WeylGroup class.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/98/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/98/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=98&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 16 Aug 2013 19:11:19 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: 8th and 9th week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=254</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/08/16/8th-and-9th-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, here is my post on the last two weeks. First of all, I submitted a &lt;a href=&quot;https://github.com/sympy/sympy/pull/2365&quot; title=&quot;Modular GCD for polynomials over algebraic number fields&quot;&gt;PR&lt;/a&gt; for the modular GCD algorithm for polynomials over algebraic fields. For this, I had to finish and update documentation and write tests.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Another task was getting my &lt;a href=&quot;https://github.com/sympy/sympy/pull/2281&quot; title=&quot;modular GCD algorithm for integer polynomials&quot;&gt;first PR&lt;/a&gt; ready for merging. For this, I needed to cover more lines of the code, since every untested one is “a bug waiting to happen”. The difficulty here is the random choice of evaluation points in &lt;code&gt;_modgcd_multivariate_p&lt;/code&gt;. So I searched for an example such that for one prime every evaluation point is unlucky. I am glad I found one, since the only other possibility would have been to add an optional argument to choose the evaluation points manually. Now almost every line is tested and the few ones that are not should be harmless. &lt;img src=&quot;http://s1.wp.com/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;After that, I thoroughly studied the article [1] on factorization of polynomials over algebraic domains. I also started with the implementation, but I did not get very far yet.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Sorry for this entry being so late but still so short, I hope that next week there will be more stuff to blog about!&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;[1] &lt;a href=&quot;http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf&quot; rel=&quot;nofollow&quot;&gt;http://www.cecm.sfu.ca/~monaganm/papers/mahdiFactor.pdf&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/254/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/254/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=254&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 16 Aug 2013 13:29:50 +0000</pubDate>
</item>
<item>
	<title>MRocklin: Using SymPy within Theano</title>
	<guid isPermaLink="true">http://matthewrocklin.com/blog//work/2013/08/14/SymPy-Theano-part-4</guid>
	<link>http://matthewrocklin.com/blog//work/2013/08/14/SymPy-Theano-part-4</link>
	<description>&lt;p&gt;Several months ago I published a sequence of blogposts about using SymPy and Theano together to generate efficient mathematical codes.  Main points from the posts were as follows&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://matthewrocklin.com/blog/work/2013/03/19/SymPy-Theano-part-1/&quot;&gt;Code Generation&lt;/a&gt;: We created a drop-in replacement for SymPy’s code generation with a thin layer to Theano.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://matthewrocklin.com/blog/work/2013/03/28/SymPy-Theano-part-2/&quot;&gt;Scalar Simplificaiton&lt;/a&gt;:  We used SymPy’s simplification routines to accelerate programs prior to code printing in Theano&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://matthewrocklin.com/blog/work/2013/04/05/SymPy-Theano-part-3/&quot;&gt;Matrix Expressions&lt;/a&gt;:  We generate fast blocked numeric linear algebra programs from SymPy’s matrix expressions using Theano array operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A week ago &lt;a href=&quot;https://groups.google.com/d/topic/sympy/VtaxCRNO4sE/discussion&quot;&gt;someone popped up on the SymPy mailing list&lt;/a&gt; asking if a particular SymPy operation (&lt;code&gt;sympy.Piecewise&lt;/code&gt;) could be supported in the SymPy-Theano translation.  Because Theano has a similar operation (&lt;code&gt;theano.tensor.switch&lt;/code&gt;) it was simple to add this translation.  In general though this post raised some interesting questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Is there a way to avoid constantly making new translations for operations that exist both in SymPy and in Theano?&lt;/li&gt;
  &lt;li&gt;What do we do with SymPy’s more exotic operations for which no Theano analog exists?  E.g. how do we generate code for factorial or bessel functions?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In an attempt to resolve these issues we recently merged a general &lt;code&gt;SymPyCCode&lt;/code&gt; operation into the &lt;code&gt;Theano&lt;/code&gt; project.  It enables the expression of a Theano scalar operation through SymPy expressions using SymPy’s original code generation capability.  For example we can create a simple addition operation like so&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano.scalar.basic_sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x,y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# SymPy Symbols&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# A Theano addition operator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Theano operators can be applied to Theano variables to make compound Theano expressions&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano.scalar&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floats&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Theano can then turn these expressions into functions&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# prints 5.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we can describe scalar operations in SymPy and use them directly in Theano without having to translate anything.  Of course, the &lt;code&gt;add&lt;/code&gt; operation is already native in Theano.  This is more useful for complex scalar expressions, particularly if Theano does not already have such an operation&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theano_gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.stats.crv_types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalDistribution&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sigma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalDistribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the Hood&lt;/h2&gt;

&lt;p&gt;Internally the &lt;code&gt;SymPyCCode&lt;/code&gt; op calls SymPy’s C code printers to generate an implementation of the scalar operation.  For example the following SymPy code generates C code to compute the probability density function of a normal distribution.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.printing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ccode&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NormalDistribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M_PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Theano is then able to use this generated C code within its generated C program.  Theano still handles memory, common sub-expressions, arrays, etc. but is now able to leverage SymPy to generate low-level kernels for mathematical operations.&lt;/p&gt;

&lt;h2 id=&quot;but-dont-use-this&quot;&gt;But Don’t Use This&lt;/h2&gt;

&lt;p&gt;But you shouldn’t use this mechanism if you don’t have to.  Recall from the &lt;a href=&quot;http://matthewrocklin.com/blog/work/2013/03/19/SymPy-Theano-part-1/&quot;&gt;first post&lt;/a&gt; that SymPy can translate many standard operations to Theano directly, without having to wrap the SymPy expressions up in a black box Theano operation.  Native translation enables Theano to  use many additional optimizations like the use of the GPU, automatic differentiation, and common sub-expression elimination across many expressions.  This approach is mainly for cases where your complex scalar expressions don’t translate well to Theano.  In some cases the SymPyCCode op may also provide better performance (maybe SymPy’s generated C code is a bit tighter?)&lt;/p&gt;

&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;

&lt;p&gt;We need to improve SymPy’s code printers.  While they support all the standard operators they neglect to cover the really interesting cases like bessel functions or factorial.  These are cases where the numerical analysis community can concisely describe the “right way” to compute many of these operations in isolation.   For example the factorial of &lt;code&gt;n&lt;/code&gt; can be computed as &lt;code&gt;gamma(n+1)&lt;/code&gt;, a fact rarely known by mainstream programmers.  &lt;/p&gt;

&amp;lt;script type=&quot;math/tex; mode=display&quot;&amp;gt; n! = \Gamma(n+1) \;\; \forall n \in \mathbb{N} &amp;lt;/script&amp;gt;

&lt;p&gt;I’ve been thinking about the right way to do this generally.  Right now my thought is that we should create a new &lt;code&gt;expand&lt;/code&gt; hint for computation.  If you have thoughts I’d love to hear about them; please speak up in the comments.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;There are a number of ways to compute a SymPy expression numerically.  I’m going to explicily run throuh an example with a few of them below.  You should ignore this section if these are already familiar to you.&lt;/p&gt;

&lt;p&gt;We create a function to evaluate a normal distribution probability density function for a particular mean and standard deviation across a range of values for &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# The Target Expression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.stats.crv_types&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalDistribution&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sigma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NormalDistribution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make a numpy `ufunc` with Pure SymPy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.utilities.autowrap&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ufuncify&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_ufunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ufuncify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make a Theano function with SymPy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.printing.theanocode&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano_function&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_sym_theano&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Make a special Theano op using a SymPyCCode&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano.scalar.basic_sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano.tensor.elemwise&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elemwise&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;normal_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elemwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SymPyCCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# And then use that `op` in plain Theano code&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;theano&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mut&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mu'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigmat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sigma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theano&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 14 Aug 2013 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Manoj Kumar: Lie Group hint for SymPy</title>
	<guid isPermaLink="false">http://manojbits.wordpress.com/?p=705</guid>
	<link>http://manojbits.wordpress.com/2013/08/11/lie-group-hint-for-sympy/</link>
	<description>&lt;p&gt;Hi, this week started with two of my previous PR’s getting merged (finally).&lt;/p&gt;
&lt;p&gt;1.  The heuristics PR – &lt;a href=&quot;https://github.com/sympy/sympy/pull/2308&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2308&lt;/a&gt;&lt;br /&gt;
2. The variable coefficient PDE – &lt;a href=&quot;https://github.com/sympy/sympy/pull/2346&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sympy/sympy/pull/2346&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started working on the integration of the infinitesimals to the present dsolve architecture. Before telling about the issues I ran into (a number of them actually), let me explain the algorithm in a few lines.&lt;/p&gt;
&lt;p&gt;As you know (If you have been following my blog),the past few weeks my focus was on solving this monster PDE.&lt;br /&gt;
&lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+x%7D+%2B+%28%5Cfrac%7B%5Cpartial+%5Ceta%7D%7B%5Cpartial+y%7D+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+x%7D%29+%2A+h%28x%2C+y%29+-+%5Cfrac%7B%5Cpartial+%5Cxi%7D%7B%5Cpartial+y%7D%2Ah%28x%2Cy%29%5E%7B2%7D+-+%5Cxi%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+x%7D+-+%5Ceta%2A%5Cfrac%7B%5Cpartial+h%7D%7B%5Cpartial+y%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; class=&quot;latex&quot; title=&quot;\frac{\partial \eta}{\partial x} + (\frac{\partial \eta}{\partial y} - \frac{\partial \xi}{\partial x}) * h(x, y) - \frac{\partial \xi}{\partial y}*h(x,y)^{2} - \xi*\frac{\partial h}{\partial x} - \eta*\frac{\partial h}{\partial y}&quot; /&gt;&lt;br /&gt;
Why? Well, without going too much into detail, the solution to this PDE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\xi&quot; class=&quot;latex&quot; title=&quot;\xi&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\eta&quot; class=&quot;latex&quot; title=&quot;\eta&quot; /&gt;, give the infinitesimals of the ODE &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+h%28x%2C+y%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = h(x, y)&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = h(x, y)&quot; /&gt;. After getting the infinitesimals, this method is adopted.&lt;br /&gt;
1] One has to solve the Partial Differential Equations (again?)&lt;br /&gt;
   a] &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+x%7D+%2B+%5Ceta%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+y%7D+%3D+0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\xi\frac{\partial r}{\partial x} + \eta\frac{\partial r}{\partial y} = 0&quot; class=&quot;latex&quot; title=&quot;\xi\frac{\partial r}{\partial x} + \eta\frac{\partial r}{\partial y} = 0&quot; /&gt;&lt;br /&gt;
   b] &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi%5Cfrac%7B%5Cpartial+r%7D%7B%5Cpartial+x%7D+%2B+%5Ceta%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D+%3D+1&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\xi\frac{\partial r}{\partial x} + \eta\frac{\partial s}{\partial y} = 1&quot; class=&quot;latex&quot; title=&quot;\xi\frac{\partial r}{\partial x} + \eta\frac{\partial s}{\partial y} = 1&quot; /&gt;&lt;br /&gt;
2] Now one knows &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;s&quot; class=&quot;latex&quot; title=&quot;s&quot; /&gt; in terms of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt;, doing &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bds%7D%7Bdr%7D+%3D+%5Cfrac%7B%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+x%7D+%2B+%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D%2Ah%7D%7B%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+x%7D+%2B+%5Cfrac%7B%5Cpartial+s%7D%7B%5Cpartial+y%7D%2Ah%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{ds}{dr} = \frac{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}&quot; class=&quot;latex&quot; title=&quot;\frac{ds}{dr} = \frac{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}{\frac{\partial s}{\partial x} + \frac{\partial s}{\partial y}*h}&quot; /&gt; and converting the R.H.S in terms of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;s&quot; class=&quot;latex&quot; title=&quot;s&quot; /&gt;, reduces into a quadrature, which can be solved quite easily with the ode_separable hint&lt;br /&gt;
3] After solving the ODE, it can be converted back into the original coordinates.&lt;/p&gt;
&lt;p&gt;On a scale of optimism to pessimism, I am somewhere in between a realist and a pessimist, and I have to admit I was slightly disappointed with the effectiveness of the hint, since I was running into various issues, with a few ODEs that I had tested. These were some of them that I had identified.&lt;/p&gt;
&lt;p&gt;1] Problem with Integral: I was testing an ODE in which, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r+%3D+x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r = x&quot; class=&quot;latex&quot; title=&quot;r = x&quot; /&gt;, and I had to integrate a huge expression, which couldn’t be integrated, something like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7B1%7D%7B%5Csqrt%7Ba0+%2B+a1%2Ar+%2B+a2%2Ar%5E%7B2%7D+%2B+a3%5Er%7B3%7D%7D%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{1}{\sqrt{a0 + a1*r + a2*r^{2} + a3^r{3}}}&quot; class=&quot;latex&quot; title=&quot;\frac{1}{\sqrt{a0 + a1*r + a2*r^{2} + a3^r{3}}}&quot; /&gt;, it gave me an output of the form Integral, and when I substitued &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; as &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;, it gave me a definite value, this is because doing subs on an Integral object, doesn’t substitute for the variable with respect to which you are integrating to. I was pointed to this issue by Aaron, which I haven’t looked at yet.&lt;/p&gt;
&lt;p&gt;2] Assumptions: When I was applying to SymPy for Google Summer of Code, I saw this awesome proposal by Tom Bachmann, which seemed Greek and Latin to me then (Some parts of it does still, but never mind). The bottom line, is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdr%7D%7Bds%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dr}{ds}&quot; class=&quot;latex&quot; title=&quot;\frac{dr}{ds}&quot; /&gt; simplifies to a quadrature, sometimes only when, there are certain assumptions on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=s&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;s&quot; class=&quot;latex&quot; title=&quot;s&quot; /&gt;. Lets take a random example, suppose &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdr%7D%7Bds%7D+%3D+log%7Br%5E%7Bs%7D%7D+-+s%2Alog%7Br%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dr}{ds} = log{r^{s}} - s*log{r}&quot; class=&quot;latex&quot; title=&quot;\frac{dr}{ds} = log{r^{s}} - s*log{r}&quot; /&gt; reduces to zero only when &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r+%3E+0&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r &amp;gt; 0&quot; class=&quot;latex&quot; title=&quot;r &amp;gt; 0&quot; /&gt;, Since the input variable is &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;, giving assumptions on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x&quot; class=&quot;latex&quot; title=&quot;x&quot; /&gt;, doesn’t seem to affect the assumptions on &lt;img src=&quot;http://s0.wp.com/latex.php?latex=r&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;r&quot; class=&quot;latex&quot; title=&quot;r&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;3] There are some cases when the final expression, cannot be solved explicitly for &lt;img src=&quot;http://s0.wp.com/latex.php?latex=y&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;y&quot; class=&quot;latex&quot; title=&quot;y&quot; /&gt; like this &lt;a href=&quot;https://gist.github.com/Manoj-Kumar-S/6201842&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/Manoj-Kumar-S/6201842&lt;/a&gt; . I think the best way would be to return it as it is.&lt;/p&gt;
&lt;p&gt;4] Recursion: Take the case of this wonderful ODE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=x%5E%7B2%7D%2A%28-f%28x%29%5E%7B2%7D+%2B+%5Cfrac%7Bdf%7D%7Bdx%7D%29-+a%2Ax%5E%7B2%7D%2Af%28x%29+%2B+2+-+a%2Ax&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;x^{2}*(-f(x)^{2} + \frac{df}{dx})- a*x^{2}*f(x) + 2 - a*x&quot; class=&quot;latex&quot; title=&quot;x^{2}*(-f(x)^{2} + \frac{df}{dx})- a*x^{2}*f(x) + 2 - a*x&quot; /&gt;, calculating the infinitesimals, give me &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cxi+%3D+x%5E%7B2%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\xi = x^{2}&quot; class=&quot;latex&quot; title=&quot;\xi = x^{2}&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Ceta+%3D+a%2Ax%5E%7B2%7D%2Af%28x%29+-+2+%2B+a%2Ax+%2B+x%5E%7B2%7D%2A%28-f%28x%29%5E%7B2%7D%29&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\eta = a*x^{2}*f(x) - 2 + a*x + x^{2}*(-f(x)^{2})&quot; class=&quot;latex&quot; title=&quot;\eta = a*x^{2}*f(x) - 2 + a*x + x^{2}*(-f(x)^{2})&quot; /&gt;. Since the first step in solving the PDE, &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cfrac%7Bdy%7D%7Bdx%7D+%3D+%5Cfrac%7B%5Ceta%7D%7B%5Cxi%7D&amp;amp;bg=ffffff&amp;amp;fg=000000&amp;amp;s=0&quot; alt=&quot;\frac{dy}{dx} = \frac{\eta}{\xi}&quot; class=&quot;latex&quot; title=&quot;\frac{dy}{dx} = \frac{\eta}{\xi}&quot; /&gt; , it gives the same ODE again.&lt;/p&gt;
&lt;p&gt;Apart from this I believe rest of the code is good.&lt;/p&gt;
&lt;p&gt;P.S: First ten days of college is over. There have been huge disappointments, but apart from that I have enjoyed either roaming outside, and working on my SymPy project, and I have done nothing other than that.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/manojbits.wordpress.com/705/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/manojbits.wordpress.com/705/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=manojbits.wordpress.com&amp;amp;blog=31971756&amp;amp;post=705&amp;amp;subd=manojbits&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 11 Aug 2013 15:21:06 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer (old): Using Python 3 as my default Python</title>
	<guid isPermaLink="false">http://asmeurersympy.wordpress.com/?p=1362</guid>
	<link>http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/</link>
	<description>&lt;p&gt;So I just finished my internship with &lt;a href=&quot;http://continuum.io&quot;&gt;Continuum&lt;/a&gt;. For the internship, I primarily worked on &lt;a href=&quot;http://continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;, their free Python distribution, and &lt;a href=&quot;https://github.com/continuumIO/conda&quot;&gt;conda&lt;/a&gt;, its free (BSD open source) package manager. I might write a blog post about conda later, but suffice it to say that I’m convinced that it is doing package management the right way. One of the major developments this summer that I helped out with was the ability for &lt;a href=&quot;http://docs.continuum.io/conda/build.html&quot;&gt;anybody to build a conda package&lt;/a&gt;, and a site called &lt;a href=&quot;https://binstar.org&quot;&gt;Binstar&lt;/a&gt; where people can upload them (the beta code is “binstar in beta” with no quotes). &lt;/p&gt;
&lt;p&gt;Another thing that happened over the summer is that Almar Klein made conda Python 3 compatible, so that it can be used with the &lt;a href=&quot;http://www.pyzo.org&quot;&gt;Pyzo&lt;/a&gt; project, which is Python 3 only.    The way this was done was by using a single code base for Python 2 and Python 3. Thus, this became the first time I have done any heavy development on Python source that had to be Python 3 compatible from a single codebase (as opposed to using the 2to3 tool). &lt;/p&gt;
&lt;p&gt;Another development this summer was that SymPy was released (&lt;a href=&quot;https://github.com/sympy/sympy/releases/tag/sympy-0.7.3&quot;&gt;0.7.3&lt;/a&gt;). This marked the last release to support Python 2.5. Around the same time, we discussed our Python 3 situation, and how annoying it is to run use2to3 all the time. The result was &lt;a href=&quot;https://github.com/sympy/sympy/pull/2318&quot;&gt;this pull request&lt;/a&gt;, which made SymPy use a single code base for Python 2 and Python 3. Now, that pull request is hard to mull through, but the important part to look at is the &lt;a href=&quot;https://github.com/sympy/sympy/pull/2318/files#diff-124&quot;&gt;compatibility&lt;/a&gt; file. Everything in that file has to be imported and used, because it represents things that are different between Python 2 and Python 3. Ondřej has written more about this on &lt;a href=&quot;http://ondrejcertik.blogspot.com/2013/08/how-to-support-both-python-2-and-3.html&quot;&gt;his blog&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In all, I think that supporting Python 2.6-3.3 (not including 3.0 or 3.1) is not that bad. The compatibility file has a few things, but thinking back, it was just that bad or worse supporting Python 2.4-2.7 (heck, back then, we couldn’t even use the &lt;code&gt;all&lt;/code&gt; function without importing it). The situation is much better today now that we use Travis too, since any mistake is caught before the pull request is merged. The worst of course is the &lt;code&gt;print&lt;/code&gt; function, but since that can be imported from &lt;code&gt;__future__&lt;/code&gt;, I will be warned about it pretty fast, since &lt;code&gt;print&lt;/code&gt; as a statement is a SyntaxError in that case. It also doesn’t take that long to get into the habit of typing &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;print&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Of course, there are a lot of nice Python 3 only features that we cannot use, but this was the case for supporting Python 2.4-2.7 too (e.g., the with statement and the ternary statement were both introduced in Python 2.5).   So this is really nothing new. There is always a stick to drop the oldest Python version we support, and a lag on what features we can use. Now that we have dropped Python 2.5 support in SymPy, we can finally start using new-style string formatting, abstract base classes, relative imports, and keyword arguments after &lt;code&gt;*args&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So as a result of this, I’ve come to the conclusion that Python 3 is &lt;em&gt;not&lt;/em&gt; another language. It’s just another version of the same language. Supporting Python 2.6-3.3 is no different from supporting Python 2.4-2.7. You have to have some compatibility imports, you can’t use new language features, and you have to have good test coverage. I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the &lt;code&gt;print&lt;/code&gt; function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea. &lt;/p&gt;
&lt;p&gt;In the past, I have always developed against the latest version of Python: 2.6 was the best when I learned Python, and then 2.7. Even though I have had to support back to 2.4, I only used 2.4 explicitly when testing. &lt;/p&gt;
&lt;p&gt;Well, given what I said above, the only logical thing to do is to use Python 3.3 as my main development Python. If you use Anaconda, there are basically two ways you can do this. The first is to just create a Python 3 environment (&lt;code&gt;conda create -n python3 python=3&lt;/code&gt;), and put that first in your &lt;code&gt;PATH&lt;/code&gt; (you also will need to add &lt;code&gt;source activate python3&lt;/code&gt; to your bash profile if you go this route, so that &lt;code&gt;conda install&lt;/code&gt; will install into that environment by default). For me, though, I plan to use a Python 3 version of Anaconda, which has Python 3 as the default. The main difference here is that &lt;code&gt;conda&lt;/code&gt; itself is written in Python 3. Aside from purity, and the fact that I plan to fix any occasional conda bugs that I come across, the other difference here is that conda itself will default to Python 3 in this case (i.e., when creating a new environment with Python like &lt;code&gt;conda create -n envname python&lt;/code&gt;, the Python will be Python 3, not Python 2, and also it will build against Python 3 by default with &lt;code&gt;conda build&lt;/code&gt;). Continuum does not yet make Python 3 versions of Anaconda, but there are Python 3 versions of &lt;a href=&quot;http://repo.continuum.io/miniconda/index.html&quot;&gt;Miniconda&lt;/a&gt; (Miniconda3), which is a stripped down version of Anaconda with just Python, the conda package manager, and its dependencies. You can easily install Anaconda into it though with &lt;code&gt;conda install anaconda&lt;/code&gt;. I personally prefer to install only what I need to keep the disk usage low (on an SSD, disk space is sparse), so this is perfect for me anyway.&lt;/p&gt;
&lt;p&gt;My recommendation is to put a Python 2 installation second in your PATH, so that you can easily call &lt;code&gt;python2&lt;/code&gt; if you want to use Python 2. The easiest way to do this is to create a conda environment for it (&lt;code&gt;conda create -n python2 python=2&lt;/code&gt;) and add &lt;code&gt;~/anaconda/envs/python2&lt;/code&gt; to your PATH. &lt;/p&gt;
&lt;p&gt;So far, I have run into a few issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some packages aren’t build for Python 3 yet in Anaconda, or they don’t support it at all.  The biggest blocker in Anaconda is PySide (at least on Mac OS X), though it should be coming soon. &lt;/li&gt;
&lt;li&gt;Some packages only install entry points with a “3″ suffix, which is annoying. The biggest offender here is IPython. I brought up this issue on their &lt;a href=&quot;http://mail.scipy.org/pipermail/ipython-dev/2013-August/012074.html&quot;&gt;mailing list&lt;/a&gt;, &lt;del&gt;so hopefully they will see the light and fix this before the next release&lt;/del&gt;, but it hasn’t been implemented yet. I also plan to make sure that the Anaconda package for IPython installs an &lt;code&gt;ipython&lt;/code&gt; entry point into Python 3 environments. Even so, one has to remember this when installing old versions of IPython in environments. &lt;/li&gt;
&lt;li&gt;There are some bugs in conda in Python 3. Actually, I suspect that there are bugs in a lot of packages in Python 3, because people don’t develop against it, unless they have excellent test coverage. Even SymPy missed a few print statements. &lt;/li&gt;
&lt;li&gt;You can’t &lt;code&gt;setup.py develop&lt;/code&gt; against anything that uses 2to3 (like IPython). &lt;/li&gt;
&lt;li&gt;It’s a little annoying working against old versions of SymPy (e.g., when digging through the git history to track something down), because I have to explicitly use Python 2. Conda makes this easier because I can just create a Python 2 environment and do &lt;code&gt;source activate python2&lt;/code&gt; when I am using Python 2. Or, for a one-off, I can just use &lt;code&gt;python2&lt;/code&gt;, and keep a Python 2 environment second in my PATH. But this issue is not really new. For example, really old versions of SymPy only work with Python 2.5, because they used &lt;code&gt;as&lt;/code&gt; as a variable name.&lt;/li&gt;
&lt;li&gt;Everyone else isn’t using Python 3 yet, so if I write a script that only needs to support “the latest version of Python,” it probably needs to support Python 2.7, or else I should explicitly put &lt;code&gt;/usr/bin/env python3&lt;/code&gt; in the shebang line. But for SymPy, I have to be aware of how to support 2.6-3.3, so I have to know all the features that are only in some versions anyway. On the other side of things, if I run some random Python script with a shebang line, it probably is going to expect Python 2 and not Python 3, so I either have to explicitly add &lt;code&gt;python2&lt;/code&gt; to the command or activate a Python 2 environment&lt;/li&gt;
&lt;li&gt;Some packages just don’t support Python 3 yet. Fabric (and its main dependency, Paramiko) is the one example I have come across so far in my own work. So I have to fall back to Python 2 if I want to use them. The best thing to do here is to pitch in and help these libraries port themselves.&lt;/li&gt;
&lt;li&gt;People always give code examples with &lt;code&gt;print&lt;/code&gt; as a statement instead of a function, so I either have to fix it manually before pasting it or use Python 2. I had tried at one point to make a &lt;code&gt;%print&lt;/code&gt; magic for IPython that would let print work like a statement in Python 3, but I never finished it. I guess I should revisit it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll update this list as I come across more issues. &lt;/p&gt;
&lt;p&gt;In all, so far, it’s nothing too bad. Conda makes switching back to Python 2 easy enough, and dealing with these issues are hardly the worst thing I have to deal with when developing with Python. And if anything, seeing Python 2-3 bugs and issues makes me more aware of the differences between the two versions of the language, which is a good things since I have to develop against code that has to support both. &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1362/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1362/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1362&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 09 Aug 2013 21:59:55 +0000</pubDate>
</item>
<item>
	<title>Mary Clark: Week 8</title>
	<guid isPermaLink="false">http://meclark256.wordpress.com/?p=82</guid>
	<link>http://meclark256.wordpress.com/2013/08/09/week-8/</link>
	<description>&lt;p&gt;This week I have been working on the class RootSystem. &lt;/p&gt;
&lt;p&gt;The first major decision that I had to make about this class was how to encode the CartanType data, for lack of a better way of phrasing it.   There are numerous ways of doing this, but I think that my solution is somewhat elegant.  Effectively, when one calls an instance of the class RootSystem, it takes an argument, cartantype.  Then, the __new__ function takes the input and sets an attribute of RootSystem called cartan_type as CartanType(cartantype).  The code is:&lt;/p&gt;
&lt;p&gt;class RootSystem(Basic):&lt;/p&gt;
&lt;p&gt;    def __new__(cls, cartantype):&lt;br /&gt;        “”&quot;&lt;br /&gt;        Creates a new RootSystem object.  This method assigns an attribute&lt;br /&gt;        called cartan_type to each instance of a RootSystem object.  When&lt;br /&gt;        an instance of RootSystem is called, it needs an argument, which &lt;br /&gt;        should be an instance of a simple Lie algebra.  We then take the&lt;br /&gt;        CartanType of this argument and set it as the cartan_type attribute&lt;br /&gt;        of the RootSystem instance.  &lt;br /&gt;        “”&quot;&lt;br /&gt;        obj = Basic.__new__(cls, cartantype)&lt;br /&gt;        obj.cartan_type = CartanType(cartantype)&lt;br /&gt;        return obj&lt;/p&gt;
&lt;p&gt;By doing this, it means that I don’t need to check the argument and see if it is “A” or “B” or “G” or whatever, and then importing the associated class.  I can just call self.cartan_type.rank() or self.cartan_type.simple_root(i), which I think is quite neat.  &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I’ve also decided to add a method to the base classes that generates all of their positive roots (and since the negative roots are just minus the positive roots, we effectively have the entire root system).  I think that this will facilitate some of the addition methods that I want to implement in RootSystem.  I have so far done this for types A, B, C, and D. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;At this point, in RootSystem I have so far implemented a method that generates all the simple roots,  a method for displaying the root space, and then methods which return the Cartan matrix and Dynkin diagram of the Lie algebra.  I am currently pondering on how I want to implement some root addition methods.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;So yeah, that’s been my week!  To be honest, I think it has been fairly productive, and I am quite pleased about that.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/meclark256.wordpress.com/82/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/meclark256.wordpress.com/82/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=meclark256.wordpress.com&amp;amp;blog=52875864&amp;amp;post=82&amp;amp;subd=meclark256&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 09 Aug 2013 19:55:18 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week 6 &amp; 7</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=407</guid>
	<link>http://geekiology.wordpress.com/2013/08/09/week-6-7-2/</link>
	<description>&lt;p&gt;Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.&lt;/p&gt;
&lt;p&gt;Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-30 21:43:22&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-397&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.&lt;/p&gt;
&lt;p&gt;I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if we could please have daily meet-ups.&lt;br /&gt;
PS  : Some Announcements&lt;br /&gt;
PS1 : YES !! i have passed the mid-term evaluation &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;&lt;br /&gt;
PS2 : I am finally 20 !! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  Adios teens !&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/407/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/407/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=407&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 09 Aug 2013 00:02:16 +0000</pubDate>
</item>
<item>
	<title>Chetna Gupta: Week – 6 &amp; 7</title>
	<guid isPermaLink="false">http://geekiology.wordpress.com/?p=396</guid>
	<link>http://geekiology.wordpress.com/2013/08/08/week-6-7/</link>
	<description>&lt;p&gt;Week 6, brought me back to my coding arena “YES COLLEGE”. Though it was a messed up week with tons and tons of administration work, course selections, juniors arrival but still I could manage re-going through the Manuel Bronstien to see what the “HELL” has been causing the recursion error in the code.&lt;/p&gt;
&lt;p&gt;Though the code has started picking up the pace, it works for some of the simple cases I have included in my previous post (Week-5) but it ended others in recursion errors. These cases are the ones where I have more than one monomial, here is an example to demonstrate the failure.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png&quot;&gt;&lt;img src=&quot;http://geekiology.files.wordpress.com/2013/07/screenshot-from-2013-07-30-214322.png?w=300&amp;amp;h=168&quot; alt=&quot;Screenshot from 2013-07-30 21:43:22&quot; width=&quot;300&quot; class=&quot;alignnone size-medium wp-image-397&quot; height=&quot;168&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There have been a lot of delays in me working on the PR, thanks to my awesome immunity system, after having food poisoning.&lt;/p&gt;
&lt;p&gt;I need to really gear-up now, so have planned to update the blog as well as PRs daily. There is a lot which I guess we all would like to see implemented for the Risch Algorithm. I would really like to have a meeting soon with Aaron to discuss if having daily meet-ups would be feasible for him.&lt;br /&gt;
PS  : Some Announcements&lt;br /&gt;
PS1 : YES !! i have passed the mid-term evaluation &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;&lt;br /&gt;
PS2 : I am finally 20 !! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_biggrin.gif&quot; alt=&quot;:D&quot; class=&quot;wp-smiley&quot; /&gt;  Adios teens !&lt;/p&gt;
&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/geekiology.wordpress.com/396/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/geekiology.wordpress.com/396/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=geekiology.wordpress.com&amp;amp;blog=36553244&amp;amp;post=396&amp;amp;subd=geekiology&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Aug 2013 23:38:16 +0000</pubDate>
</item>
<item>
	<title>Katja Sophie Hotz: Seventh week</title>
	<guid isPermaLink="false">http://sophiessympyblog.wordpress.com/?p=246</guid>
	<link>http://sophiessympyblog.wordpress.com/2013/08/04/seventh-week/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;I am very happy to report that I passed midterm evaluations! &lt;img src=&quot;http://s0.wp.com/wp-includes/images/smilies/icon_smile.gif&quot; alt=&quot;:)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;So what happened this week? First, I implemented a (user facing) function to calculate a multivariate GCD of two polynomials over an algebraic field, building on the work of the previous two weeks. I also spent a considerable amount of time hunting bugs, but it seems I got everything in working order.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;However, I realized that the polynomial ring I had been working with was not the best choice. So I went over the whole code again and rewrote everything to use polynomials in &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bt_1%2C+%5Cldots%2C+t_k%5D%5Bx%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[t_1, \ldots, t_k][x, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[t_1, \ldots, t_k][x, z]&quot; /&gt; instead of &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%5Bx%2C+t_1%2C+%5Cldots%2C+t_k%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z[x, t_1, \ldots, t_k, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z[x, t_1, \ldots, t_k, z]&quot; /&gt;. This made some parts easier and some parts more difficult, but overall it looks like the more natural choice. The parts that got more difficult now involve rings like &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%5Cmathbb+Z%28t_k%29%5Bt_1%2C+%5Cldots+%2C+t_%7Bk-1%7D%5D%5Bx%2C+z%5D&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]&quot; class=&quot;latex&quot; title=&quot;\mathbb Z(t_k)[t_1, \ldots , t_{k-1}][x, z]&quot; /&gt;, where I have to distinguish between the cases &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3D+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k = 1&quot; class=&quot;latex&quot; title=&quot;k = 1&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=k+%3E+1&amp;amp;bg=f7f3ee&amp;amp;fg=333333&amp;amp;s=0&quot; alt=&quot;k &amp;gt; 1&quot; class=&quot;latex&quot; title=&quot;k &amp;gt; 1&quot; /&gt;. Maybe I will find a better solution for that in time.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In the next few days I want to finish this part of my project so I can start with the factorization algorithm, which will be the biggest and final part of my project.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/sophiessympyblog.wordpress.com/246/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/sophiessympyblog.wordpress.com/246/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=sophiessympyblog.wordpress.com&amp;amp;blog=53034828&amp;amp;post=246&amp;amp;subd=sophiessympyblog&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 04 Aug 2013 20:59:18 +0000</pubDate>
</item>

</channel>
</rss>
