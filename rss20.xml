<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<language>en</language>
	<description>Planet SymPy - http://planet.sympy.org/</description>

<item>
	<title>Jim Crist: GSoC Week 12 &amp; 13: The End</title>
	<guid isPermaLink="false">tag:,2014-08-20:gsoc-week-12-13.html</guid>
	<link>http://jcrist.github.io/gsoc-week-12-13.html</link>
	<description>&lt;p&gt;The GSoC program officially ended this Monday, and so my work for SymPy has
concluded. I got &lt;em&gt;a lot&lt;/em&gt; done in these last two weeks though. Here's what's
new. In order of completion:&lt;/p&gt;
&lt;h3&gt;Complete overhaul of the codeprinting system&lt;/h3&gt;
&lt;p&gt;I wasn't happy with the way the codeprinters were done previously. There was a
lot of redundant code throughout &lt;code&gt;ccode&lt;/code&gt;, &lt;code&gt;fcode&lt;/code&gt; and &lt;code&gt;jscode&lt;/code&gt; (the main three
printers).  They also had a lot of special case code in the &lt;code&gt;doprint&lt;/code&gt; method
for handling multiline statements, which I felt could be better accomplished
using &lt;a href=&quot;http://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;the visitor pattern&lt;/a&gt; that
is used by all the other printers. The issue is that some nodes need to know if
they are part of a larger expression, or part of an assignment. For example, in
&lt;code&gt;C&lt;/code&gt; &lt;code&gt;Piecewise&lt;/code&gt; are printed as if statements if they contain an assignment, or
inline using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Ternary_operation&quot;&gt;ternary
operator&lt;/a&gt; if they don't.&lt;/p&gt;
&lt;p&gt;After some thought, this was solved by adding an &lt;code&gt;Assignment&lt;/code&gt; node that
contains this information, and then dispatching to it in the printer just like
any other node. Less special case code, and allowed the base &lt;code&gt;CodePrinter&lt;/code&gt;
class to contain a lot of the redundancies. For those implementing a new code
printer (perhaps for Octave?) all you'd need to do is add how to print certain
operators, and a dictionary of function translations.  Everything else &lt;em&gt;should&lt;/em&gt;
just work. I may add little cleanups here and there, but I'm pretty happy with
the refactor.&lt;/p&gt;
&lt;h3&gt;Code printers now support matrices&lt;/h3&gt;
&lt;p&gt;This was the original goal, but got put aside to do the previously described
refactor. The codeprinters now support matrices - both as inputs and outputs.
For example, the following now works:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Expressions inside a matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x, y, z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Piecewise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;md_output&quot;&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Matrix elements inside expressions&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Piecewise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;md_output&quot;&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Matrix elemnts in expressions inside a matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ccode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;md_output&quot;&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;p&gt;There even was a &lt;code&gt;Piecewise&lt;/code&gt; inside a &lt;code&gt;Matrix&lt;/code&gt; in there. As long as there is an
assignment between two compatible types (matrix -&amp;gt; matrix, scalar -&amp;gt; scalar),
the new codeprinters should print out valid expressions.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;codegen&lt;/code&gt; now supports matrices&lt;/h3&gt;
&lt;p&gt;This is more of a continuation of the above. The code generators have been
modified to recognize instances of &lt;code&gt;MatrixSymbol&lt;/code&gt; as array variables and act
accordingly. There actually wasn't that much to change here to make this work.
The biggest change that happened is that &lt;em&gt;all&lt;/em&gt; &lt;code&gt;C&lt;/code&gt; functions that have a return
value (non &lt;code&gt;void&lt;/code&gt; functions) allocate a local variable of the same type. This
is to cover a larger set of expressions, while still generating valid code. So
now, when performing codegen on &quot;&lt;code&gt;sin(x)&lt;/code&gt;&quot; you won't get &quot;&lt;code&gt;return sin(x)&lt;/code&gt;&quot;,
you'll get:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codegen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sin_c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;md_output&quot;&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sin_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin_c_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sin_c_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin_c_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;p&gt;This isn't as pretty, but handling return inside expressions is a tricky
problem, and this solves it without much work. Modern compilers should remove
the variable assignment if it's unnecessary, so there shouldn't be a resulting
speed loss in the code.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;Cython&lt;/code&gt; wrapper for &lt;code&gt;autowrap&lt;/code&gt; now works&lt;/h3&gt;
&lt;p&gt;There was a code wrapper for &lt;code&gt;Cython&lt;/code&gt; in the codebase, but I don't think it has
ever worked. It does now:) It can do everything &lt;code&gt;f2py&lt;/code&gt; can do, and I plan on
adding more useful features. In it's current state it can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handle both scalar and matrix input, input-output and output arguments&lt;/li&gt;
&lt;li&gt;Internally allocate output arguments&lt;/li&gt;
&lt;li&gt;Pull inferred variables (such as matrix dimensions) out of the function signature&lt;/li&gt;
&lt;li&gt;Create a multiple return value tuple&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last thing I want to do to make this &lt;em&gt;really&lt;/em&gt; nice is to add support for
informative docstrings. Even so, this is already usable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x, y, z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Piecewise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cython'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;md_output&quot;&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.14112001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;p&gt;For some reason the &lt;code&gt;Fortran&lt;/code&gt;/&lt;code&gt;f2py&lt;/code&gt; has around a 2 microseconds faster than
the &lt;code&gt;C&lt;/code&gt;/&lt;code&gt;Cython&lt;/code&gt; code. I think this has something to do with array allocations,
but I'm not sure. For larger expressions they're pretty equal, so this
shouldn't be that big of a deal. I still plan to look into code optimizations I
could make in the Cython wrapper.&lt;/p&gt;
&lt;h2&gt;Project Status&lt;/h2&gt;
&lt;p&gt;Overall, I accomplished &lt;em&gt;most&lt;/em&gt; of what I set out to do this summer. Some things
(pre-solution linearization) were nixed from the project due to changing goals.
Here's a short list of what was done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;General linearization methods added for both &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code cleanup and speedup for &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creation of &lt;code&gt;msubs&lt;/code&gt; - a specialized &lt;code&gt;subs&lt;/code&gt; function for mechanics
   expressions. This runs &lt;em&gt;significantly&lt;/em&gt; faster than the default &lt;code&gt;subs&lt;/code&gt;, while
   adding some niceities (selective simplification).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete overhaul of codeprinters. Fixed a lot of bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Addition of support for matrices in code printers, code generators, and &lt;code&gt;autowrap&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overhaul of &lt;code&gt;Cython&lt;/code&gt; codewrapper. It works now, and does some nice things to
   make the wrapped functions more pythonic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation for the above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;I had an excellent summer working for SymPy, and I plan on continuing to
contribute. I have some code for discretization that I've been using for my
research that may be of interest to the mechanics group. I also want to get
common sub-expression elimination added to the code generators, as this kind of
optimization may result in speedups for the large expressions we see in
mechanics. My contributions will unfortunately be less frequent, as I need to
really focus on research and finishing my degree, but I still hope to help out.&lt;/p&gt;
&lt;p&gt;I plan on writing another post in the next few days about the GSoC experience
as a whole, so I won't touch on that here. Let me just say thank you to Jason,
Luke, Oliver, Sachin, Tarun, Aaron, and all the other wonderful people that
have offered me guidance and support throughout the summer. You guys are
awesome.&lt;/p&gt;</description>
	<pubDate>Wed, 20 Aug 2014 19:43:00 +0000</pubDate>
</item>
<item>
	<title>Aaron Meurer: Playing with Swift and SpriteKit</title>
	<guid isPermaLink="true">http://asmeurer.github.io/posts/playing-with-swift-and-spritekit/</guid>
	<link>http://asmeurer.github.io/posts/playing-with-swift-and-spritekit/</link>
	<description>&lt;div&gt;&lt;p&gt;I've always wanted to learn how to write native apps for iOS and the Mac as
long as either has existed.  However, the barrier of entry has always been too
high, given that I only ever had time to play with them as a hobby.  The
Objective-C programming language is a bit complicated to learn, especially
alongside all the memory management that you have to do (and it doesn't help
that Apple has gone through several memory management schemes through Mac OS X
versions).  To add on to that, the Cocoa framework is huge, and it's quite
daunting to even know where to get started with it.&lt;/p&gt;
&lt;p&gt;With Apple's announcement of the
&lt;a href=&quot;https://developer.apple.com/swift/&quot;&gt;Swift programming language&lt;/a&gt; in June, it
was clear to me that the language would significantly lower the barrier of
entry.  The &lt;a href=&quot;https://developer.apple.com/xcode/downloads/&quot;&gt;XCode 6 beta&lt;/a&gt; is
now public (i.e., you do not need to have a paid Apple Developer account to
access it), so anyone can play with Swift.&lt;/p&gt;
&lt;p&gt;Note that I am still &lt;em&gt;very&lt;/em&gt; new to both Swift and iOS development in general,
so it's quite likely that some of the things I mention here are actually bad
ideas.  If you know more than I do and spot a bad thing that I am doing,
please mention it in the comments.&lt;/p&gt;
&lt;p&gt;It's also possible that some of the assumptions I've made about the Swift
language or the SpriteKit framework are actually wrong. Please remember that I
am still a beginner and take what I say with a grain of salt.&lt;/p&gt;
&lt;h2&gt;The Swift Language&lt;/h2&gt;
&lt;p&gt;If you don't know how to program at all, I don't know how well this will work
for you. I already know several language, especially Python, so my experience
derives from that.&lt;/p&gt;
&lt;p&gt;First, read through the
&lt;a href=&quot;https://developer.apple.com/swift/resources/&quot;&gt;Swift language guide&lt;/a&gt;. If you
have XCode 6, you can read it interactively as a Playground. I only have read
through the first part so far, which gives a high-level overview of the
language.&lt;/p&gt;
&lt;p&gt;The Swift language is actually quite easy to learn, especially if you already
know a high-level language like Python.  A few important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; seem a bit confusing.  The difference is actually quite
  simple: &lt;code&gt;var&lt;/code&gt; denotes a variable that can change and &lt;code&gt;let&lt;/code&gt; denotes a
  variable that cannot.  You could in theory just use &lt;code&gt;var&lt;/code&gt; for everything,
  but &lt;code&gt;let&lt;/code&gt; lets the compiler spot mistakes for you, and it also probably lets
  it make your code faster.  If you intend to never change the value of a
  variable, use &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swift uses type inference, meaning that you usually don't need to specify
  types. But when you do, you do so by putting a &lt;code&gt;:&lt;/code&gt; after the variable name,
  like &lt;code&gt;var a: Int = 2&lt;/code&gt; or &lt;code&gt;func f(a: Int)&lt;/code&gt;.  The exception is the return type
  of a function, which uses the arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; (if you are familiar with Python 3
  type annotations, the syntax is exactly the same), &lt;code&gt;func f(a: Int) -&amp;gt; Int&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swift uses &lt;code&gt;?&lt;/code&gt; after a type name to indicate that a variable could be its
  given type, or &lt;code&gt;nil&lt;/code&gt;. If you are familiar with Haskell, this is like the
  Maybe monad.  I know very little Haskell, so I don't know if Swift's
  implementation of &lt;code&gt;?&lt;/code&gt; is truly a Monad.&lt;/p&gt;
&lt;p&gt;Roughly speaking, in many circumstances, you don't know if a variable will
actually be the given type or not. A good example of this is with
dictionaries. &lt;code&gt;var a: [String: Int]&lt;/code&gt; creates a dictionary that maps
strings to integers. If you manipulate this dictionary, and then access a
key from it, like &lt;code&gt;a[b]&lt;/code&gt;, there is no way for the compiler to know if that
key will really be in the dictionary. If the key is in the dictionary, you
will get the value of that key. Otherwise, you will get &lt;code&gt;nil&lt;/code&gt;. Hence, the
type of &lt;code&gt;a[b]&lt;/code&gt; is &lt;code&gt;Int?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Swift uses &lt;code&gt;!&lt;/code&gt; to indicate that the value is not &lt;code&gt;nil&lt;/code&gt;, which tells the
compiler to compile code that doesn't check for that case.&lt;/p&gt;
&lt;p&gt;For the most part, you can ignore this as well, at least when you
start. Just write code as you would, let XCode add in the types for you, and
only worry about types if the compiler tells you something is wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Swift functions often require the parameters be named, for instance, you
  have to write &lt;code&gt;CGSize(width: 1, height: 2)&lt;/code&gt; instead of just &lt;code&gt;CGSize(1,
  2)&lt;/code&gt;. This is both for clarity (the former is much easier to read if you
  aren't familiar with the API for &lt;code&gt;CGSize&lt;/code&gt;), and because Swift allows
  polymorphism, i.e., you can define different initializers for the same class
  with different type signatures. For example, &lt;code&gt;CGRect&lt;/code&gt; can be initialized as
  &lt;code&gt;CGRect(origin: CGPoint, size: CGSize)&lt;/code&gt; or &lt;code&gt;CGRect(x: Int, y: Int, width:
  Int, height: Int)&lt;/code&gt;. This can lead to ambiguities in some cases unless you
  explicitly tell the compiler which version to use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've found Swift to be a very strict language. I don't mean this in the sense
described by
&lt;a href=&quot;https://en.wikipedia.org/wiki/Strict_programming_language&quot;&gt;this Wikipedia article&lt;/a&gt;. What
I mean is that Swift typically only lets you do things one way.  This is
similar to Python's &quot;one way to do it,&quot; except Swift enforces this at the
language level.&lt;/p&gt;
&lt;p&gt;A nice example of this is that I rarely get a warning from the Swift compiler.
Just about every message I've gotten from the compiler has been an error. The
difference is that the program will still compile and run with a warning. This
is different from C, C++, and Objective-C, which have many warnings that the
compiler will still compile with. These warnings usually are for things like
an incorrect pointer type. Since there is really only one type in C, the
integer (because all data in memory is just integers), the program can still
run even if you mix your types up a bit.&lt;/p&gt;
&lt;p&gt;There are also many cases where Swift seems maybe too strict about things,
although it's clear that it is doing it to try to stray people away from
common mistakes and antipatterns. For example, the condition of an &lt;code&gt;if&lt;/code&gt;
statement in Swift must always be of type &lt;code&gt;Bool&lt;/code&gt;. Unlike languages like
Python, things do not have implicit boolean values. &lt;code&gt;if 1&lt;/code&gt; is a syntax
error. So is &lt;code&gt;if a&lt;/code&gt; unless &lt;code&gt;a&lt;/code&gt; is type &lt;code&gt;Bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This ends up not being a big problem. The things Swift forces you to do feel
like good programming practices.  This is not unlike how Python &quot;forces&quot; you
to keep your code indented correctly.  It feels very different from a language
like Java, where the things that you are forced to do all feel like they are
there simply to make the compiler writer's life easier.  And indeed, unlike
Java and Objective-C and much like Python, Swift code requires very little
boilerplate.  There are no header files for instance.&lt;/p&gt;
&lt;p&gt;So all said and done, I like Swift. I don't like it as much as Python (I also
don't have my head wrapped around it as much as Python). But it's far better
than Objective-C, and that's what matters. Frankly, my biggest gripe with it
is the ubiquitous use of CamelCasing and two letter prefixing (&lt;code&gt;NS&lt;/code&gt;, &lt;code&gt;CG&lt;/code&gt;,
&lt;code&gt;SK&lt;/code&gt;; I don't know if there's a name for this) in the API. I adamantly refuse
to do this with my own variables, because I believe CamelCase reduces
readability over underscore_casing. I like the Python convention to use
underscore_casing for variables, functions, and methods, and CamelCase for
classes (because classes are kind of like proper nouns, and CamelCase is as
close to Capitalization as possible in programming language conventions).&lt;/p&gt;
&lt;h2&gt;Learn to read Objective-C&lt;/h2&gt;
&lt;p&gt;While it is not necessary to write Objective-C any more, it is a good idea to
know how to read it. The reason is that a lot of good resources on the
internet are still in Objective-C (also a lot of Apple's example
documentation). The API names are the same, so this mainly boils down to
understanding how to convert the basic syntax to Swift. Reading the section of
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Objective_C#Syntax&quot;&gt;Wikipedia article&lt;/a&gt; on
the syntax of Objective-C should be enough.&lt;/p&gt;
&lt;p&gt;For instance&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationInNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;would be translated to&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationInNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Use XCode&lt;/h2&gt;
&lt;p&gt;If you are comfortable with the Swift language itself, you should get started
with a project.&lt;/p&gt;
&lt;p&gt;First off, you should use XCode to edit your code, at least to begin with,
even if you are accustomed to using another editor.  The reason is that XCode
is going to do a lot of things for you which will make your life easier and
reduce the complexity significantly as you get started.  Once you are
comfortable, you can move to another editor.&lt;/p&gt;
&lt;p&gt;Some things that XCode will do for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Autocompletion&lt;/strong&gt;: The best way to figure out the Cocoa APIs is to use the
  autocompletion. This pops up when you want to override a method in a
  subclass, create an object from an existing class, access an attribute of a
  class, or instantiate a class or call a function (remember that Swift is
  polymorphic, so it's useful to know all the possible ways to instantiate a
  class or call a function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compiler errors and warnings&lt;/strong&gt;: Swift, being a strictly typed language,
  will give you a lot of useful compiler errors. It's pretty hard to write a
  program incorrectly from a type point of view, and have it even compile.
  XCode integrates this nicely, and it even offers suggestions on how to fix
  things every once in a while (so that you can just click the button and have
  it fixed inline).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Direct interaction with the iOS Simulator&lt;/strong&gt;: One button will compile your code
  and start the simulator. If your target is Mac OS X, it will open the
  application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Clicking to the left of a line will set a breakpoint in the
  debugger.  The Swift debugger seems pretty limited right now. I wasn't able
  to get any useful information out of the variables view when I used it.  But
  in my experience using XCode in the past to debug C, its graphical debugger
  is one of the best.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration settings&lt;/strong&gt;: If you click on the XCode project in the files
  view (the root node of all the files), you get a view with all the different
  settings for your project. Most of these you probably won't want to change,
  but a few are important, like what devices and orientations you want to
  allow, what operating system versions you want to support, and the name and
  version of your project.  Editing these outside of XCode requires editing an
  XML file, which is no fun.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, any editor can potentially do these things, and I'm really looking
forward to the point where I can just use Emacs to edit Swift code, as the
XCode editor as an editor is quite annoying.  XCode was the editor that I used
before I switched to using Emacs, and it's not gotten much better. There are
still several visual glitches in the editor environment, especially with the
scope coloring and syntax highlighting. You can edit the keyboard shortcuts in
the XCode setting to get some things the way you like them (although I found
that trying to set TAB to autoindent did not work). You can also use a tool
like &lt;a href=&quot;https://pqrs.org/osx/karabiner/&quot;&gt;Karabiner&lt;/a&gt; (previously
KeyRemap4MacBook) to enable Vim or Emacs editor shortcuts everywhere
(including XCode). It doesn't help that XCode 6 is still in beta (at some
point the editor backend died and all syntax highlighting and tab completion
stopped working; I managed to fix it by removing a spurious &lt;code&gt;!&lt;/code&gt; in the code)&lt;/p&gt;
&lt;h2&gt;The iOS Simulator&lt;/h2&gt;
&lt;p&gt;One disappointing thing that I learned is that you cannot run any iOS program
you write on an iOS device unless you are in the paid developer program (or if
you Jailbreak and are willing to go through some hoops). The iOS developer
program costs $100 a year, and since I'm not sure yet how far I am going to go
with this, I am holding off on it.&lt;/p&gt;
&lt;p&gt;The only other option then is to run on the simulator. The simulator is fine,
the only issue is that there are limits to how you can simulate a touch screen
on a computer with a mouse.&lt;/p&gt;
&lt;p&gt;A few things to note about the simulator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are several things you can do with the &quot;hardware&quot; from the hardware
  menu, such as rotating the device or pressing the home button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's worth remembering the keyboard shortcut for pressing the home button,
  ⇧⌘H, as you can press it twice in quick succession just like on a real
  device to open the task manger. You can then drag your app up to completely
  reset it, without having to restart the simulator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The retina iPad is taller than your display, even if you have a 15&quot; retina
  display. So be aware that you will need to scroll up and down to see it
  all. Alternately, you can use a smaller device, like an iPhone, or rotate it
  to landscape, where it all fits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The only way to do multitouch is to hold down the Option key. This will
  create two fingers.  However, it's quite limited as the two fingers are
  always centered around the center of the screen. Therefore if you want to
  test multitouching two objects, you'll have to position them symmetrically so
  that you can grab them both.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting started with a project&lt;/h2&gt;
&lt;p&gt;The best way to start is to start a template project with XCode. I personally
started with a SpriteKit game for iOS. This created a basic template &quot;Hello
World&quot; Swift file with the basic &lt;code&gt;SKScene&lt;/code&gt; subclass. Go ahead and compile and
run this in the simulator to see what it does.&lt;/p&gt;
&lt;p&gt;There are four important methods of &lt;code&gt;SKScene&lt;/code&gt; which you will want to override,
&lt;code&gt;didMoveToView&lt;/code&gt;, &lt;code&gt;touchesBegan&lt;/code&gt;, &lt;code&gt;touchesEnded&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt;. &lt;code&gt;didMoveToView&lt;/code&gt;
is the initializer for the scene.  Anything that should be set up and appear
from the very beginning should go there. &lt;code&gt;touchesBegan&lt;/code&gt; and &lt;code&gt;touchesEnded&lt;/code&gt; are
called when a finger touches the screen and when it leaves the screen,
respectively. Remember always that iOS devices are multitouch devices, so
these events can happen concurrently, and there can be multiple touches
happening at once.  The first argument to these methods is a set of touches,
which you should iterate over to perform actions (the &quot;Hello World&quot; example
shows how to do this). Finally, the &lt;code&gt;update&lt;/code&gt; method is called every time the
scene is updated, at each &quot;frame&quot; essentially.&lt;/p&gt;
&lt;p&gt;There are other methods, for instance, &lt;code&gt;touchesMoved&lt;/code&gt;. However, I discovered
that you don't actually want to use &lt;code&gt;touchesMoved&lt;/code&gt; to do what you would think
you'd use it for, namely, to move stuff around. The reason is that there is no
easy way to sync up multitouches between &lt;code&gt;touchesBegan&lt;/code&gt; (where you know what
thing the finger started on) and &lt;code&gt;touchesMoved&lt;/code&gt; to move it around. It works
well for a single touch, but if you want to be able to move multiple things
around at once (which I highly recommend, as it leads to a much nicer user
experience), you have to do things a little differently, as I'll explain
below.&lt;/p&gt;
&lt;h2&gt;Adding some objects to your environment&lt;/h2&gt;
&lt;p&gt;There are a lot of classes to create various objects of various shapes. I
started with &lt;code&gt;SKSpriteNode&lt;/code&gt;, which creates a simple square, because I wanted
to play around with touch events.&lt;/p&gt;
&lt;p&gt;I started out with four sprites (yes, it would be better to put these in an
array, and probably abstract them to a method):&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKSpriteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKSpriteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKSpriteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKSpriteNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;These lines go at the class level. This lets them be accessed from within any
method of the class.&lt;/p&gt;
&lt;p&gt;One thing I could not figure out how to do was how to access class variables
from within other class variables.  In Python, you can do&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;But in Swift, if you do&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;it tells you that &lt;code&gt;Test.Type does not have a member named 'a'&lt;/code&gt; on the &lt;code&gt;let b =
a + 1&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;You may have to use properties with getters and setters in this case, which I
didn't feel like fooling with. The result is that I did not abstract out the
&lt;code&gt;CGSize(width: 30, height: 30)&lt;/code&gt; into a common variable.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;didMoveToView&lt;/code&gt; method then becomes&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didMoveToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;self.addChild&lt;/code&gt; is the most important method here, as it actually puts the
sprite in the main view. If you forget this line, none of the sprites will
show up.&lt;/p&gt;
&lt;p&gt;If you run this, you will only see the yellow box, because you put them all on
top of one another in the center of the view.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;500&quot; src=&quot;http://asmeurer.github.io/galleries/swift-game-1.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Adding Basic Physics&lt;/h2&gt;
&lt;p&gt;We could change the positions so that they do not overlap, but the option I
went with was to play around with the physics a little. &lt;code&gt;SpriteKit&lt;/code&gt; has a nice
2D physics engine built in, and it's quite easy to use.&lt;/p&gt;
&lt;p&gt;So my final &lt;code&gt;didMoveToView&lt;/code&gt; was&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;didMoveToView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Setup your scene here */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGRectGetMidY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physics_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKPhysicsBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectangleOfSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;physics_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;affectedByGravity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;physics_body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsRotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;physicsBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physics_body&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;For each sprite, I create an &lt;code&gt;SKPhysicsBody&lt;/code&gt; with the exact same size as the
&lt;code&gt;SKSpriteNode&lt;/code&gt;s (there's probably a more direct way to do this), and attach it
to that node. The &lt;code&gt;affectedByGravity&lt;/code&gt; property is important. If you don't set
it to &lt;code&gt;false&lt;/code&gt;, all the objects will fall off the bottom of the screen. I
disabled &lt;code&gt;allowsRotation&lt;/code&gt; because I wanted my squares to stay
upright. Otherwise when when the squares hit one another they will rotate in
space.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;SceneKit&lt;/code&gt; will prevent the squares from overlapping with one another, even
if we put them on top of each other as we have done.&lt;/p&gt;
&lt;p&gt;So now when we start the simulator, we see&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;500&quot; src=&quot;http://asmeurer.github.io/galleries/swift-game-2.png&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Making the squares movable&lt;/h2&gt;
&lt;p&gt;Now, let's make it so that we can move these squares around.  The correct way
to do this took me some time to figure out.  I finally got some hints from
&lt;a href=&quot;http://eppz.eu/blog/spritekit-drag/&quot;&gt;this site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The key thing here is that the &lt;code&gt;UITouch&lt;/code&gt; objects remain the same objects for
the duration of the touch. Their position is updated when the touch
moves. Hence, you just need to associate each touch with the node that was
touched when the touch began, and move the node to the position of that touch
with each update.&lt;/p&gt;
&lt;p&gt;To start, we will create a dictionary on the class mapping touches to nodes&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UITouch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then, in the &lt;code&gt;touchesBegan&lt;/code&gt; method, map every touch to the node that it
touches.&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;touchesBegan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Called when a touch begins */&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationInNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITouch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodeAtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;as UITouch&lt;/code&gt; part is needed because the compiler only knows that touch is
&lt;code&gt;AnyObject&lt;/code&gt;. This was one of the things that was helpfully suggested by the
compiler, so I did not really need to know what I was doing to get it right.&lt;/p&gt;
&lt;p&gt;Note that even if you touch the background behind the squares, you are still
touching a node, namely, the &lt;code&gt;GameScene&lt;/code&gt; node itself (the node for the class
you are working on).  This is a very important observation, as it will tell us
how to get the right position for the node when we update it. It also means
that we should keep track of which nodes we actually want to be moved by the
touch. Trying to move the &lt;code&gt;GameScene&lt;/code&gt; node is ignored, at leads to a lot of
console logs, so we should avoid it.&lt;/p&gt;
&lt;p&gt;Next, let's write the &lt;code&gt;touchesEnded&lt;/code&gt; method. This method is simple. If a touch
ends (the finger is removed from the screen), we should remove it from the
&lt;code&gt;selected&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;touchesEnded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UITouch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;To delete an item from a dictionary in Swift, just set it to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, finally, we need to write the &lt;code&gt;update&lt;/code&gt; method to move the node to the
current position of the touch.&lt;/p&gt;
&lt;p&gt;The simplest way to do this is&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Called before each frame is rendered */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationInNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note that we only modify the position for the four sprite nodes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;touch.locationInNode(self)&lt;/code&gt; part took me a long time to figure out. There
are other methods, like &lt;code&gt;touch.locationInView(nil)&lt;/code&gt;, but this does something
very strange where the the horizontal axis was doubled (moving the touch one
inch moved the object two inches), and the vertical axis was inverted. If
someone knows what was going on there, please let me know.&lt;/p&gt;
&lt;p&gt;Modifying the position directly is nice, but it's nice to play around a little
bit with a third thing from SpriteKit, actions.&lt;/p&gt;
&lt;p&gt;What we will do instead of setting the position of the node is to tell
SpriteKit to move the node there in a certain amount of time. If we make this
time small enough, like &lt;code&gt;0.01&lt;/code&gt; seconds, it will appear to act exactly the
same. If we up this time, there will be a smooth &quot;lag&quot; where the node catches
up to the touch. Because the movement always happens in the same amount of
time, it will move faster if the finger is farther away. This gives the
squares a nice &quot;frictioney&quot; effect with some springiness to it, which is quite
nice.&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CFTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Called before each frame is rendered */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationInNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SKAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeatAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;There are many other actions we can perform, like rotations and color
changes.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here is an example of the movement. You can see it works even with
multitouch.  You can also see the collision physics cause the other squares to
move out of the way when another square hits them.&lt;/p&gt;
&amp;lt;video autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; src=&quot;http://asmeurer.github.io/SpriteKit-Example.mp4&quot; width=&quot;500&quot;&amp;gt;
  Your browser does not support the video tag.
&amp;lt;/video&amp;gt;

&lt;p&gt;Here you can see the movement lag caused by using &lt;code&gt;SKAction.moveTo&lt;/code&gt; with
&lt;code&gt;duration: 0.1&lt;/code&gt; (note that the mouse itself jumps a bit at the beginning, but
this is due to lag in the recording).&lt;/p&gt;
&amp;lt;video autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; src=&quot;http://asmeurer.github.io/SpriteKit-Example-2.mp4&quot; width=&quot;500&quot;&amp;gt;
  Your browser does not support the video tag.
&amp;lt;/video&amp;gt;

&lt;p&gt;I have uploaded the full code to
&lt;a href=&quot;https://github.com/asmeurer/GameTest/blob/blog/GameTest/GameScene.swift&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This isn't exactly a &quot;game&quot;, but it does lay down the foundations for what you
would need to write a game in Swift using SpriteKit.  At least for me, it
shows me the technical basics of how to write some games that I had thought
about, which mostly involve making shapes and moving them around the screen.&lt;/p&gt;






















&lt;/div&gt;</description>
	<pubDate>Sun, 17 Aug 2014 16:31:11 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: More work on Sparse Matrices</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=391</guid>
	<link>https://thilinaatsympy.wordpress.com/2014/08/15/more-work-on-sparse-matrices/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;During this week I completed more functionalities regarding to CSR Matrices. I mainly implemented a generalized binary operation between two matrices. It’s similar to the SciPy function &lt;a href=&quot;https://github.com/scipy/scipy/blob/master/scipy/sparse/sparsetools/csr.h#L745&quot;&gt;csr_binop_csr_canonical&lt;/a&gt;. This method applies a given binary function, &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=binop&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;binop&quot; class=&quot;latex&quot; title=&quot;binop&quot; /&gt; to each corresponding elements of the two matrices which are given as input arguments, i.e. &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=%28i%2C+j%29%5E%7Bth%7D&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;(i, j)^{th}&quot; class=&quot;latex&quot; title=&quot;(i, j)^{th}&quot; /&gt; entry of the output matrix is equal to &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=binop%28a%2C+b%29&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;binop(a, b)&quot; class=&quot;latex&quot; title=&quot;binop(a, b)&quot; /&gt; where &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=a&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;a&quot; class=&quot;latex&quot; title=&quot;a&quot; /&gt; and &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt; are the &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=%28i%2C+j%29%5E%7Bth%7D&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;(i, j)^{th}&quot; class=&quot;latex&quot; title=&quot;(i, j)^{th}&quot; /&gt; entries of input matrices respectively.&lt;/p&gt;
&lt;p&gt;Also, I implemented &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=get%28%29%2C+set%28%29&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;get(), set()&quot; class=&quot;latex&quot; title=&quot;get(), set()&quot; /&gt; methods for CSRMatrix class. It took me while to get this completely right as I was discarding some of the possible cases.&lt;/p&gt;
&lt;p&gt;I originally planned to start writing python wrappers but I couldn’t do it as I was a bit busy with a project in my university. But I hope to get started on this in upcoming week. Although the GSoC is officially over, I will work on the project for two additional weeks as I took a two weeks break during the programme.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/391/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/391/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=391&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 15 Aug 2014 13:49:34 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 10 and 11</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=107</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-10-and-11/</link>
	<description>&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;This GSoC post has been long pending, but to be honest the last two weeks have been simply been so hectic that I haven’t managed to find the time to write a lot of code, or blog about it. One of the major things I have worked on is greatly improving the resolution code I wrote earlier. This revision fixes a small bug and greatly improves the speed of the resolution process. Initially if a clause was not entailed by the KB, then it took almost forever for the method to return False. In the scenario where it was entailed, it was still performing lots of useless computations. This has been completely removed from the new resolution, and the method quite efficiently gives the correct value. The other major task has been to fully integrate the Constants class. Now, any non-boolean object that will internally get converted to a Constant and the user can be simply put in strings and numbers and the system will still play nice with it. Except for this, I have finished allSAT (all models for a given formula). I will be sending out a PR for this as soon as I finish testing it properly. I think that is all for now.&lt;/p&gt;
&lt;p&gt;Bye!!!&lt;/p&gt;</description>
	<pubDate>Tue, 12 Aug 2014 15:09:50 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC'14 progress: Week 12</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-2016507761870075517</guid>
	<link>http://blog.sudhanshumishra.in/2014/08/gsoc14-progress-week-12.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Last week I worked on utility functions which has been merged into the master.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Currently I am working on converting my incopmlete PR related to geometrical optics in 3D into 2D. Creating these classes in 3D will make it difficult to use/extend. I referred to some books and I never saw use of too much 3D in their illustrations. Depending on the use cases we can consider adding it later after gsoc. As of now optics module can not be called complete and hence I'll be working on it post gsoc.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Few other things which I would like to complete this week are as follows:&lt;/div&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;Interference&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Diffraction&lt;/li&gt;&lt;li style=&quot;&quot;&gt;IPython notebooks for examples&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 11 Aug 2014 11:27:11 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Thilina Rathnayake: Sparse Matrices</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=386</guid>
	<link>https://thilinaatsympy.wordpress.com/2014/08/11/sparse-matrices/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;I am writing a blog post for GSoC after three weeks. I couldn’t work on the project for two weeks as I participated in a competition. However I am back again and started working again. Now, I am mainly concerned about finishing my work with Sparse Matrices. Then we can write some wrappers and do some benchmarks.&lt;/p&gt;
&lt;p&gt;We decided to use SciPy’s sparse matrices code and I have ported most of the important functionalities. I created a &lt;a href=&quot;http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.sparse.csr_matrix.html#scipy.sparse.csr_matrix&quot;&gt;CSRMatrix&lt;/a&gt; class and created a method to create a CSRMatrix from a normal COO matrix. I ported the methods for testing the canonical form and sparse matrix multiplication.  Also, I implemented three methods mainly to be used in extracting diagonal elements and scaling.&lt;/p&gt;
&lt;p&gt;I am going to implement binary operations with CSR matrices during the coming week and also want to get started with writing wrappers so we can use the Matrix classes from python and SymPy.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/386/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/386/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=386&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 11 Aug 2014 08:08:45 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: GSoC Week 12: Wrapping Up</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week12/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week12/</link>
	<description>&lt;p&gt;This week was primarily focussed on adding the remaining special classes I had proposed in my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Sushant-Hiray:-Extending-Elementary-Functions-CSymPy&quot;&gt;proposal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The special function module primarily included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Zeta function&lt;/li&gt;
  &lt;li&gt;Gamma function&lt;/li&gt;
  &lt;li&gt;Tensor function&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;
&lt;p&gt;In continuing with interfacing ARB from the previous week, &lt;a href=&quot;https://github.com/sympy/csympy/pull/265&quot;&gt;PR 265&lt;/a&gt; was also meant to add the Zeta Module. The Zeta Module primarily comprised of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reimann-Zeta&lt;/li&gt;
  &lt;li&gt;Dirichlet_Eta&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PR was merged after Ondrej reviewed the ARB interfacing and its use case in Bernoulli number and the Zeta Module.
&lt;br /&gt;&lt;br /&gt; 
After the Zeta Module, I sent a pull request, &lt;a href=&quot;https://github.com/sympy/csympy/pull/267&quot;&gt;PR 267&lt;/a&gt; to implement the Tensor Module. The Tensor Module primarily comprised of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;KroneckerDelta&lt;/li&gt;
  &lt;li&gt;LeviCivita&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;KroneckerDelta&lt;/code&gt; makes uses of the Assumptions Module to define some more properties such as &lt;code&gt;is_above_fermi&lt;/code&gt; &lt;code&gt;is_below_fermi&lt;/code&gt;. These were not implemented as we donot have assumptions module yet in CSymPy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LeviCivita&lt;/code&gt; accepts variable number of arguments, so it is implemented via a vector arg (&lt;code&gt;vec_basic&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The final module to be added is the Gamma Module.
It comprises of :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gamma&lt;/li&gt;
  &lt;li&gt;Upper Gamma&lt;/li&gt;
  &lt;li&gt;Lower Gamma&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/csympy/pull/269&quot;&gt;PR 269&lt;/a&gt; is implementing the Gamma Module. Currently only &lt;code&gt;Gamma&lt;/code&gt; is implemented.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Complete the 2 small classes and get them reviewed!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Mon, 11 Aug 2014 07:45:00 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: Week 11 and Week 12: Wrapping up the project</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-11.html</guid>
	<link>https://hargup.github.io/posts/week-11.html</link>
	<description>&lt;p&gt;The GSoC is about to end. We have the suggested deadline tomorrow and the firm
deadline next week. We are wrapping up the project now, cleaning up the code,
writing the documentation and turning the project into a usable state.
Since the new solvers cannot be called compelete I have to make sure that the
next person working on it can pick it up easily. I plan come up with a post with
the summary of the work that was done, that challenges we faced and thing that
needs to done and how can they be tackled.&lt;/p&gt;</description>
	<pubDate>Sun, 10 Aug 2014 12:09:01 +0000</pubDate>
</item>
<item>
	<title>Kundan Kumar: GSoC week 11-12: Concluding Ideas</title>
	<guid isPermaLink="true">http://kundankumar185.wordpress.com/2014/08/10/gsoc-week-11-12-concluding-ideas/</guid>
	<link>http://kundankumar185.wordpress.com/2014/08/10/gsoc-week-11-12-concluding-ideas/</link>
	<description>&lt;p&gt;Phew, that was close I just had full week of written tests by recruiting companies. Well, not good for me. I suck at electrical and that too when we have to study ancient electrical subjects which has no longer any use in this modernized world. My college, maybe all Indian colleges, lag behind in electrical subjects. Though I always find online courses of electrical in U.S colleges fascinating, Oh but I am in India, can’t help with it. Let’s see how good I will do in GRE and TOEFL, maybe after getting in better colleges I will get to discover more.&lt;/p&gt;
&lt;p&gt;Oh, I got driven by emotions, this is my GSoC blog so I will start with concluding my work I have done till now. Well before I conclude I will admit I wasn’t doing much work from last few days. In my 10th and 11th week I just had my checksysodesol &lt;a href=&quot;https://github.com/sympy/sympy/pull/7746&quot;&gt;PR&lt;/a&gt; merged. And two PRs for &lt;a href=&quot;https://github.com/sympy/sympy/pull/7831&quot;&gt;doc&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/sympy/pull/7703&quot;&gt;nonlinear&lt;/a&gt; one are still behind. In the beginning of next week I will complete that and get it merged. This week I started the doc PR to complete all documentation and will add few tests to make coverage_report of ode to increase which is 85% now. I will discuss on nonlinear one with Sean and Tim about what modification is required.&lt;/p&gt;
&lt;p&gt;My work in GSoC is on system of ODEs. In this I included linear system of ODEs for first order of two, three and `n` equations and second order of two and three equations and non-linear system of ODEs for first order of two and three equations. In order to solve these I modified `dsolve` function to incorporate solving these equations, made a new function `classify_sysode` to classify these system of ODEs and also made a function `checksysodesol` to check for solutions by substituting those solutions in equations and simplifying to get zero.&lt;/p&gt;
&lt;p&gt;As this will be the last official blog for GSoC, as Aaron mailed, I would like to say few things here, offcourse we will be on gitter. This is the best experience of work I had in life. Well working continuously without having any care of anything else, it just feels awesome. I learned a lots and lots of stuffs from Sean, Tim, Aaron, Smith, Ondrej and some from Harsh and Sudhanshu too. I just started working on Sympy from 27 Feb, that was too late &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:)&quot;&gt;:)&lt;/span&gt;, and then I didn’t knew git, github, opensource and many more things, just knew continuously working hard just pave the way to success but not without you guys. Open source is a great place to learn new stuffs and even better due to interaction with lots of people from other places. I will always be contributing to open source. It has lot of free software which otherwise would have to hard to buy in college life. This is going to my most memorable summer.&lt;/p&gt;
&lt;p&gt;Thanks you guys!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/127/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/127/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=127&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 10 Aug 2014 06:40:58 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-31986856554930244</guid>
	<link>http://gsocblog.blogspot.com/2014/08/i-returned-to-my-college-last-week.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I returned to my college last week. I couldn't do much for a few days as a result. Also a late blog as a consequence.&lt;br /&gt;&lt;br /&gt;I tried solving the bugs presented in my 3 PR's. &lt;br /&gt;&lt;br /&gt;In the formal_series PR,&lt;br /&gt;I implemented the necessary `_eval_` methods&lt;br /&gt;- _eval_derivative&lt;br /&gt;- _eval_integral&lt;br /&gt;- _eval_as_leading_term&lt;br /&gt;- as_ordered_terms&lt;br /&gt;There is still the problem in test_args which fails because args of Stream class is not a Basic instance. It is a generator object.&lt;br /&gt;I also added more test cases.&lt;br /&gt;&lt;br /&gt;In the special asympt PR,&lt;br /&gt;I have a few bugs which I'm not been able to solve.&lt;br /&gt;Suppose _eval_nseries returns expansion of the form:-&lt;br /&gt;s = (1 + 1/x + 1/x**2 + ... O(1/x**6, (x, oo)))*(exp(-x)/x) then it fails.&lt;br /&gt;getO fails on s as it is not an Add instance. Then it tried to append it with appropriate Order term, so&lt;br /&gt;s + O(1/x**n, (x, oo)) = O(1/x**n, (x, oo)) which is wrong.&lt;br /&gt;&lt;br /&gt;I'll try fixing all these bugs in the last few days and get all the PRs ready for merge.&lt;br /&gt; &lt;/div&gt;</description>
	<pubDate>Sun, 03 Aug 2014 20:03:11 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Sushant Hiray: GSoC Week 11: Interacing ARB</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week11/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week11/</link>
	<description>&lt;p&gt;This week was primarily focussed on interfacting &lt;a href=&quot;http://fredrikj.net/arb/&quot;&gt;ARB&lt;/a&gt; library with CSymPy.&lt;/p&gt;

&lt;p&gt;Arb is a C library for arbitrary-precision floating-point ball arithmetic, developed by &lt;a href=&quot;http://sushant-hiray.in/fredrik.johansson@gmail.com&quot;&gt;Fredrik Johansson&lt;/a&gt;. It supports efficient high-precision computation with polynomials, power series, matrices and special functions over the real and complex numbers, with automatic, rigorous error control.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;
&lt;p&gt;I opened &lt;a href=&quot;https://github.com/sympy/csympy/pull/265&quot;&gt;PR 265&lt;/a&gt; to interfact ARB with CSymPy. There were some initial hiccups with using ARB for C++. I opened up an issue &lt;a href=&quot;https://github.com/fredrik-johansson/arb/issues/21&quot;&gt;arb/#21&lt;/a&gt; which was very promptly fixed by &lt;a href=&quot;https://github.com/fredrik-johansson&quot;&gt;@fredrik-johansson&lt;/a&gt; with a minor patch.
&lt;br /&gt;&lt;br /&gt;
Since we were using an earlier release version 2.1.0 without this patch, &lt;a href=&quot;https://github.com/fredrik-johansson&quot;&gt;@fredrik-johansson&lt;/a&gt; willingly released a new version 2.2.0 so that we could interface immediately.
&lt;br /&gt;&lt;br /&gt;
I was particularly in twaeaking around with CMAKE to interface ARB. I read quite a bit about it and managed to get a basic version running. But there were quite a few issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;flint and arb were not getting linked&lt;/li&gt;
  &lt;li&gt;arb was not searching &lt;code&gt;/usr/local/include/flint&lt;/code&gt; for appropriate files of flint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
I put some minor hacks to make sure arb was linked and was able to find the files appropriately.
Since Ondrej was out this week, he wasn’t able to suggest any better ways yet. Isuru Fernando helped me out with a much cleaner way to link the arb and flint library.
&lt;br /&gt;&lt;br /&gt;
I also added the Zeta Module comprising of &lt;code&gt;zeta&lt;/code&gt; and &lt;code&gt;dirichlet_eta&lt;/code&gt; functions.
The &lt;code&gt;zeta&lt;/code&gt; function needs &lt;code&gt;harmonic&lt;/code&gt; to be implemented, which isn’t implemented yet so for now, only minor simplifications are made.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Get the current PR merged, add a new PR for the Tensor Module.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Sun, 03 Aug 2014 14:22:00 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week 11: A major bug fix, and printing</title>
	<guid isPermaLink="true">http://codesachin.wordpress.com/2014/08/03/gsoc-week-11-a-major-bug-fix-and-printing/</guid>
	<link>http://codesachin.wordpress.com/2014/08/03/gsoc-week-11-a-major-bug-fix-and-printing/</link>
	<description>&lt;p&gt;Jim brought my attention to a very crucial bug in my work this week. Well, SymPy now automatically detects folders to test by looking at the &lt;code&gt;__init__.py&lt;/code&gt; files. That is, a given folder in the SymPy code directory would _only_ be tested if it has &lt;code&gt;__init__.py&lt;/code&gt;. Since I hadn’t put any such file in _sympy/vector/tests_, they were being skipped till now! Thank God this got fixed.&lt;/p&gt;
&lt;p&gt;I started out this week with the seemingly ‘easy’ task of implementing different kinds of printing functionalities for sympy.vector. Well, the basic methodology of doing things is pretty simple, if you just follow the documentation in the _sympy.printing.printer_ file. It will tell you all you need to know about – either implementing a new printer, or adding custom code for printing of your class (to an existing printer).&lt;/p&gt;
&lt;p&gt;Some things I had to improve/word around-&lt;/p&gt;
&lt;p&gt;1. BaseScalars had to be handled differently from BaseVectors, since BaseScalars are a part of other Exprs (that may be measure numbers in vectorial expressions), and they have their own dedicated printing methods. Hence, I had to implement the &lt;code&gt;_latex&lt;/code&gt; and &lt;code&gt;_pretty&lt;/code&gt; methods in BaseScalar itself.&lt;/p&gt;
&lt;p&gt;2. The pretty _as well as_ latex printing for _both_ Vectors and Dyadics with a single &lt;code&gt;_print_BasisDependent&lt;/code&gt; method in the respective printers.&lt;/p&gt;
&lt;p&gt;3. I used the printing code in _sympy.physics.vector_ as reference, though quite a few things had to be changed keeping in mind the inheritance from Expr, the structure and nature of the args being different, etc.&lt;br /&gt; I did improve on a few things. _physics.vector_’s pretty printing messes up when dealing with vectors whose measure numbers have varying ‘heights’.&lt;/p&gt;
&lt;p&gt;Overall, it was quite a learning experience and tricky coding – to implement printing, compared to my initial impression of it being a boring and tedious job.&lt;/p&gt;
&lt;p&gt;Well, I have implemented all the requried methods and tests (all of which pass). I have pushed them to my third GSoC PR, so thats in line. Hopefully, the dyadics PR will soon show all tests passing, after which Jason or I will get it merged. It will add the OOP structure, and the dyadic code, as well as fix some crucial bugs.&lt;/p&gt;
&lt;p&gt;A demo of the new printing implementations for a tedious vector expression-&lt;/p&gt;
&lt;p&gt;Assume N is a &lt;code&gt;CoordSysCartesian&lt;/code&gt; instance. Then,&lt;br /&gt; &lt;code&gt;(a**2 + b)*N.i + (Integral(f(b)))*N.k&lt;/code&gt; pretty-prints as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt; u'\u239b 2 \u239e N_i + \u239b\u2320 \u239e N_k\n\u239da + b\u23a0 \u239c\u23ae f(b) db\u239f \n \u239d\u2321 \u23a0 '&lt;br /&gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and LaTeX-prints as-&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt; (a^{2} + b)\mathbf{\hat{i}_{N}} + (\int f{\left (b \right )}\, db)\mathbf{\hat{k}_{N}}&lt;br /&gt; &lt;/code&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/25/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/25/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=25&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 02 Aug 2014 21:35:05 +0000</pubDate>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week 10-11</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-8171418961117224700</guid>
	<link>http://geekpy.blogspot.com/2014/08/gsoc-week-10-11.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div&gt;&lt;div&gt;I could not post last week as my college started and I had to travel a bit. I did not do much work last week as per my proposal's schedule but ended up spending a lot of time refactoring the code base of the Geometry module(my work and the existing code). Here are some links to the PR's reflecting these changes.&lt;/div&gt;&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/7760&quot;&gt;7760&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/7733&quot;&gt;7773&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/7813&quot;&gt;7813&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div&gt;Apart from that I added a few methods to the Parabola class which is almost complete apart from the tests. I will add those up this weekend and send a commit.&lt;br /&gt;&lt;br /&gt;The following week I plan to work on the GeometryResult class and will try to get the pending PR's merged.&lt;br /&gt;&lt;br /&gt;That's all for now, Until then cheers!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 02 Aug 2014 05:47:20 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Jim Crist: GSoC Week 10 &amp; 11: Bogged down in details</title>
	<guid isPermaLink="false">tag:,2014-08-01:gsoc-week-10-11.html</guid>
	<link>http://jcrist.github.io/gsoc-week-10-11.html</link>
	<description>&lt;p&gt;I missed my post last week due to my research for grad school all going to hell
at the worst possible time :(. There wasn't much to report on last week, so I'm
not too perturbed. Turns out even with PRs done and tested, it still takes a
long time to get them merged and have everyone agree on them. Fortunately I
made up for it this week; as of now I am officially working on code generation!
This is behind schedule on my original timeline, but should have been expected,
as per &lt;a href=&quot;http://en.wikipedia.org/wiki/Hofstadter%27s_law&quot;&gt;Hofstadter's law&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hofstadter's Law:&lt;/strong&gt; &quot;It always takes longer than you expect, even when you
take into account Hofstadter's Law.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Things are moving ahead now, and I have some hope left that I can accomplish
(most of) everything I set out to do.&lt;/p&gt;
&lt;h2&gt;Project Status:&lt;/h2&gt;
&lt;p&gt;I set out to accomplish a number of things this summer. Here's the status of
each project goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;General Linearization Form:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linearization methods for Kane's and Lagrange's Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Done! Lagrange stuff got merged last week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation for the above:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Done? This PR is waiting for review, but I think it's good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-linearized solution methods:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nixed from the plan due to lack of interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Generation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Progress...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also accomplished a few other things, that I found necessary for my project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Refactored &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This resulted in more readable, pythonic code, and also a speed/memory
improvement. PR for this is still awaiting review.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster &lt;code&gt;subs&lt;/code&gt; function for &lt;code&gt;mechanics&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;msubs&lt;/code&gt; implementation is several orders of magnitude faster than &lt;code&gt;subs&lt;/code&gt;
for the kinds of expressions seen in &lt;code&gt;mechanics&lt;/code&gt; (even without the benefit
of cacheing that &lt;code&gt;subs&lt;/code&gt; has). This is in a PR awaiting review.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Soooo much work on the &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;oo&lt;/code&gt; issue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Still not solved for &lt;em&gt;all&lt;/em&gt; cases... :(&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODO:&lt;/h2&gt;
&lt;p&gt;There are only 3 weeks left of GSoC! In my last remaining weeks, here's what I
plan to get done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Get the Bicycle Example working:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After my work everything runs faster, results in smaller, more tractable
expressions, and uses less memory. Except for the bicycle example. For some
unknown reason I can not get this thing to result in anything except &lt;code&gt;nan&lt;/code&gt;.
This is a regress in performance (even though everything else runs better),
and needs to be solved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code generation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've already got some stuff working, and it's really exciting. More on this
below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Get all my current stuff merged:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All that works needs to get into &lt;code&gt;Sympy&lt;/code&gt;. As not everyone else is being paid
to do this, it can take some time and effort to get things through the
review process and into master, but I have hope that my remaining
contributions will eventually make it in.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think I can do it, but it'll be a stretch.&lt;/p&gt;
&lt;h2&gt;Code Generation&lt;/h2&gt;
&lt;p&gt;Sympy currently contains some facilities for code generation, but they lack
support for the matrices that are necessary for working with dynamics problems.
I hope to remedy that, as well as to make general improvements to the entire
codegen module.&lt;/p&gt;
&lt;p&gt;Code generation in sympy has three levels:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code Printers &lt;code&gt;ccode&lt;/code&gt;, &lt;code&gt;fcode&lt;/code&gt;, and the like&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These are printers that know how to print &lt;em&gt;simple&lt;/em&gt; sympy expressions using
functionality and syntax found in that language. For example, &lt;code&gt;ccode&lt;/code&gt; will
print exponents using &lt;code&gt;pow&lt;/code&gt;, which is found in the &lt;code&gt;math&lt;/code&gt; library in C.
These printers don't have any knowledge of functions, multiple statements,
or header files. They simply print a single expression out on one line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;codegen&lt;/code&gt; submodule&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This submodule contains facilities for representing generalized &lt;em&gt;routines&lt;/em&gt;,
and generating functions in various languages (currently C and FORTRAN)
that can be compiled as a library without any changes. They know about 
function and variable declarations, header files, library imports, and
multi-line statements. However, they have no idea how to make this
generated code work with python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code wrapping, usually accessed through &lt;code&gt;autowrap&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where the functionality for &lt;em&gt;wrapping&lt;/em&gt; the generated code lives.
Using the functionality provided here, one can compile and wrap generated
code, and then call it from python. The &lt;code&gt;autowrap&lt;/code&gt; function is the main
entry point, allowing for all 3 steps to be done in one call.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first thing I wanted to fix was getting code generation to work with
matrices and matrix expressions. This turned out to be harder (and more
confusing) than I expected. There is currently support for a &quot;matrix like&quot;
object named &lt;code&gt;sympy.tensor.IndexedBase&lt;/code&gt;, but I really don't understand the
purpose behind it. Reading through the code and examples though it seems to be
for representing indexed loop operations in a concise form. This unfortunately
has nothing to do with the indexed types (matrices) that I plan on
implementing.&lt;/p&gt;
&lt;p&gt;I spent a long time reading through the code and playing around with it using
pdb trying to figure out the control flow in the codegen function, and am still
a little lost. Most of what's there seems to be for supporting the &lt;code&gt;Indexed&lt;/code&gt;
operations.  After some time trying to bend them to work for matrices, I
changed plans and now am supporting &lt;code&gt;Matrix&lt;/code&gt; and &lt;code&gt;MatrixExpr&lt;/code&gt; types for matrix
operations only.  &lt;code&gt;Indexed&lt;/code&gt; types can be used elsewhere, but they shouldn't be
used for representing matrices with expressions inside them.&lt;/p&gt;
&lt;p&gt;I currently have this &quot;working&quot;, but am not happy with it yet. The current
layout of the module made for some hacky work adding in matrix support. I plan
on doing some refactoring to make this implementation cleaner. Currently, on
my codegen branch the following is supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generating C code for a matrix with expressions in each element:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Matrices are set as input-output type arguments, and are modified in place
before being returned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Passing in a &lt;code&gt;MatrixSymbol&lt;/code&gt; as an argument:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Here the plan is to use matrices to pass in a large number of arguments.
You can think of this kind of like a vector. There's another symbolic
vector type as well in Sympy (&lt;code&gt;DeferredVector&lt;/code&gt;). I may end up supporting
it, but I'm not really sure what it's for. In its current implementation,
the following works:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q_vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MatrixSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Replaces each q with elements from q_vec&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Generate a function that takes a numpy array (q) and returns expr&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This works if expr is an expression, or a matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After I clean this up, I plan to add support for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Common Subexpression Elimination (cse):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though modern compilers do this already, experimentation shows that
the large expressions generated in &lt;code&gt;mechanics&lt;/code&gt; benefit from generated code
having cse performed. This will be implemented as a boolean kwarg (default
False).  When True, sympy's &lt;code&gt;cse&lt;/code&gt; function will be run on the expression,
and the code for each subexpression will be generated, followed by the
final expression.  I actually don't think this will be too difficult to
implement, and should give some speed improvements on the compiled code (at
the cost of slower generation).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A &lt;code&gt;ctypes&lt;/code&gt; code-wrapper:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently the only code wrappers supported are &lt;code&gt;f2py&lt;/code&gt; and &lt;code&gt;cython&lt;/code&gt;, neither
of which is in the standard library. While the wrappers generated with those
functions may be more robust, a ctypes wrapper is also possible, with the
added benefit that &lt;code&gt;ctypes&lt;/code&gt; is in the standard lib.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Support for matrix expressions:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In an ideal world, I'd implement the excellent work done by Matthew
Rocklin, discussed in &lt;a href=&quot;http://pyvideo.org/video/2028/matrix-expressions-and-blaslapack-scipy-2013-pr&quot;&gt;this video from SciPy
2013&lt;/a&gt;.
The idea here is that we have some knowledge about each of the matrices
involved in an &lt;em&gt;expression&lt;/em&gt; (for example $A^{-1} B$). We may know that A is
positive definite, or symmetric, or upper triangular, etc... For each case,
there may be a faster inversion routine that we could take advantage of
rather than using a one-size-fits-all inverse function. As I don't have time
to implement support for all possible operations, and the many BLAS/LAPACK
routines that support them, I'll focus just on the inverse, as it's commonly
found in expressions in &lt;code&gt;mechanics&lt;/code&gt;. The thought is, we should be able to
run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And have code generated that solves the expression in a fast manner, without
having to symbolically find the inverse of &lt;code&gt;M&lt;/code&gt; and combine it with &lt;code&gt;F&lt;/code&gt; into
one matrix beforehand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course this is a wishlist, and it's unlikely all of this will be accomplished
in the next 3 weeks. Still, I plan to keep supporting &lt;code&gt;sympy&lt;/code&gt; after my GSoC
ends, so if it's not done by then it will eventually get there.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Other exciting news of the week:&lt;/h3&gt;
&lt;p&gt;I got accepted to the GSoC reunion at the end of October! As this is the 10th
annual GSoC, Google is throwing a big reunion shindig for past and present
students. As there are lots of us, only a few were chosen based on a lottery,
and I made it through! I'm very excited to meet other students that completed
the program, listen to some interesting talks, and see the GooglePlex. I also
bought my tickets to get there a day early so I have some time to explore the
bay area. Last time I was out there I was 14, and I didn't get to see much
of the area. If you also got accepted/live out and would be interested in
meeting up, let me know! I'll be in San Jose/San Francisco October 23-26.&lt;/p&gt;</description>
	<pubDate>Sat, 02 Aug 2014 01:44:00 +0000</pubDate>
</item>
<item>
	<title>Tarun Gaba: GSoC 14: First Week!</title>
	<guid isPermaLink="true">http://tarzzz.github.io/gsoc14/first-week.html</guid>
	<link>http://tarzzz.github.io/gsoc14/first-week.html</link>
	<description>{% include JB/setup %}


[ &amp;lt;-Back to posts ](/gsoc14)

First week of GSoC 14 has ended. It has been a week full of discussions and brainstorming over how to 
handle the project, and the collaboration. Most of the time was spent in taking crucial design decisions

As decided, I will be publishing these weekly blog posts in A.O.I format(_Accomplishments_, _Objectives_ and _Issues_)

###Accomplishments:

The main accomplishments of this week involved finalizing a stable API for the generic visualizer. Discussions were held
with Adam and it was decided that a fork of MGView will be used for developing the new visualizer. It will have a 
UI look similar to MGView, but with additional features pertaining to PyDy and related enhancements as well.

Apart from that another main aim was to flesh out an API for the visualizer. The generic visualizer will be made up
of following modules:

  - Parser Module: to parse the JSON and save it in JS objects/variables

  - SceneGenerator Module: To take the relevant data and information from parsed JSON and create a scene on the canvas.

  - SceneEditor Module: Using GUI controls to edit the scene and save them in a JSON file.

  - ParamsEditor Module: Using GUI widgets to modify the simulation parameters, and send/save them as relevant.


###Objectives:

The objectives of the upcoming week are:

 - To develop the Parser Module to be able to consume JSON from both PyDy and MG and parse them into
   relevant Javascript objects.

 - To develop methods on PyDy side to generate the JSON in the form that MotionView can consume.

 - To test some benchmark examples to check this workflow: output from PyDy --&amp;gt; JSON --&amp;gt; consumed by Parser Module.


###Issues:

 Since actual coding work is not started yet!, there are no technical issues encountered so far.



I will keep this blog updated with the regular advancements in the project.



Happy Coding!


[ &amp;lt;-Back to posts ](/gsoc14)</description>
	<pubDate>Tue, 29 Jul 2014 16:00:41 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: week 10: Radical equations</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-10.html</guid>
	<link>https://hargup.github.io/posts/week-10.html</link>
	<description>&lt;p&gt;This week I worked on the solvers for the equations with radicals.
Suppose you have to solve&lt;/p&gt;
&lt;p&gt;$$ \sqrt{x} + x - 2 = 0 $$.&lt;/p&gt;
&lt;p&gt;then you have to move the radical to the right hand side of the equation.&lt;/p&gt;
&lt;p&gt;$$ x - 2 = - \sqrt{x} $$&lt;/p&gt;
&lt;p&gt;and then square at both sides&lt;/p&gt;
&lt;p&gt;$$ x^2 - 4x + 4 = x $$&lt;/p&gt;
&lt;p&gt;Now the equation is a polynomial in \( x \) can be solved with usual
polynomial solving methods. Note that squaring both sides produce some extra
solutions and we will have to check all the solutions obtained against the
original equation.  If there are more than one radicals involved we may
have to apply the method recursively. For example in solving
\( \sqrt{2x + 9} - \sqrt{x + 1} - \sqrt{x + 4} = 0 \)
the method will recurse twice.&lt;/p&gt;
&lt;p&gt;To implement the method I tried a pattern matching approach.
The
squaring part is easy the tricky part is identifying which part to move to
the right hand side. First I tried to match the expression with the form
&lt;code&gt;sqrt(p) + q&lt;/code&gt; but it failed even for case like &lt;code&gt;4*sqrt(x) + x - 2&lt;/code&gt; because no
pattern matched to it. I had to use &lt;code&gt;a*sqrt(p) + q&lt;/code&gt; with the condition that the
expression matched to a shouldn't be zero. Now I can simply move the expression
matched with &lt;code&gt;p&lt;/code&gt; and terms multiplicated with it to the RHS and square both
the sides.&lt;/p&gt;
&lt;p&gt;Notice that this method for solving sqrt equation can work with any radical
equation, if it were cube root instead of sqrt I just had to cube both the
sides. OK so how do I mathch that expression? I tried to pattern matching with
assumptions on the wild symbols but it doesn't work.  I tried to match with
somthing like &lt;code&gt;a*p**Rational(1, m) + q&lt;/code&gt; but this also didn't work out because
Rational(1, m) raises TypeError no matter what the assumption on the variable
are.  There is a proposal for a new pattern matcher, I have not closely checked
the details but it will be able to work with assumption. You can see the
proposal on the wiki
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/Proposal-for-a-new-pattern-matching&quot;&gt;here&lt;/a&gt;
and if it is implemented then things will be good but I can't wait for it.
I had no other option to check term by term for rational power. Here's the
implementation&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_has_rational_power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rational&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;else:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_has_rational_power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;</description>
	<pubDate>Tue, 29 Jul 2014 12:09:01 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC'14 Week 10: Adding more to utils</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-4950031512117145558</guid>
	<link>http://blog.sudhanshumishra.in/2014/07/gsoc14-week-10-adding-more-to-utils.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;This week I worked on adding more utility function in optics. Some of them are yet to be added. I'll send a pull request once I write tests for them.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Here's the link to the code pushed till now:&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/debugger22/sympy/compare/util-funcs&quot;&gt;https://github.com/debugger22/sympy/compare/util-funcs&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I also worked on one of my pending PR(&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7686&quot;&gt;https://github.com/sympy/sympy/pull/7686&lt;/a&gt;) parameterizing a 3D circle. This will make the implementation a bit easier.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Tomorrow I'll be going back to college.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;That's all for now. Cheers!&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 28 Jul 2014 09:05:46 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week 10: Polishing off the main vector framework</title>
	<guid isPermaLink="true">http://codesachin.wordpress.com/2014/07/28/gsoc-week-10-polishing-off-the-main-vector-framework/</guid>
	<link>http://codesachin.wordpress.com/2014/07/28/gsoc-week-10-polishing-off-the-main-vector-framework/</link>
	<description>&lt;p&gt;This was a tiring week, with me being sick with a bad case of sinus for 3 days. Phew. Even then, I did manage to get quite a bit of work done in the time I could manage to sit in front of the computer without getting a headache.&lt;br /&gt; Some main points of progress -&lt;/p&gt;
&lt;p&gt;1. I finished off the Orienter classes, with a nice OO-structure, along with docs and tests. I basically changed the API of the &lt;code&gt;orient_new&lt;/code&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/23/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/23/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=23&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 28 Jul 2014 07:25:26 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: GSoC Week 10: Complex Complexions Resolved</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week10/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week10/</link>
	<description>&lt;p&gt;After a significant amount of work in the past couple of weeks, I’ve finally completed the Complex Module.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;This week I merged &lt;a href=&quot;https://github.com/sympy/csympy/pull/248&quot;&gt;PR 248&lt;/a&gt; which covered almost the entire of the complex module.
&lt;br /&gt;&lt;br /&gt;
After merging this PR, Complex Numbers and &lt;code&gt;I&lt;/code&gt; could be used in sync with other existing modules in CSymPy.
&lt;a href=&quot;https://github.com/certik&quot;&gt;@certik&lt;/a&gt; refined the Python wrappers to integrate the Complex Module.
Here are the some of the things which could be done using CSymPy python wrappers:
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The other major work in this week was to work on the expansion of integral powers of complex number.
&lt;a href=&quot;https://github.com/sympy/csympy/pull/264&quot;&gt;Pull 264&lt;/a&gt; was created to add this functionality. We used a particularly simple yet efficient algorithm to compute the integral power.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;powu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
The current expand is a bit slower than what we were expecting. We will be looking to improve the speed in the coming days.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;As per the proposal, I will be implementing the Zeta Function.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Sun, 27 Jul 2014 19:05:00 +0000</pubDate>
</item>
<item>
	<title>Kundan Kumar: Week 10: Test cases in checksysodesol</title>
	<guid isPermaLink="true">http://kundankumar185.wordpress.com/2014/07/27/week-10-test-cases-in-checksysodesol/</guid>
	<link>http://kundankumar185.wordpress.com/2014/07/27/week-10-test-cases-in-checksysodesol/</link>
	<description>&lt;p&gt;I am finally in college, going through a long journey from home. Its final year for me now, got a very tight schedule.&lt;/p&gt;
&lt;p&gt;I have updated the checksysodesol with test cases. The test cases includes the equations from first and second order linear and non-linear system of ODEs. I debugged few methods of system of ODEs, find out through checksysodesol.&lt;/p&gt;
&lt;p&gt;The updated &lt;em&gt;func&lt;/em&gt; method &lt;a href=&quot;https://github.com/sympy/sympy/pull/7738&quot;&gt;PR&lt;/a&gt; is merged which closes issues &lt;a href=&quot;https://github.com/sympy/sympy/issues/7736&quot;&gt;#7736&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/sympy/issues/7723&quot;&gt;#7723&lt;/a&gt;. The &lt;a href=&quot;https://github.com/sympy/sympy/pull/7703&quot;&gt;PR&lt;/a&gt; of non-linear of system of ODEs and &lt;a href=&quot;https://github.com/sympy/sympy/pull/7746&quot;&gt;PR&lt;/a&gt; of checksysodesol is open.&lt;/p&gt;
&lt;p&gt;Today I will add all the test cases in checksysodesol and start a PR for non-linear system of ODEs of 2nd order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/124/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/124/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=124&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 27 Jul 2014 08:06:03 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 9</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=103</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-9/</link>
	<description>&lt;p&gt;Hello Everyone,&lt;/p&gt;
&lt;p&gt;I finished up the changes remaining in FOL and will send in the almost final pull request this week. This was only a minor part of the week however. Before jumping on to the implementation of faster SAT, I wanted to revisit faster CNF conversion. I have tweaked things further, but it still seems like very close to CNF turns out to be quite slow. If I can’t imporove the situation any further I will post the changes I made to Tseitin. Except fo that, I worked on tweaking the parameters of SAT, basically EVSIDS, without making any actual code changes. I will be posting the results of the same later.&lt;/p&gt;
&lt;p&gt;Thats all for now. Hopefully this weekend will be quite productive.&lt;/p&gt;
&lt;p&gt;See ya all later!!!&lt;/p&gt;</description>
	<pubDate>Fri, 25 Jul 2014 12:12:15 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: GSoC Week 9: Complexions in Complex Module</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week9/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week9/</link>
	<description>&lt;p&gt;Week 9 for GSoC ended a couple of days back. I’m still working on the Complex Module.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started of the week continuing the work on &lt;a href=&quot;https://github.com/sympy/csympy/pull/248&quot;&gt;pull 248&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
Initially I started working on the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;mul&lt;/code&gt; functions and integrating the &lt;code&gt;complex&lt;/code&gt; module with them. This part was pretty easy as Complex addition and Complex multiplication was completely implemented. Intially I just added special cases for the case of Complex in &lt;code&gt;pow&lt;/code&gt;. But this quickly ran into issues as &lt;code&gt;is_canonical&lt;/code&gt; failed in some testcases.
&lt;br /&gt;&lt;br /&gt;
Next I simplified the complex power for the following cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When &lt;code&gt;exp&lt;/code&gt; is 1 or -1&lt;/li&gt;
  &lt;li&gt;When the &lt;code&gt;base&lt;/code&gt; is purely imaginary and &lt;code&gt;exp&lt;/code&gt; is integer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following this I made appropriate changes to &lt;code&gt;is_canonical&lt;/code&gt; for &lt;code&gt;pow&lt;/code&gt;
&lt;br /&gt;&lt;br /&gt;
Meanwhile &lt;a href=&quot;https://github.com/certik&quot;&gt;@certik&lt;/a&gt; sent a couple of PR’s &lt;a href=&quot;https://github.com/sushant-hiray/csympy/pull/1&quot;&gt;sushant-hiray/csympy/#1&lt;/a&gt; and &lt;a href=&quot;https://github.com/sushant-hiray/csympy/pull/2&quot;&gt;sushant-hiray/csympy/#2&lt;/a&gt; for implementing the Python wrappers for Complex Module.
I spent some time trying to sync the wrappers and make sure they work as intended.
&lt;br /&gt;&lt;br /&gt;
One important fix needed was to improve the printing. Over the entire PR, the printing has been changed multiple times to match the SymPy output. With this PR I’ve updated the current existing printing for &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt; as well as &lt;code&gt;pow&lt;/code&gt;
&lt;br /&gt;&lt;br /&gt;
The &lt;code&gt;expand&lt;/code&gt; function is also updated to handle the case of Complex Numbers. Currently it doesn’t expand terms like: &lt;code&gt;(2 + 3I)^n&lt;/code&gt;. Apart from this all the issues which were found have been fixed.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Merge the current PR and send a new PR for handling the cases like &lt;code&gt;(2 + 3I)^n&lt;/code&gt; in &lt;code&gt;expand&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Wed, 23 Jul 2014 17:30:00 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-5238978956281178700</guid>
	<link>http://gsocblog.blogspot.com/2014/07/this-week-i-converted-all-operations-on.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This week I converted all the operations on FPS to work with generators.&lt;br /&gt;For e.g.:-&lt;br /&gt;Addition for two series is something like&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; def add(s1, s2):  &lt;br /&gt;   yield s1[0] + s2[0]  &lt;br /&gt;   s1, s2 = s1.tail, s2.tail  &lt;br /&gt;   for t in add(s1, s2):  &lt;br /&gt;     yield t  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Almost all the operations use recursive generators. In this case argument to the add function is different each time.&lt;br /&gt;However in some cases the same function with same argument is called recursively.  For e.g:- In case of division&lt;br /&gt;  &lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; def div(s1, s2):  &lt;br /&gt;   a, b = s1[0], s2[0]  &lt;br /&gt;   def gen():  &lt;br /&gt;     yield a/b  &lt;br /&gt;     iterator = s2 * gen()  &lt;br /&gt;     for t in iterator:  &lt;br /&gt;       yield -t/b &lt;/code&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;   for t in gen():&lt;/code&gt;&lt;/pre&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt;      yield t &lt;/code&gt;&lt;/pre&gt;gen() is called recursively with the same arguments (no arguments in this case). &lt;br /&gt;I'll try to optimize recursive generators if possible over the next few days.&lt;br /&gt;&lt;br /&gt;Other problem I'm facing is args of Stream class. It is necessary that args of all Basic instances should be of type Basic. But the Stream class takes a generator object as an argument.&lt;br /&gt;&lt;br /&gt;Next week:-&lt;br /&gt;- Optimize recursive generators if possible&lt;br /&gt;- Generator object as Basic instance? (Find solution for this)&lt;br /&gt;- Implement all necessary ``eval`` routines for FPS like _eval_derivative, _eval_leadterm etc.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 22 Jul 2014 13:11:51 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week-9</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-6754341602192868346</guid>
	<link>http://geekpy.blogspot.com/2014/07/gsoc-week-9.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Sorry for the late post as I had to travel a lot this week. Other than that I finished the implementation of the Hyperbola class including the tests. &lt;a href=&quot;https://github.com/sympy/sympy/pull/7709&quot;&gt;Here&lt;/a&gt; is the link to the PR. Apart from that I fixed a few bugs in the Plane and Line3D class.&lt;br /&gt;&lt;br /&gt;This week I plan to implement the Parabola class and hopefully will get the PR on Hyperbola merged.&lt;br /&gt;&lt;br /&gt;Until then cheers! &lt;/div&gt;</description>
	<pubDate>Tue, 22 Jul 2014 06:05:07 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC'14 Progress: Finished refraction at planar surface</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-5816144129540344738</guid>
	<link>http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-finished-refraction-at.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I'm sorry for this delayed post. I couldn't work last week due to some other issues so had nothing much to report.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;This week I completed refraction function for planar surface, fixed some bugs and wrote tests for it. I also added a function to calculate angle of deviation. Details can be found on the following link&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7626&quot;&gt;https://github.com/sympy/sympy/pull/7626&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I'm waiting for Sean to start reviewing this.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;My next priority is to complete a pending PR on mirrors.&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 20 Jul 2014 14:32:41 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Kundan Kumar: Week 9: Checksysodesol</title>
	<guid isPermaLink="false">http://kundankumar185.wordpress.com/?p=122</guid>
	<link>http://kundankumar185.wordpress.com/2014/07/20/week-9-checksysodesol/</link>
	<description>&lt;p&gt;This week a lot of time is spent debugging solutions. The &lt;a href=&quot;https://github.com/sympy/sympy/pull/7738&quot;&gt;PR&lt;/a&gt; solves the issue &lt;a href=&quot;https://github.com/sympy/sympy/issues/7736&quot;&gt;#7736&lt;/a&gt; and &lt;a href=&quot;https://github.com/sympy/sympy/issues/7723&quot;&gt;#7723&lt;/a&gt; which was arising due to wrong calculation of &lt;em&gt;func &lt;/em&gt;method while solving non-linear system of ODEs of type5. I sent another &lt;a href=&quot;https://github.com/sympy/sympy/pull/7746&quot;&gt;PR&lt;/a&gt; which contains Checksysodesol, a method for checking the solution of system of ODEs. The PR remains to be updated with the test cases.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/sympy/sympy/pull/7703&quot;&gt;PR&lt;/a&gt; of non-linear system of ODEs of three equation for 1st order still remains to be merged.&lt;/p&gt;
&lt;p&gt;Thats all for this week. On monday I will be going to my college, hope to work harder there. The most haunting thing at home is electricity, having tough time with it sometime getting meagerly for 3-4 hrs a day. Well thats home, I suppose, getting a delicious meal of mom’s hand.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/122/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/122/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=122&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 20 Jul 2014 10:13:27 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: [GSoC] Week 9: Matrix Inverse and Sparse Matrices</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=377</guid>
	<link>https://thilinaatsympy.wordpress.com/2014/07/20/gsoc-week-9-matrix-inverse-and-sparse-matrices/</link>
	<description>&lt;p&gt;Hi All, Sorry for a late blog post. I was kind of busy during last week, preparing for a competition.&lt;/p&gt;
&lt;p&gt;During the last week, I mainly did two things, implementing matrix inverse and starting the implementation of sparse matrices.&lt;/p&gt;
&lt;h1&gt;Implementing Matrix Inverse&lt;/h1&gt;
&lt;p&gt;I implemented matrix inverse in two different methods, using Gauss Jordan elimination and fraction free LU decomposition. I had only implemented gauss Jordan elimination to solve a system &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt; where &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt; is a column matrix. I had to enhance the algorithm so that it can be used to solve several systems at once, i.e. &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;b&quot; class=&quot;latex&quot; title=&quot;b&quot; /&gt; can be a collection of column matrix.&lt;/p&gt;
&lt;p&gt;This was not a problem in fraction free LU method because &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=L&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;L&quot; class=&quot;latex&quot; title=&quot;L&quot; /&gt; and &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=U&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;U&quot; class=&quot;latex&quot; title=&quot;U&quot; /&gt; factors can be used to solve column vectors &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=e_%7B1%7D%2C+e_%7B2%7D%2C+.+.+.+e_%7Bn%7D&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;e_{1}, e_{2}, . . . e_{n}&quot; class=&quot;latex&quot; title=&quot;e_{1}, e_{2}, . . . e_{n}&quot; /&gt; after calculating &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=L&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;L&quot; class=&quot;latex&quot; title=&quot;L&quot; /&gt; and &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=U&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;U&quot; class=&quot;latex&quot; title=&quot;U&quot; /&gt; once.&lt;/p&gt;
&lt;h1&gt;Implementing Sparse Matrices&lt;/h1&gt;
&lt;p&gt;We decided to adapt the implementation of SciPy sparse matrices. For the time being I have implemented CSR form of a sparse matrix. CSR is an acronym for “Compress Sparse Row”. You can learn more about it in the following links.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29&quot;&gt;Wiki Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://netlib.org/linalg/html_templates/node91.html#SECTION00931100000000000000&quot;&gt;Netlib Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find information about scipy implementation of CSR matrices &lt;a href=&quot;http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/377/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/377/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=377&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 20 Jul 2014 08:32:25 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: week 9</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-9.html</guid>
	<link>https://hargup.github.io/posts/week-9.html</link>
	<description>&lt;p&gt;This week I moved back to college and my classes have restarted. This week
I worked on a PR to allow infinitely indexed &lt;code&gt;Range&lt;/code&gt;. See
https://github.com/sympy/sympy/pull/7741. While doing this PR I discovered
that you cannot monkey patch &lt;code&gt;object&lt;/code&gt; to assign some attribute. And I want to
mention that Sergey(one of my mentors) is damn good reviewer.&lt;/p&gt;</description>
	<pubDate>Sat, 19 Jul 2014 18:50:01 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week 9: Dyadics done</title>
	<guid isPermaLink="true">http://codesachin.wordpress.com/2014/07/19/gsoc-week-9-dyadics-done/</guid>
	<link>http://codesachin.wordpress.com/2014/07/19/gsoc-week-9-dyadics-done/</link>
	<description>&lt;p&gt;Not much to report this week, except that the code for dyadics is now done, with a all-tests-passing PR being pushed. A happy moment was the basic vector framework code finally getting pushed. Phew &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;. Now the next PR in line is the dyadics one itself.&lt;br /&gt;
I also spent time mapping out the API for the Rotator classes, which I will proceed to discuss with Jason during this week’s meeting. I am still a little doubtful about how useful these classes may be, API wise. Lets see about this one.&lt;br /&gt;
A problem that I am facing currently is the confusion about the Del operator. I started out trying to write it as a SymPy function, but then I realised that the _outputs_ from the methods of Del should be the ones being defined as unevaluated functions- like Gradient, Divergence, etc. Will have to take this up with Jason too.&lt;/p&gt;
&lt;p&gt;Anyways, I hope the dyadics code goes in soon, and I plan to send one or two PRs with more functionality soon. Till then, have a great week!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/22/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/22/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=22&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 19 Jul 2014 18:02:37 +0000</pubDate>
</item>
<item>
	<title>Jim Crist: GSoC Week 9: Docs!</title>
	<guid isPermaLink="false">tag:,2014-07-18:gsoc-week-9.html</guid>
	<link>http://jcrist.github.io/gsoc-week-9.html</link>
	<description>&lt;p&gt;This week I spent time on all sorts of little things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finished up the refactoring of &lt;code&gt;KanesMethod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Little fixes to &lt;a href=&quot;https://github.com/sympy/sympy/pull/7681&quot;&gt;my current PR&lt;/a&gt;. Just
  waiting on my mentors to review this, I want to get it merged soon-ish.&lt;/li&gt;
&lt;li&gt;Documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing documentation is the worst&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://jcrist.github.io/feeds/gsoc.atom.xml#fn:1&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. After taking time to implement all sorts
of new interesting things, the last thing I want to do is go back and write about
them in detail. Which is why it's so important to do early on. &lt;em&gt;Good&lt;/em&gt;
documentation needs to accomplish three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide motivation for &lt;em&gt;why&lt;/em&gt; your software is necessary/better/useful.&lt;/li&gt;
&lt;li&gt;Describe the user interface, showing &lt;em&gt;how&lt;/em&gt; to use each function or class.&lt;/li&gt;
&lt;li&gt;Provide real world &lt;em&gt;examples&lt;/em&gt; showing how to tie everything together.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python's documentation is interesting in that there are varying ways to do it.
Some of Sympy's documentation is just a nicely rendered form of the docstrings
for all the methods. Other modules have a more prose-y explanation of their
functionality. &lt;code&gt;mechanics&lt;/code&gt; is one of those modules.&lt;/p&gt;
&lt;p&gt;In my opinion the prose documentation approach is the better way.
Having good docstrings is important, but they aren't the end-all of
documentation&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;http://jcrist.github.io/feeds/gsoc.atom.xml#fn:2&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Of course, if I have a question the first thing I'm going to
do is read the docstrings (IPython makes this trivially easy). Only if I still
have questions afterwards will I turn to the online documentation. However, it'd
be extremely off-putting if the online documentation was just the docstrings
again.&lt;/p&gt;
&lt;p&gt;With the various changes I've made so far I needed to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;LagrangesMethod&lt;/code&gt; documentation to reflect the interface change.&lt;/li&gt;
&lt;li&gt;Create a documentation page all about the linearization methods.&lt;/li&gt;
&lt;li&gt;Update all the examples to reflect the new functionality.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these are &quot;done&quot;. I still need to go through and proofread, but overall
I'd say that the current state of the documentation is acceptable. I would like
to take some time to reorganize the layout of the whole &lt;code&gt;mechanics&lt;/code&gt; documentation
at some point. The current layout isn't the easiest to navigate for what you're
looking for.&lt;/p&gt;
&lt;p&gt;With this out of the way, the linearization portion of my project is tentatively
done. I say tentatively because I'm still waiting on my PRs to get merged, and 
am also still playing around with solving &lt;a href=&quot;http://jcrist.github.io/gsoc-week-8.html&quot;&gt;the &lt;code&gt;nan&lt;/code&gt; issue&lt;/a&gt;
that I've been writing about these last couple weeks.&lt;/p&gt;
&lt;p&gt;With that done, I hope to move on to code generation. I've read the current code
generation code and documentation, as well as &lt;a href=&quot;https://github.com/pydy/pydy/wiki/codegen-planning&quot;&gt;this pydy wiki page&lt;/a&gt;
on Jason's ideas about code generation. I'm still a little iffy about the intention
of this functionality, so I'm waiting until we can all meet to discuss what needs
to be done. That was supposed to have happened this week, but fell through.
Hopefully we can set some time aside next week, and I can finally get to work
on it.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Not actually the worst. &lt;a href=&quot;http://jcrist.github.io/feeds/gsoc.atom.xml#fnref:1&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://stevelosh.com/blog/2013/09/teach-dont-tell/&quot;&gt;This article&lt;/a&gt; by Steve
  Losh is a really good read on this. &lt;a href=&quot;http://jcrist.github.io/feeds/gsoc.atom.xml#fnref:2&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Fri, 18 Jul 2014 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 8</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=100</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-8/</link>
	<description>&lt;p&gt;Hello Everyone,&lt;/p&gt;
&lt;p&gt;I have majorly been working on fixes and optimizations this week. There was an interesting error that was coming up because of the way quantifiers had been designed. I have made some significant changes to the Quantifier class. An interesting problem regarding constants has cropped up, which I am yet to fix. Please find the discussion regarding it at &lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/16sSUehOFWA&quot; target=&quot;_blank&quot; title=&quot;Constants&quot;&gt;FOL Constants and Unification&lt;/a&gt;. For the rest or the week, I have majorly been writing tests for the FOL class and making small changes. Additionally I have spent some time writing tutorials for the logic module of SymPy. The documentation available currently only talks about how to do something but not what all can be done with it. The tutorials are far from complete but I will definitely try to finish the entire thing before the summer is over.&lt;/p&gt;
&lt;p&gt;That’s all for now.&lt;/p&gt;
&lt;p&gt;Farewell&lt;/p&gt;</description>
	<pubDate>Fri, 18 Jul 2014 13:12:18 +0000</pubDate>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week - 8</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-2147515292514723776</guid>
	<link>http://geekpy.blogspot.com/2014/07/gsoc-week-8.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This week was great in terms of the work done. My PR on the Plane class got merged finally, so this completes the  implementation of 3-D geometry. Though my code had less test coverage to which I have sent a &lt;a href=&quot;https://github.com/sympy/sympy/pull/7733&quot;&gt;PR&lt;/a&gt; which improves it .&lt;br /&gt;&lt;br /&gt;Apart from that I have been working on the Hyperbola class and have added most of the methods, tests remain though. &lt;a href=&quot;https://github.com/sympy/sympy/pull/7709&quot;&gt;Here&lt;/a&gt; is the link to the PR.&lt;br /&gt;&lt;br /&gt;This week I will add  tests for the Hyperbola class and will start implementing the Parabola class once this is done.&lt;br /&gt;&lt;br /&gt;Until then cheers!&lt;/div&gt;</description>
	<pubDate>Tue, 15 Jul 2014 03:19:49 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-8629525061641578470</guid>
	<link>http://gsocblog.blogspot.com/2014/07/as-it-turned-out-i-had-to-replace-most.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;As it turned out, I had to replace most of my last two week's code. I used lambda functions to implement infinite structures. Lambda function stored the delayed part of the structure.&lt;br /&gt;&lt;br /&gt;I scraped that out and now instead use the more Python-ic generators for infinite structures.&lt;br /&gt;&lt;br /&gt;Earlier FPS was just for series expansion around x0=0. I added support for asymptotic expansion and series expansion around arbitrary points. This just included the substitutions as done in the series() method.&lt;br /&gt;&lt;br /&gt;However I faced an irritating bug regarding this.&lt;br /&gt;The Lazyseries class has arguments: &amp;lt;x&amp;gt;, &amp;lt;generator object&amp;gt;&lt;br /&gt;So if ``l = Lazyseries(x, generator)``&lt;br /&gt;When  ``l.subs(x, x+1)`` is done, it turned out that &amp;lt;generator object&amp;gt; was being iterated. I noticed this after sometime, fixing it by writing a custom _eval_subs()&lt;br /&gt;&lt;br /&gt;Regarding the operation on series, I had to rewrite all of them using generators.&lt;br /&gt;Adding series is just term-wise addition which can be accomplished by a simple one-liner i.e. ``imap(operator.add, self, other)``.&lt;br /&gt;But it turned out that this was actually wrong. This didn't give sorted output when adding series.&lt;br /&gt;E.g.:-&lt;br /&gt;s1 = x + x**2 + x**3 + ...&lt;br /&gt;s2 = x + x**3 + x**5 + ... &lt;br /&gt;Now if s = s1 + s2,&lt;br /&gt;s = 2x + (x**2 + x**3) + (x**3 + x**5) + ...&lt;br /&gt;If I want series expansion of s with order = 4, it terminates at the third term after getting the x**5 term. Whereas, it should go further as there is a x**4 term too. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I wrote a custom add function merging two iterators similar to the mergesort algorithm. There is a built-in function called heapq.merge that does the same thing but it does not provide a key to compare values. It turns out that it is one of Cpython's ideas floating around to provide a key for heapq.&lt;br /&gt;&lt;br /&gt;I hope to get this done in a few days and get it ready for the merge.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 13 Jul 2014 18:41:00 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Aaron Meurer: SciPy 2014</title>
	<guid isPermaLink="true">http://asmeurer.github.io/posts/scipy-2014/</guid>
	<link>http://asmeurer.github.io/posts/scipy-2014/</link>
	<description>&lt;div&gt;&lt;p&gt;I just finished &lt;a href=&quot;https://conference.scipy.org/scipy2014/&quot;&gt;SciPy 2014&lt;/a&gt;, a
week-long conference in Austin, TX for scientific computing with Python.&lt;/p&gt;
&lt;p&gt;This is my third SciPy (I have been to
&lt;a href=&quot;https://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/&quot;&gt;2011&lt;/a&gt;
and &lt;a href=&quot;https://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/&quot;&gt;2013&lt;/a&gt;). This
year, the conference was noticeably larger. Last year there were
&lt;a href=&quot;http://andy.terrel.us/blog/2013/07/05/scipy2013-recap/&quot;&gt;~350 people&lt;/a&gt;, this
year, there were
&lt;a href=&quot;https://twitter.com/scopatz/status/488370261150818304&quot;&gt;~450 people&lt;/a&gt;.  Aside
from there being a lot more people, and the main keynotes taking place in a
larger room, the most noticeable consequence of this is that there were three
days of talks this year, and three concurrent tracks of talks all three days
(last year there were two of each). The conference consisted of two days of
tutorials, three days of talks, and two days of sprints, running from July 5
to July 12.&lt;/p&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;The conference started on Sunday with tutorials. I gave a tutorial on SymPy
with &lt;a href=&quot;http://matthewrocklin.com/blog/&quot;&gt;Matthew Rocklin&lt;/a&gt; and
&lt;a href=&quot;http://www.moorepants.info/blog/&quot;&gt;Jason Moore&lt;/a&gt;. The videos are on YouTube
(parts &lt;a href=&quot;https://www.youtube.com/watch?v=Lgp442bibDM&quot;&gt;one&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=_PTe10whFKo&quot;&gt;two&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=qleGSnrnxgc&quot;&gt;three&lt;/a&gt;, and
&lt;a href=&quot;https://www.youtube.com/watch?v=04AGOl1P2U4&quot;&gt;four&lt;/a&gt;).  I gave tutorials for
SymPy the previous two times I was at SciPy, although with different people
(with Mateusz Paprocki in 2011 and
&lt;a href=&quot;http://ondrejcertik.blogspot.com/&quot;&gt;Ondřej Čertík&lt;/a&gt; in 2013). I really enjoy
seeing new people learn about SymPy, and working with Matthew Rocklin, who is
a very good speaker and teacher.&lt;/p&gt;
&lt;p&gt;I also attended the tutorial on PyDy by Jason Moore, Gilbert Gede, and
Obinna Nwanna (parts &lt;a href=&quot;https://www.youtube.com/watch?v=lWbeuDwYVto&quot;&gt;one&lt;/a&gt;
and &lt;a href=&quot;https://www.youtube.com/watch?v=1-KqRvNX0po&quot;&gt;two&lt;/a&gt;).  This tutorial was
also well done, and I highly recommend it if you are interested in Newtonian
mechanics.&lt;/p&gt;
&lt;p&gt;I unfortunately was unable to attend any of the other tutorials, but I heard
good things about them, especially the
&lt;a href=&quot;https://www.youtube.com/watch?v=vWkgEddb4-A&quot;&gt;Julia tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Talks&lt;/h2&gt;
&lt;p&gt;From Tuesday to Thursday were talks. The quality of talks this year was very
high. The SciPy talks have always been high quality talks, but this year I
felt that they were particularly good. I don't think I saw a bad talk.&lt;/p&gt;
&lt;p&gt;Thus, I can't really recommend the good talks that I saw without recommending
all of them. You should go to YouTube and the
&lt;a href=&quot;https://conference.scipy.org/scipy2014/schedule/&quot;&gt;SciPy schedule&lt;/a&gt; and watch
any talk that looks interesting.&lt;/p&gt;
&lt;p&gt;I therefore am going to recommend here the very best talks.  Two talks in
particular stood out to me as the best.&lt;/p&gt;
&lt;p&gt;First is Greg Wilson's Thursday keynote, which is among the best talks I've
ever seen from any conference.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&amp;lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/1e26rp6qPbA&quot; width=&quot;560&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/center&gt;
&lt;p&gt;Greg mentions a lot of ideas, quite a few of which are controversial, which I
think always makes for an interesting talk (it also means that I don't agree
with everything he said, although I do agree with most of it). Most of the
talk is about pedagogy, especially regarding his experiences at
&lt;a href=&quot;http://software-carpentry.org/&quot;&gt;Software Carpentry&lt;/a&gt;. Some things he posited:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is actually good research about what methods work and don't work in
  teaching. He referenced
  &lt;a href=&quot;http://www.slideshare.net/richardcookau/john-hattie-effect-sizes-on-achievement&quot;&gt;this presentation&lt;/a&gt;,
  which lists just about every possible pedagogical method, and the net
  difference that it has on students, based on over 50,000 studies. For
  example, individualized instruction has a very small positive effect,
  whereas teacher feedback has a very large positive effect. Since each takes
  time and resources, we should focus on those effects that have the highest
  impact. Greg pointed out that web-based learning has very little positive
  effect, and hence is a waste of time and money. The most effective change is
  removing disruptive students.&lt;/p&gt;
&lt;p&gt;In particular, I liked the quote, &quot;if you want more computing in high
school, you have to tell me what to take out.&quot;  People like to go on that
schools need to teach more of this or more of that, and computing and
programming tends to be high on that list these days, but anyone who does
not discuss what things should be removed from the curriculum, which is
already quite full, is not being honest about the discussion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other big point Greg made is that we need more incremental massive
  collaboration in teaching. This is the same model that has built open source
  and Wikipedia, but is mostly absent from teaching. Incremental change is
  important here, as well. It is more useful for someone to contribute fixes
  to existing lesson plans, so that they become better for the students, but
  in his experience, people are much more willing to add new lessons.  Greg
  calls for a &quot;culture of patching&quot;. If incremental change could be adopted in
  teaching, teachers could aggregate methods and lesson plans, removing the
  massive duplication, and most importantly, making teaching materials that
  actually work for students to learn. Greg Wilson asks why open source and
  Wikipedia are able to thrive on massive &lt;em&gt;incremental&lt;/em&gt; change, but teaching
  is not, a question he hasn't found the answer to.&lt;/p&gt;
&lt;p&gt;My thought on the matter is that unlike writing software or collecting and
presenting facts, pedagogy is very difficult. If I contribute a patch to
an open source project that fixes a bug, I can run the tests to see if my
fix is &quot;correct&quot;. If I fix an incorrect fact on Wikipedia, it is less
easy, but I can still cite and check references to make sure it is
correct.  But for teaching, it is very difficult to know what methods work
and what don't, and as Greg pointed out at the beginning of his talk, the
effects of different methods can be very counterintuitive.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second talk that I recommend is
&lt;a href=&quot;http://jakevdp.github.io/&quot;&gt;Jake VanderPlas&lt;/a&gt;'s talk about Frequentism and
Bayesianism.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&amp;lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/KhAUfqhLakw&quot; width=&quot;560&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/center&gt;
&lt;p&gt;I won't summarize this talk, as Jake has done a much better job in his blog
(parts
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/&quot;&gt;one&lt;/a&gt;,
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/06/06/frequentism-and-bayesianism-2-when-results-differ/&quot;&gt;two&lt;/a&gt;,
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/06/12/frequentism-and-bayesianism-3-confidence-credibility/&quot;&gt;three&lt;/a&gt;,
and
&lt;a href=&quot;http://jakevdp.github.io/blog/2014/06/14/frequentism-and-bayesianism-4-bayesian-in-python/&quot;&gt;four&lt;/a&gt;). The
best thing is to just watch the talk.  I will just point out that before the
talk, I did not really understand the difference, not being a statistician or
someone who works with statistics regularly, and having seen the talk, I now
feel that I do.  It's a controversial topic, and if you care about the matter,
you should know that Jake is a strong Bayesian, although I felt that he gave
both sides a fair exposition.&lt;/p&gt;
&lt;p&gt;Again, all talks I saw at the conference were good. But those two I felt were
the best. I should also mention here that I myself gave a talk on Conda (more
on that later).&lt;/p&gt;
&lt;h2&gt;The Conference&lt;/h2&gt;
&lt;p&gt;Of course, the talks are only a part of any conference. The best part of SciPy
is the gathering of the community. Each year I meet more new people, as well
as talk with people I already know, but don't get to see outside of SciPy.&lt;/p&gt;
&lt;p&gt;For me, the biggest part of the interactions this year were on Conda and
packaging.  The background is that I have been working full time for Continuum
since January, and I had interned last summer, working primarily on the Conda
package manager and Anaconda, the Python distribution.  This year, some of the
biggest buzz at the conference was about Conda. I'm obviously selection
biased, because people came to me specifically to talk about Conda, but I also
overheard it in other people's conversations, in several of the presentations,
and frankly, the people who did talk to me about Conda were &lt;em&gt;very&lt;/em&gt; excited
about it.  Just like everyone was talking about the IPython Notebook last year
and how it has solved the fundamental problems of sharing and presenting data
analysis, this year, everyone thanked me for my work on Conda and how it has
basically solved the packaging problem, the ubiquitous problem in Python since
people started using it.&lt;/p&gt;
&lt;h3&gt;Conda: The Packaging Problem Solved&lt;/h3&gt;
&lt;p&gt;Here is the talk I gave on Conda:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&amp;lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/UaIvrDWrIWM&quot; width=&quot;560&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/center&gt;
&lt;p&gt;I made the claim in my talk that Conda has solved the packaging problem, and
the general feel from people I talked to who are using Conda is that it has.&lt;/p&gt;
&lt;p&gt;I think this slide from my presentation summarizes why Conda solves the
packaging problem.&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;500&quot; src=&quot;http://asmeurer.github.io/galleries/conda_scipy2014_slide.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One of the most amazing things about the scientific Python community, and one
of the things that I think really sets it apart from other Python communities,
is the use of Python alongside other languages, such as C, C++, Fortran, R, or
Julia.  No one language is enough to get the job done for serious scientific
work.  The fundamental brokenness of Python packaging has been that it has
focused too much on Python specific tools and processes.  The
distutils/setuptools/pip/virtualenv stack works great if your code begins and
ends with Python.  Where it falls over is when you want to link against a C
library, compile some Fortran or Cython code, and communicate with other
languages like R and Julia.  By being a system level package manager, which is
fundamentally Python agnostic, Conda is able to deal with all packages
equally, whether that package be a Python package, a C extension which other
packages link against, or Python itself.&lt;/p&gt;
&lt;p&gt;By being truly cross-platform and user installable, Conda is able to reach the
maximal number of users, especially those who have historically been hit by
the packaging problem the hardest:  those who are on Windows or those who do
not have admin rights to install necessary tools to install the packages they
need.&lt;/p&gt;
&lt;p&gt;Finally, Conda installs binaries, not source packages, and its metadata is
entirely static (you do not need to execute arbitrary Python code to capture
the metadata of a package).  These two things remove two of the largest
sources of issues with the existing Python packaging tools, such as compiler
errors, and nonuniformity in metadata standards (there seem to be as many
different ways of writing &lt;code&gt;setup.py&lt;/code&gt; as there are packages on PyPI), by
removing arbitrary code execution from package installation.&lt;/p&gt;
&lt;p&gt;Conda opens up its ecosystem to anybody by making it easy for people to build
their own Conda packages using reproducible Conda recipes.  And
&lt;a href=&quot;https://binstar.org/&quot;&gt;Binstar&lt;/a&gt; makes it easy to share those packages.  I'm
very excited about Binstar, as I think it does for packaging what GitHub has
done for open source, i.e., distributes and democratizes it. There are
challenges on how to deal with this, of course. As with any distributed
democratized system, Binstar can be a wild west of packages.  Continuum is
thinking about ways to manage this complexity, while still reaping the
benefits it provides. If you have any thoughts on things that can be done, let
me know in the comments section below.&lt;/p&gt;
&lt;p&gt;Of course, solving the packaging problem and removing it are different
things.  Conda does not make it easier to compile difficult packages.  It only
makes it so that fewer people have to do it.  And there is still work to be
done before Conda really takes over the world.&lt;/p&gt;
&lt;h2&gt;Sprints&lt;/h2&gt;
&lt;p&gt;The conference ended with two days of sprints. I mainly helped people with
Conda packaging.  One key thing that happened is that I worked with Aron
Ahmadia so that HashDist can generate Conda
packages. &lt;a href=&quot;http://hashdist.github.io/&quot;&gt;HashDist&lt;/a&gt; is a package compiling
framework that makes it easy to have completely reproducible builds by hashing
all the information that was used to compile a package, and recompiling when
any of that information changes. You can learn more about HashDist by watching
Aron's talk from the conference:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&amp;lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/wviHkzk0AkY&quot; width=&quot;560&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/center&gt;
&lt;p&gt;I am now convinced that HashDist is a good solution for people who still want
the control of compiling their own packages. Once HashDist is able to produce
Conda packages, then you can gain the benefits of both worlds: Conda's
powerful package management and environment notion, with HashDist's modular
and reproducible package building framework.&lt;/p&gt;
&lt;h2&gt;Other thoughts&lt;/h2&gt;
&lt;p&gt;The organizers of SciPy did an excellent job this year.  The video crew did
something which I have not seen before, which is that they uploaded the videos
of the talks on the same day that the talks were held. My talk, which was held
right before lunch, was uploaded before the last talk of the day.  Something
that I saw come out of this is that people not attending the conference were
able to watch the talks and take part of the conversation with the conference
attendees, via Twitter and other social media, or by joining the sprints after
the conference.&lt;/p&gt;
&lt;p&gt;The extended three days of talks really took their toll on me. The conference
starts early enough in the morning and the social events after go so late in
the evening that each day of the conference I become a little more sleep
deprived. Usually by two days of tutorials and two days of talks I have hit my
limit, and this year, I really had a hard time making it through that fifth
day. Fortunately for the sprints I was able sleep in a little bit, as it's not
a big deal if you miss the beginning.&lt;/p&gt;
&lt;p&gt;This year the conference organizers made a push for diversity, and it
shows. There were noticeably more women at the conference this year, and not
just insomuch as there were more people at all.&lt;/p&gt;
&lt;p&gt;Finally, I leave you with the greatest lightening talk. Ever.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&amp;lt;iframe allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/ln4nE_EVDCg?start=3254&quot; width=&quot;560&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/center&gt;


&lt;/div&gt;</description>
	<pubDate>Sun, 13 Jul 2014 16:52:27 +0000</pubDate>
</item>
<item>
	<title>Kundan Kumar: Week 7 and Week 8 : Non-linear system of ODEs</title>
	<guid isPermaLink="true">http://kundankumar185.wordpress.com/2014/07/13/week-7-and-week-8-non-linear-system-of-odes/</guid>
	<link>http://kundankumar185.wordpress.com/2014/07/13/week-7-and-week-8-non-linear-system-of-odes/</link>
	<description>&lt;p&gt;In week 7, there was negligible work done, had health issues. Because of that I was unable to update things here. During week 8, I got in non-linear system of ODEs for 3 equations of first order (&lt;a href=&quot;https://github.com/sympy/sympy/pull/7703&quot;&gt;PR&lt;/a&gt;). But most of them is not responding in my system. It takes very long time to respond but still I am not getting the final solutions (before that my system crashes).&lt;/p&gt;
&lt;p&gt;Though I have written method for these types, test cases for two types have been included and for other 3 I am not getting any solution. I will needing help from Tim and Sean for making any advances in this.&lt;/p&gt;
&lt;p&gt;The one &lt;a href=&quot;https://github.com/sympy/sympy/pull/7676&quot;&gt;PR&lt;/a&gt; of non-linear system of ODEs for 2 equation of first order has been merged and the &lt;a href=&quot;https://github.com/sympy/sympy/pull/7678&quot;&gt;PR&lt;/a&gt; for docs is all ready to go.&lt;/p&gt;
&lt;p&gt;The next week I plan to finish the PR of non-linear one and start new for checksysodesol which I have just started and start working on non-linear system of ODEs for 2 equation of second order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/121/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/121/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=121&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 13 Jul 2014 09:18:36 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: This Week in CSymPy: #8</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week8/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week8/</link>
	<description>&lt;p&gt;Week 8 for GSoC just ended. I’m particularly pleased that I’ve managed to get a basic version of Complex Module merged into master.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I hadn’t made much progress last week as I was traveling back home. So I had only managed to implement some of the functions. This week I implemented all the virtual functions which were necessary. Updated &lt;code&gt;Complex::from_mpq&lt;/code&gt; to return the appropriate instance of &lt;code&gt;Complex&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt;. &lt;a href=&quot;https://github.com/sympy/csympy/pull/223&quot;&gt;Pull 223&lt;/a&gt; implemented the basic version of complex module.
&lt;br /&gt;&lt;br /&gt;
I also noticed that some of the files I had commented out earlier had a mismatched tab configuration. So I fixed the mismatch identation for all the files in the project. &lt;a href=&quot;https://github.com/sympy/csympy/pull/242&quot;&gt;Pull 242&lt;/a&gt; fixed this issue.
&lt;br /&gt;&lt;br /&gt;
While writing tests for the Complex Module, I noticed that there was no explicit divide by zero check in the code and as a result, on division by zero, we were getting a coredumped. This issue was filed as &lt;a href=&quot;https://github.com/sympy/csympy/issues/239&quot;&gt;#239&lt;/a&gt; which was subsequently fixed via
&lt;a href=&quot;https://github.com/sympy/csympy/pull/241&quot;&gt;Pull 241&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
After some fixes and adding divide by zero checks in the complex module, the &lt;a href=&quot;https://github.com/sympy/csympy/pull/223&quot;&gt;Pull 223&lt;/a&gt;  was merged. With this in place, we can perform all basic operations on complex integers as well as rationals. The only exception being pow. It was decided that complex &lt;code&gt;pow&lt;/code&gt; shouldn’t evaluated by default. Also since the current definition of &lt;code&gt;pow&lt;/code&gt; returns a &lt;code&gt;RCP&amp;lt;const Number&amp;gt;&lt;/code&gt; so it needs to be refactored to account the current design.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Make sure complex module works with all other submodules of &lt;code&gt;CSymPy&lt;/code&gt; and add tests accordingly. &lt;a href=&quot;https://github.com/sympy/csympy/pull/248&quot;&gt;Pull 248&lt;/a&gt; has been started to deal with this.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Sun, 13 Jul 2014 05:45:00 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: week 7</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-7.html</guid>
	<link>https://hargup.github.io/posts/week-7.html</link>
	<description>&lt;h2&gt;Week 7, 8&lt;/h2&gt;
&lt;h3&gt;Fu Simplification&lt;/h3&gt;
&lt;p&gt;In the early part of the week 7 was thinking and working on design decisions.
I want the code to be very modular so that it could be easily extended by
people other than me. This came up in a meeting with Matthew and I want the
solvers to be like the Fu simplification explained by Matthew in this &lt;a href=&quot;https://www.youtube.com/watch?v=QldxygVVj-s&amp;amp;list=PLYx7XA2nY5GfuhCvStxgbynFNrxr3VFog&amp;amp;index=20&quot;&gt;Scipy
Talk&lt;/a&gt;.
The idea was that we can see solving an equation as series of transformations.
If we have a lot of small transformations such that the input type is same as
output type, and some notion of what makes a &quot;better&quot; output we can search though
the list of transformations running one on top of other. I also posted about
it on the &lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/42GdMJ9ssyM&quot;&gt;mailing
list&lt;/a&gt; which brought
out some flaws in the preliminary design. The idea is pretty crude in the
current stage and I'll have to look deeper into it, but not now.&lt;/p&gt;
&lt;p&gt;I also discussed about the implementing a pattern dispached based solver
suggested by &lt;a href=&quot;https://groups.google.com/d/msg/sympy/moSEFHop0n4/e2hBKRQ9WP4J&quot;&gt;F.B&lt;/a&gt;
on the mailing list. But we decided that it will be better if we finish the
equation solver by the current technique first.&lt;/p&gt;
&lt;h3&gt;Intersection with S.Reals&lt;/h3&gt;
&lt;p&gt;I decribed in the last post that one way to solve trigonometric equation is
rewriting them in terms of \( exp \). But that is \( exp \) in the complex domain and
the solution of \(exp(x) = a \) is \( \left\{i \left(2 \pi
n + \arg{\left (a \right )}\right) + \log{\left
(\left\lvert{a}\right\rvert \right )}\; |\; n \in \mathbb{Z}\right\}
\). Hence we have to filter out real solutions from the obtained solutions.
The filering is equivalent to the intersection of the solutions with the \( \mathbb{R}
\) set. Suppose \( g(x) \) and \( h(x) \) are real valued functions and we
have to perform
$$ \mathbb{R} \cap \left\{g{\left (n \right )} + i h{\left (n \right )}\; |\; n \in \mathbb{Z}\right\} $$
then the answer will be simply
$$ \left\{g{\left (n \right )}\; |\; n \in \left\{h{\left (n \right )} = 0\; |\; n \in \mathbb{Z}\right\}\right\} $$&lt;/p&gt;
&lt;p&gt;Separate the real and imaginary parts and equate the imaginary to zero
but the problem was with the assumptions on the symbols. For example while
separating real and imaginary parts of the equation.&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_imag_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;That is because &lt;code&gt;n&lt;/code&gt; is by default complex, even in the &lt;code&gt;Lambda(..).expr&lt;/code&gt;.
I wrote some code to decide the
assumption on the variable of imageset from the baseset. See &lt;a href=&quot;https://github.com/sympy/sympy/pull/7694&quot;&gt;PR
7694&lt;/a&gt;.
There was another issue that needs to be resolved
&lt;code&gt;S.Integers.intersect(S.Reals)&lt;/code&gt; doesn't evaluate to &lt;code&gt;S.Reals&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;LambertW and Multivariate Solvers&lt;/h3&gt;
&lt;p&gt;The method to solve equation containing exp and log function is using the
LambertW function. LambertW function is the inverse of \( x \exp(x) \).  The
function is multivariate function both for the real and complex
domains and Sympy has only one branch implemented. This also leads us to loss
of solutions. Aaron gave an example
&lt;a href=&quot;https://github.com/sympy/sympy/pull/2723#issuecomment-33760912&quot;&gt;here&lt;/a&gt;. But I'm
pretty unfamiliar with solving by LambertW and LambertW itself and it will take
me some time to build an understanding of them.
As an ad hoc solution I'm using the code in the &lt;code&gt;_tsolve&lt;/code&gt; in the
&lt;code&gt;solvers.solvers&lt;/code&gt; module to do at least what the current solvers can do.&lt;/p&gt;
&lt;p&gt;When the importing of &lt;code&gt;_tsolve&lt;/code&gt; method was done. I started working on the
multivariate solvers. Here's how the current multivariate solvers work:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solving single multivariate equation&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;count the number of free symbols in f - no of symbols for
equation. If the equation has exactly one symbol which is not asked for then
use &lt;code&gt;solve_undetermined_coeffs&lt;/code&gt;, the &lt;code&gt;solve_undetermined_coeffs&lt;/code&gt; find the
values of the coefficient in a univariate polynomial such that it always
equates to zero.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then for each symbol &lt;code&gt;solve_linear&lt;/code&gt; is tried which tries to find a solution
of that symbol in terms of constants or other symbols, the docstring says&lt;/p&gt;
&lt;pre class=&quot;code literal-block&quot;&gt;&lt;span class=&quot;n&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplification&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expansion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correspond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strictly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we don't have to worry about loosing a solution. For every symbol it is
checked if doesn't depend on previously solved symbols, if it does that
solution is discarded.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For the symbols for which the above method failed, the &lt;code&gt;_solve&lt;/code&gt; function is
called for the equation for that variable and as above if the solution contains
a variable already solved then that solution is discarded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;System of equations in multiple variables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Try to convert the system of equations into a system of polynomial equation
  in variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If all the equations are linear solve then using &lt;code&gt;solve_linear_system&lt;/code&gt;, check
  the result and return it. If asked for particular solution solve using
  &lt;code&gt;minsolve_linear_system&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the number of symbols is same as the size of the system solve the
  polynomial system using &lt;code&gt;solve_poly_system&lt;/code&gt;. In case the system is
  over-determined All the free symbols intersection the variables asked for are
  calculated. Then for every subset of such symbols of length equal to that of
  the system, an attempt to solve the equations by &lt;code&gt;solve_poly_system&lt;/code&gt; is made.
  Here if any of the solution depends on previously solved system the solution
  is discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the case there are failed equations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For every know result:&lt;/li&gt;
&lt;li&gt;Substitute every thing into the failed equation and see if the equation turns to zero.
  if it does accept the result otherwise put it in the bad_results group.&lt;/li&gt;
&lt;li&gt;Then try to solve try to solve the failed equation using &lt;code&gt;solve&lt;/code&gt; for each symbol.&lt;/li&gt;
&lt;li&gt;If that solution depends on any other previously solved symbols
  discard it.&lt;/li&gt;
&lt;li&gt;If it doesn't satisfy other equations, discard it.&lt;/li&gt;
&lt;li&gt;Check if the solution doesn't set any denominator to zero, if it does
  discard that solution.&lt;/li&gt;
&lt;li&gt;If it satisfies the above conditions substitute this value in know
  solutions and add it as a new result.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Sat, 12 Jul 2014 14:00:01 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Weeks 7,8: Beginning with Dyadics</title>
	<guid isPermaLink="true">http://codesachin.wordpress.com/2014/07/12/gsoc-weeks-78-beginning-with-dyadics/</guid>
	<link>http://codesachin.wordpress.com/2014/07/12/gsoc-weeks-78-beginning-with-dyadics/</link>
	<description>&lt;p&gt;The last two weeks have been slow, hence a common blog post for both of them. Last week was spent in improving the current PR even more, especially with dedicated rotator methods for each type of rotation (Body/Space/Axis/Quaternion) of Coordinate Systems. Its not much, just methods like ‘orient_new_axis’, ‘orient_new_body’, etc. as add-ons on top of the all-powerful ‘orient_new’ method. The coding involved wasn’t much, since the new methods essentially call the ‘orient_new’ method with the relevant parameters. However, the rotation API is now much simpler than using the ‘orient_new’ method for all kinds of orientations – mainly because the extra flexibility provided by the ‘orient_new’ method implies a more awkward API for the same.&lt;br /&gt;
Jason, Mathew and Aaron were together at SciPy, during our last week’s GSoC meeting. There, the common consensus was to try and have Rotator classes to make the orientation framework even more user-friendly. Discussing the interface for the same is on this week’s meeting agenda.&lt;br /&gt;
A big change that we thought of doing in the timeline was to let go of spherical/cylindrical systems for a while, and instead focus on dyadic tensors – since the code is mostly done (my work during last year’s GSoC), they will be a useful and powerful addition to the vector module.&lt;br /&gt;
So my next few (much shorter than the current one) PRs would be-&lt;br /&gt;
1) The code for dyadic tensors&lt;br /&gt;
2) Documentation for all the basic, non-time-dependent framework&lt;br /&gt;
3) Rotator classes(?)&lt;br /&gt;
4) Implementation of the Del operator as an SymPy Function&lt;br /&gt;
5) Just some basic helper methods to convert vectors from one form (rect/spherical/cylindrical) to another&lt;br /&gt;
The code for Dyadics is mostly done, the docs are on-going, and I am thinking of having a common super-class for Vector and Dyadic- called Tensor(inheriting from Expr) – since many of the SymPy manipulation procedures work in the exact same manner for Vectors as well as Dyadics. Will discuss this with Jason soon.&lt;/p&gt;
&lt;p&gt;Anyways, thats all for now, have a great week!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/21/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/21/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=21&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 12 Jul 2014 07:37:43 +0000</pubDate>
</item>
<item>
	<title>Jim Crist: GSoC Week 8: Try, try, try again...</title>
	<guid isPermaLink="false">tag:,2014-07-11:gsoc-week-8.html</guid>
	<link>http://jcrist.github.io/gsoc-week-8.html</link>
	<description>&lt;p&gt;I'm still struggling to solve the &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;oo&lt;/code&gt; issue I've discussed in my
post &lt;a href=&quot;http://jcrist.github.io/gsoc-week-6.html&quot;&gt;a couple weeks ago&lt;/a&gt;.
&lt;a href=&quot;http://jcrist.github.io/gsoc-week-7.html&quot;&gt;Last week&lt;/a&gt; I showed off a custom
written subs function for use inside &lt;code&gt;sympy.physics.mechanics&lt;/code&gt; that helped with
speed considerably, and &lt;em&gt;attempted&lt;/em&gt; to solve the &lt;code&gt;nan&lt;/code&gt; problem. This worked
great for small-medium expressions, but failed on large ones. Or did it? I'm not
sure anymore.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/7464&quot;&gt;This pull request&lt;/a&gt; brought up something
that I had witnessed, but never really thought about as a potential source of my
issues. To summarize, Sympy's current (hopefully soon to be old) caching system
never clears. Ever. For interactive work, or short running sessions this is fine.
However, for the huge expressions generated in &lt;code&gt;mechanics&lt;/code&gt;, this can be a source
of memory issues, as the cache grows to hold all sub-expressions that were cached.&lt;/p&gt;
&lt;p&gt;It turns out that &lt;code&gt;simplify&lt;/code&gt; is one of those functions that is cached. This may
explain why when I tried to use &lt;code&gt;msubs&lt;/code&gt; with &lt;code&gt;smart_subs=True&lt;/code&gt; (which crawls the
expression tree and does selective simplification) this resulted in &lt;em&gt;all&lt;/em&gt; of my
RAM being used up (4 GB!!!). I haven't had a chance to pull in this PR into my
repo and test it out, but it sounds like it should fix the problem. Instead of
growing infinitely, the cache uses a &lt;a href=&quot;http://jcrist.github.io/feeds/ //en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used&quot;&gt;least recently used (LRU)&lt;/a&gt; algorithm to
determine what stays and what is removed. The cache size can be set by the user,
so those that prefer speed over memory use can still cache everything. Per his
benchmarks it seems to be only 10% slower, which shouldn't be much of a problem.
Overall, I'm really psyched to start using this. Perhaps with this the &lt;code&gt;smart_subs&lt;/code&gt;
I wrote up will work, even if it takes a while. If not, I'm kind-of out of ideas.&lt;/p&gt;
&lt;p&gt;I spent some time this week trying out a few other ways of solving this problem.
So far none of them have worked.&lt;/p&gt;
&lt;h3&gt;1. Using &lt;code&gt;cse&lt;/code&gt;, and applying simplify selectively to the sub-expressions.&lt;/h3&gt;
&lt;p&gt;The basic idea here was to apply &lt;code&gt;cse&lt;/code&gt; on the expression, and then evaluate
each sub-expression. If it evaluated to &lt;code&gt;nan&lt;/code&gt;, simplify it, then evaluate it
again.&lt;/p&gt;
&lt;p&gt;This seemed like a good idea at first, but upon closer examination it
falls apart. The issue is that the expressions that could cancel/simplify out
are often broken into &lt;em&gt;separate sub-expressions&lt;/em&gt;. This means that they are
evaluated numerically separately, and only once combined will they result in
a &lt;code&gt;nan&lt;/code&gt;, at which point they can't be simplified anyway.&lt;/p&gt;
&lt;h3&gt;2. Taking the limit of the bad sub-expressions.&lt;/h3&gt;
&lt;p&gt;This was another idea that seemed good until I tried it. Similar to the &lt;code&gt;smart_subs&lt;/code&gt;
I talked about &lt;a href=&quot;http://jcrist.github.io/gsoc-week-7.html&quot;&gt;last week&lt;/a&gt;, except this
time it's taking the limit of the bad sub-expressions as they approach the operating
point. The thought being that it may be computationaly cheaper to find the limit
than to apply &lt;code&gt;simplify&lt;/code&gt; and then evaluate.&lt;/p&gt;
&lt;p&gt;There were several problems iwth this design. The first being that &lt;code&gt;Sympy&lt;/code&gt; has no
functionality for finding multivariable limits. These can't be calculated
iteratively either (by that I mean find the limit for x, then the limit for y, then
the limit for z, etc...), as the part that could &quot;simplify out&quot; could already be
gone.&lt;/p&gt;
&lt;p&gt;The second, and more serious issue, is that there was no way to tell if the limit
at that point was equal to the value the expression should actually evaluate too, or if it
is just the value of the &lt;em&gt;limit at that point&lt;/em&gt;. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nan&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the method described above, it would seem that the expression should just
evaluate to &lt;code&gt;1/2&lt;/code&gt;. However, if you actually plot this expression, you'll find
that there is a discontinuity at &lt;code&gt;a = 1&lt;/code&gt;. From either side it approaches 1/2,
but at 1 it is actually &lt;code&gt;nan&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;3. Numerical perturbation about the setpoint to find the limit of the bad sub-expressions.&lt;/h3&gt;
&lt;p&gt;The idea here was to calculate the limit of the sub-expressions through numerical
evaluation and perturbation. This fails for all the reasons described above, as
well as the fact that Sympy is a symbolic computation library, and we should be
able to do this symbolically.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Unfortunately those were all the ideas I had to solve this problem. If the algorithm described
last week doesn't end up working using the new cacheing system, I'm kind of stumped.
Back on &lt;a href=&quot;http://www.seas.upenn.edu/~terfan/strugglebus/pennapps2013f/&quot;&gt;the struggle bus&lt;/a&gt;...&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Meanwhile...&lt;/h2&gt;
&lt;p&gt;As another &lt;em&gt;potential&lt;/em&gt; solution, I've set about refactoring the &lt;code&gt;KanesMethod&lt;/code&gt; class
in the hope that I'll find some way of generating expressions that are smaller
than they currently are. The first step was rewriting to make it readable, more
modular, and remove the dead code that had built up over the years. This is done.
In it's current state it passes all tests, and runs them in half the time that it
had before!!! Still no major reduction in expression size, but I'll hopefully find
some magical place in the code that could be made more efficient. We'll see.&lt;/p&gt;
&lt;p&gt;I'm also working on the documentation for the linearization stuff that's already
done, as well as waiting on someone to finally review my
&lt;a href=&quot;https://github.com/sympy/sympy/pull/7681&quot;&gt;PR for LagrangesMethod support&lt;/a&gt;. I hope to
get that merged soon so that I can get started on the code generation portion of this
project.&lt;/p&gt;</description>
	<pubDate>Fri, 11 Jul 2014 22:00:00 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: [GSoC] Week 8: Solving Ax = b and Determinant</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=10</guid>
	<link>https://thilinaatsympy.wordpress.com/2014/07/11/gsoc-week-8-solving-ax-b-and-determinant/</link>
	<description>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;Sorry, I couldn’t write a blog post last week. During past two weeks, I contributed in solving some of the bugs in CSymPy and the determinant of a Matrix. Also, I implemented the solutions of the system &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt; by using various decomposition methods.&lt;/p&gt;
&lt;h1&gt;Determinant of a Matrix&lt;/h1&gt;
&lt;p&gt;I implemented determinant using two different methods, Bareiss’s method and Berkowitz algorithm.&lt;/p&gt;
&lt;h2&gt;Bareiss’s algorithm&lt;/h2&gt;
&lt;p&gt;Bareiss’s algorithm[1] can be used to find the row echelon form or determinant of a Matrix. This is not a division free algorithm, but guarantees that all the divisions are exact, i.e. there is no remainder [2]. The algorithm is based on Sylvester’s identity and a transformation that yields the determinant after successive application. This can be also used to solve a system of equations. You can read more about the algorithm in [2].&lt;/p&gt;
&lt;h2&gt;Berkowitz Algorithm&lt;/h2&gt;
&lt;p&gt;Berkowitz algorithm can also be used in calculating the determinant. This algorithms has various other applications as well, like calculating characteristic polynomial of a matrix, principal minors and Eigen values. I am yet to implement the calculation of characteristic polynomial and Eigen values using this algorithm but that won’t be a difficult thing. I wish to do it over the weekend.&lt;/p&gt;
&lt;h1&gt;Ax = b&lt;/h1&gt;
&lt;p&gt;I used various matrix decompositions implemented earlier to solve the system &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt;. Only the fraction free LU decomposition was used earlier, but now we can solve linear systems using LU decomposition and LDL decomposition. QR and Cholesky decomposition can be enabled after figuring out a good way to do expression simplification in CSymPy.&lt;/p&gt;
&lt;p&gt;I hope to work on Sparse matrices in upcoming weeks and do some benchmarks of CSymPy’s algorithms with GiNaC.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;[1] Erwin H. Bareiss, Sylvester’s Identity and Multi step Integer-Preserving Gaussian Elimination&lt;/p&gt;
&lt;p&gt;[2] Wikipedia article, &lt;a href=&quot;http://en.wikipedia.org/wiki/Bareiss_algorithm&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Bareiss_algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] Wolfram Mathworld article, &lt;a href=&quot;http://mathworld.wolfram.com/SylvestersDeterminantIdentity.html&quot; rel=&quot;nofollow&quot;&gt;http://mathworld.wolfram.com/SylvestersDeterminantIdentity.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/10/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/10/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=10&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 11 Jul 2014 15:51:53 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 7</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=97</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-7/</link>
	<description>&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;I have been &lt;em&gt;extremely&lt;/em&gt; busy this week. So I haven’t managed to get the time to write out a proper post. However since it is already very late in the week it is better to create a small outline than wait for the actual product. Firstly, I worked on standardization of FOL expression. However the bulk of the week was consumed in writing code for the &lt;a href=&quot;http://en.wikipedia.org/wiki/Unification_%28computer_science%29&quot; target=&quot;_blank&quot; title=&quot;Unification&quot;&gt;most general unifier&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Resolution_%28logic%29#Resolution_in_first_order_logic&quot; target=&quot;_blank&quot; title=&quot;Resolution&quot;&gt;resolution&lt;/a&gt;. While these functions mark almost the end of my FOL proposal, the entire module is yet not ready and still needs some work. I will explain all these concepts in detail (preferably some time next week, once I have more time) along with examples and how to do it in SymPy.&lt;/p&gt;
&lt;p&gt;Cheers!!!&lt;/p&gt;</description>
	<pubDate>Thu, 10 Jul 2014 19:13:06 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC'14 Progress: Working with geometry</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-8093487105603123103</guid>
	<link>http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-working-with-geometry.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;&quot; class=&quot;markdown-body&quot;&gt;&lt;div style=&quot;color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;This week I completed &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;refraction_angle&lt;/code&gt;. Now it also works with &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt; and &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Plane&lt;/code&gt;. This function calculates transmitted vector after refraction. &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;medium1&lt;/code&gt; and &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;medium2&lt;/code&gt; can be &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Medium&lt;/code&gt;or any sympifiable object. If&lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;incident&lt;/code&gt; is an object of &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt;, &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;normal&lt;/code&gt; also has to be an instance of &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt; in order to get the output as a &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt;. If plane of separation is not provided and normal is an instance of &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt;, normal will be assumed to be intersecting incident ray at the plane of separation. This will not be the case when &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;normal&lt;/code&gt; is a &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Matrix&lt;/code&gt; or any other sequence. &lt;br style=&quot;&quot; /&gt;If &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;incident&lt;/code&gt; is an instance of &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt; and &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;plane&lt;/code&gt; has not been provided and &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;normal&lt;/code&gt; is not&lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Ray3D&lt;/code&gt;, output will be a &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Matrix&lt;/code&gt;. It is dependent on &lt;code style=&quot;border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;&quot;&gt;Plane&lt;/code&gt; so I haven’t added tests for it.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;Here’s the link to the PR &lt;a style=&quot;&quot; href=&quot;https://github.com/sympy/sympy/pull/7626&quot;&gt;https://github.com/sympy/sympy/pull/7626&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;This week I also worked on making spherical mirrors in SymPy. There are few issues that I am facing. Currently I’m working(stuck) on locating mirrors in space. It’s an amalgamation of 2D and 3D geometry. I still have to subclass Ray of geometry and make it useful for this. I’ve sent a &lt;a style=&quot;&quot; href=&quot;https://github.com/sympy/sympy/pull/7686&quot;&gt;WIP PR&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;&quot;&gt;&lt;span style=&quot;background-color: white;&quot;&gt;I’m waiting for Sean to merge &lt;a style=&quot;&quot; href=&quot;https://github.com/sympy/sympy/pull/7607&quot;&gt;this&lt;/a&gt; long waited PR for moving Gaussian optics module.&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;&quot;&gt;That's all for now.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 08 Jul 2014 17:24:18 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week-7</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-6017249369410601684</guid>
	<link>http://geekpy.blogspot.com/2014/07/gsoc-week-7.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This has been a decent week in terms of progress. One of my long standing PR's has been merged (Line3D class). The other one on Plane has been reviewed by a lot of people and luckily I got a lot of suggestions as to how I can improve the code. I have made the required changes and am waiting for a final go on this PR as that would speed up the work on the optics module as it has a dependency on this class.&lt;br /&gt;&lt;br /&gt;Meanwhile this week I also worked on the Hyperbola class. I have added a few more methods. &lt;a href=&quot;https://github.com/sympy/sympy/pull/7709&quot;&gt;Here&lt;/a&gt; is the link to the PR. I plan to implement more methods this week along with the Rectangular Hyperbola class.&lt;br /&gt;&lt;br /&gt;Until then cheers!&lt;/div&gt;</description>
	<pubDate>Tue, 08 Jul 2014 04:42:02 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Jim Crist: GSoC Week 7: Expression Trees and Substitution</title>
	<guid isPermaLink="false">tag:,2014-07-06:gsoc-week-7.html</guid>
	<link>http://jcrist.github.io/gsoc-week-7.html</link>
	<description>&lt;p&gt;
&lt;/p&gt;&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Late post this week due to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29&quot;&gt;celebration of everything that is American&lt;/a&gt;. This week I finally got my first PR merged. The general linearization code is now part of the Sympy codebase. I currently have a &lt;a href=&quot;https://github.com/sympy/sympy/pull/7681&quot;&gt;PR for Lagrange support&lt;/a&gt; waiting to be reviewed. After that I just need to write the ReST docs and the first part of the project is &quot;complete&quot;. The rest of the week was spent on more optimization work. I'm getting closer to being able to solve the &lt;a href=&quot;http://docs.sympy.org/dev/modules/physics/mechanics/bicycle_example.html&quot;&gt;bicycle example&lt;/a&gt; in a reasonable amount of time!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jcrist.github.io/gsoc-week-6.html&quot;&gt;Last week's post&lt;/a&gt; showed the issues with the large expression size and &lt;code&gt;subs&lt;/code&gt; (it takes forever to run). I took some time this week to look into how expressions work in sympy, and wrote a specialized subs function for use in &lt;code&gt;sympy.physics.mechanics&lt;/code&gt;. The rest of this post will show give an overview and some benchmarks of this code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;expression-trees&quot;&gt;Expression Trees&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;In sympy, expressions are stored as &lt;a href=&quot;http://en.wikipedia.org/wiki/Tree_%28data_structure%29&quot;&gt;trees&lt;/a&gt;. Each node is an object that has an attribute &lt;code&gt;args&lt;/code&gt; that contains a list of it's child nodes. This is best shown by an example:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [1]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.printing.dot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dotprint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [2]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a, b, c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [3]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[3]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;a**2/b + a*cos(a + b)
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [4]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.dot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [5]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;bash&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tpng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [6]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.core.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[6]:&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea output_pyout&quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The root node of this tree is an &lt;code&gt;Add&lt;/code&gt; object, as the outermost operation is adding two smaller expressions together. Going down the left side first, we see that &lt;span class=&quot;math&quot;&gt;\(a^2/b\)&lt;/span&gt; is stored as multiplying &lt;span class=&quot;math&quot;&gt;\(a^2\)&lt;/span&gt; times &lt;span class=&quot;math&quot;&gt;\(b^{-1}\)&lt;/span&gt;. Sympy doesn't have &lt;code&gt;Div&lt;/code&gt; objects, fractions are all expressed using &lt;code&gt;Mul&lt;/code&gt;, with the denominator wrapped in a &lt;code&gt;Pow(den, -1)&lt;/code&gt;. Traversing the right side &lt;span class=&quot;math&quot;&gt;\(a \cos(a + b)\)&lt;/span&gt; is stored as multiplying &lt;code&gt;a&lt;/code&gt; and a &lt;code&gt;cos&lt;/code&gt; object together. The &lt;code&gt;cos&lt;/code&gt; object itself contains one child node - an &lt;code&gt;Add&lt;/code&gt; - which holds &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;crawling-the-tree&quot;&gt;Crawling the Tree&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The design of sympy expression objects uses two key features: &lt;code&gt;args&lt;/code&gt;, and &lt;code&gt;func&lt;/code&gt;. As mentioned above, &lt;code&gt;object.args&lt;/code&gt; holds a tuple of all the child nodes for that object. Likewise, &lt;code&gt;object.func&lt;/code&gt; is a class method that takes in arguments, and returns an instance of that class. For &lt;em&gt;most&lt;/em&gt; objects in sympy, running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;object.func(*object.args) == object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will be a true expression. I say most because not all objects adhere to this (leaf nodes). There has been a lot of discussion about this &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Args-Invariant&quot;&gt;here&lt;/a&gt;, if you're interested.&lt;/p&gt;
&lt;p&gt;One of the great things about this design is that it makes it very easy to write operations that modify these trees using recursion. Normally, recursion in python is frowned upon because the function calls add overhead that could be removed if rewritten as a loop. There is also a maximum recursion depth (default of 1000) to prevent stackoverflow conditions. However, a sympy expression that has 1000 nested nodes is highly unlikely (even in &lt;code&gt;mechanics&lt;/code&gt;), and the recursion makes the code &lt;em&gt;much&lt;/em&gt; more readable. As the &lt;a href=&quot;http://legacy.python.org/dev/peps/pep-0020/&quot;&gt;zen of python&lt;/a&gt; says, &quot;Readability counts&quot;.&lt;/p&gt;
&lt;p&gt;A simple crawler to print every node is written below. It consists of two functions.&lt;/p&gt;
&lt;p&gt;The first one is a generic function &lt;code&gt;crawl&lt;/code&gt;, that crawls the expression tree, calls &lt;code&gt;func&lt;/code&gt; on each node, and returns the result if there is one. Otherwise it recurses down a level into the child nodes, forming a list of &lt;code&gt;new_args&lt;/code&gt;, and then calls &lt;code&gt;expr.func&lt;/code&gt; to rebuild the expression from those args.&lt;/p&gt;
&lt;p&gt;The second one is a printer function. As we don't want to modify the expression at all, we'll just print the node, and then return the expression if it doesn't have args (it's a leaf node). Note that there are more efficient ways to traverse the tree and print all the nodes - this is mostly to demonstrate &lt;code&gt;crawl&lt;/code&gt;, as it will be used later.&lt;/p&gt;
&lt;p&gt;Using these two functions a function that crawls the tree, prints every node, and returns the original expression can be composed using a simple lambda statement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [7]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Crawl the expression tree, and apply func to every node.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Print out every node&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let's test this function on our expression from above:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [8]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Checking that the expression was unchanged (temp == test)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;a**2/b + a*cos(a + b)
a**2/b
a**2
a
2
1/b
b
-1
a*cos(a + b)
a
cos(a + b)
a + b
b
a

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Comparing the printed results with the tree diagram from before, one can see how each big expression can be decomposed into smaller expressions. Further, the rebuilt expression after traversing was identical to the input expression. In the next section we'll write another function that changes the expression tree using &lt;code&gt;crawl&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;a-custom-subs-function&quot;&gt;A Custom &lt;code&gt;subs&lt;/code&gt; Function&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;In &lt;code&gt;sympy.physics.mechanics&lt;/code&gt;, we deal with symbols, dynamic symbols (which are of type &lt;code&gt;AppliedUndef&lt;/code&gt;), and derivatives of these dynamicsymbols. Unfortunately, the provided &lt;code&gt;subs&lt;/code&gt; function traverses inside the &lt;code&gt;Derivative&lt;/code&gt; terms, giving underdesired results:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [9]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.physics.mechanics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x, y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[9]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;a*(x(t) + Derivative(x(t), t))
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [10]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Subbing in b for x. Desired result is a*(b + x.diff())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[10]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;a*(b + Derivative(b, t))
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To get around this problem, we've been using a custom function &lt;code&gt;_subs_keep_derivs&lt;/code&gt;. This function creates two substitution dictionaries - one with &lt;code&gt;Derivative&lt;/code&gt;, and one without. Four substitutions then take place:&lt;/p&gt;
&lt;ol style=&quot;&quot;&gt;
&lt;li&gt;Perform subs with the terms in the derivative dictionary&lt;/li&gt;
&lt;li&gt;Substitute in &lt;code&gt;Dummy&lt;/code&gt; symbols for all &lt;code&gt;Derivative&lt;/code&gt; terms in the resulting expression&lt;/li&gt;
&lt;li&gt;Perform subs with the terms in the non-derivative dictionary&lt;/li&gt;
&lt;li&gt;Substitute back the original &lt;code&gt;Derivative&lt;/code&gt; terms from the &lt;code&gt;Dummy&lt;/code&gt; symbols&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is slow due to the need for &lt;em&gt;four calls to expr.subs&lt;/em&gt;. Also, &lt;code&gt;subs&lt;/code&gt; applies substitutions sequentially (i.e. each term in the substitution dict requires its own tree traversal). For our purposes in &lt;code&gt;mechanics&lt;/code&gt;, this is unecessary. Using the already written &lt;code&gt;crawl&lt;/code&gt; function, we can compose our own &lt;code&gt;subs&lt;/code&gt; that ignores terms inside derivative objects fairly easily:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [11]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Perform expression subsitution, ignoring derivatives.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_Derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;That's it. Due to the composable nature of &lt;code&gt;crawl&lt;/code&gt;, the code needed to perform this operation is incredibly simple. Let's test it to make sure it on our previous expression:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [12]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Simple example&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[12]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;a*(b + Derivative(x(t), t))
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So it leaves terms inside derivaties alone, exactly as desired. We can see how this compares to the previous implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [13]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Old way of doing things, taken from sympy.physics.mechanics.functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_subs_keep_derivs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Performs subs exactly as subs normally would be,&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    but doesn't sub in expressions inside Derivatives.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atoms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deriv_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_Derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_Derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dict_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dict_from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deriv_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dict_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [14]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Benchmark substitution&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using _subs_keep_derivs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_subs_keep_derivs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using new_subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Using _subs_keep_derivs
100 loops, best of 3: 3 ms per loop
Using new_subs
10000 loops, best of 3: 39.9 µs per loop

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So it's significantly faster. For this small benchmark, approximately 75x faster. Also, as it works in only one traversal of the tree it has a smaller computational complexity - meaning that for larger expressions this speed increase will be even higher. For kicks, let's see how it compares to normal subs for an expression without derivatives:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [15]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# For kicks, see how it compares to subs for expr without derivative:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using new subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Using subs
1000 loops, best of 3: 676 µs per loop
Using new subs
1000 loops, best of 3: 247 µs per loop

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So our implementation of &lt;code&gt;subs&lt;/code&gt; is faster than sympy's. However, this micro benchmark isn't all that meaningful. Normal &lt;code&gt;subs&lt;/code&gt; works in multiple passes so that expressions inside the &lt;code&gt;sub_dict&lt;/code&gt; are also affected. &lt;code&gt;subs&lt;/code&gt; also incorporates math knowledge about the expressions, while ours just does a naive direct match and replace. For our purposes though, this is sufficient. Also, as with all micro-benchmarks, this should be taken with a grain of salt. The main point is that our custom subs function is &lt;em&gt;significantly faster&lt;/em&gt; than the old method of &lt;code&gt;_subs_keep_derivs&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;custom-simplification&quot;&gt;Custom Simplification&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The other major issue I discussed &lt;a href=&quot;http://jcrist.github.io/gsoc-week-6.html&quot;&gt;last week&lt;/a&gt; was that some expressions result in &lt;code&gt;nan&lt;/code&gt; or &lt;code&gt;oo&lt;/code&gt; (infinity) when not simplified, but after simplification result in a realizable expression. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [16]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Before simplification:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;After simplification:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Before simplification: nan
After simplification: 1

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For small expressions, doing &lt;code&gt;simplify&lt;/code&gt; before evaluation is acceptable, but for larger ones simplification is way too slow. However, these divide by zero errors are caused by subexpressions, not the whole expression. Using some knowledge of the types of expressions present in the mechanics module, we can come up with some simple heuristics for what can result in &lt;code&gt;nan&lt;/code&gt;, &lt;code&gt;oo&lt;/code&gt; and &lt;code&gt;zoo&lt;/code&gt;:&lt;/p&gt;
&lt;ol style=&quot;&quot;&gt;
&lt;li&gt;tan(pi/2)&lt;/li&gt;
&lt;li&gt;Fractions with 0 in the denominator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In reality, these are the same thing, because&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \tan(\pi/2) = \frac{\sin(\pi/2)}{\cos(\pi/2)} = \frac{1}{0} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Using this knowledge, we can come up with a simple algorithm for performing subs and catching these issues at the same time:&lt;/p&gt;
&lt;ol style=&quot;&quot;&gt;
&lt;li&gt;Replace all &lt;code&gt;tan(*)&lt;/code&gt; with &lt;code&gt;sin(*)/cos(*)&lt;/code&gt;. This will allow us to only have to check for denominator = 0 conditions.&lt;/li&gt;
&lt;li&gt;For nodes that are fractions, check if the denominator evaluates to 0. If so, apply &lt;code&gt;simplify&lt;/code&gt; to the fraction, and then carry on as normal.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This may not catch every instance that results in would result in a &lt;code&gt;nan&lt;/code&gt; without simplification, but it should catch most of them. Also, the algorithm is so simple, that it can be implemented in only a few lines. First, the &lt;code&gt;tan&lt;/code&gt; replacement. This requires almost no new code, as it can be composed using the already written &lt;code&gt;crawl&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [17]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tan_repl_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Replace tan with sin/cos&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_Derivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tan_repl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan_repl_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Testing it:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [18]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;tan_repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[18]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;sin(a)/cos(a) + sin(a)*cos(b)/(sin(b)*cos(a))
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So that works as expected. Now for the second pass; the subs with denominator checking and selective simplification. This takes a little bit more code than before, but I've heavily commented it so you should be able to see what's going on:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [19]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;smart_subs_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Decompose the expression into num, den&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fraction_decomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# If there is a non trivial denominator, we need to handle it&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;denom_subbed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;den&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom_subbed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;evalf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# If denom is 0 after this, attempt to simplify the bad expr&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;# Expression won't result in nan, find numerator&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;num_subbed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_subbed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denom_subbed&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# We have to crawl the tree manually, because `expr` may have been&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# modified in the simplify step. First, perform subs as normal:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smart_subs_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fraction_decomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Return num, den such that expr = num/den&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_Pow&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;den&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;den&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Finally, we can put everything from above inside a nice wrapper function:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [20]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;smart_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;Performs subs, checking for conditions that may result in `nan` or &lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    `oo`, and attempts to simplify them out.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    The expression tree is traversed twice, and the following steps are&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    performed on each expression node:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    - First traverse: &lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        Replace all `tan` with `sin/cos`.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    - Second traverse:&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        If node is a fraction, check if the denominator evaluates to 0.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        If so, attempt to simplify it out. Then if node is in sub_dict,&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        sub in the corresponding value.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan_repl_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let's see if it works as expected. Using a simple test case:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [21]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Without `smart_subs`:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;With `smart_subs`:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smart_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Without `smart_subs`:
nan
With `smart_subs`:
1

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;And some timings:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [22]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using `smart_subs`:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using simplification, then normal subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using trigsimp, then normal subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigsimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Using `smart_subs`:
10000 loops, best of 3: 92 µs per loop
Using simplification, then normal subs
10 loops, best of 3: 42.9 ms per loop
Using trigsimp, then normal subs
10 loops, best of 3: 30.8 ms per loop

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Using selective simplification, the same results can be obtained for a fraction of the cost. 360 times faster for this small test.&lt;/p&gt;
&lt;p&gt;Let's see what the overhead of &lt;code&gt;smart_subs&lt;/code&gt; is for an expression that doesn't need it:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [23]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new_subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;smart_subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using simplification, then normal subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Using trigsimp, then normal subs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trigsimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;new_subs
1000 loops, best of 3: 222 µs per loop
smart_subs
1000 loops, best of 3: 2.34 ms per loop
Using simplification, then normal subs
1 loops, best of 3: 1.11 s per loop
Using trigsimp, then normal subs
1 loops, best of 3: 815 ms per loop

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;So there's considerable overhead, which was expected. Still, it's much faster than using simplify first, and then running &lt;code&gt;subs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The best use method would be to first try it with &lt;code&gt;new_subs&lt;/code&gt;, and if you get a &lt;code&gt;nan&lt;/code&gt; or &lt;code&gt;oo&lt;/code&gt;, then try using &lt;code&gt;smart_subs&lt;/code&gt;. To aid in this, we can write a nice wrapper function &lt;code&gt;msubs&lt;/code&gt; that contains both methods:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [24]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;msubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;A custom subs for use on expressions derived in physics.mechanics.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    Traverses the expression tree once, performing the subs found in sub_dict.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Terms inside `Derivative` expressions are ignored:&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; x = dynamicsymbols('x')&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; msubs(x.diff() + x, {x: 1})&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Derivative(x, t) + 1&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    If smart=True, also checks for conditions that may result in `nan`, but&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    if simplified would yield a valid expression. For example:&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; (sin(a)/tan(a)).subs(a, 0)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    nan&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;gt;&amp;gt;&amp;gt; msubs(sin(a)/tan(a), {a: 0}, smart=True)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    1&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    It does this by first replacing all `tan` with `sin/cos`. Then each node&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    is traversed. If the node is a fraction, subs is first evaluated on the&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    denominator. If this results in 0, simplification of the entire fraction&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    is attempted. Using this selective simplification, only subexpressions&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    that result in 1/0 are targeted, resulting in faster performance.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# For matrices, func is applied to each element using `applyfunc`&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applyfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
In [25]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Check that the results are the same:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;msubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smart_subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[25]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;True
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This code has been included in my optimization branch, and is performing admirably against all the included tests (so much speed up!!!). The big test though is the bicycle example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;the-big-test&quot;&gt;The Big Test&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To really put this new code to the test I applied it to the &lt;a href=&quot;http://docs.sympy.org/dev/modules/physics/mechanics/bicycle_example.html&quot;&gt;bicycle example&lt;/a&gt;, which has operation counts ranging from 400,000 to several million depending on which expression you're working with. How did it fair? Mixed results...&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;msubs&lt;/code&gt; with &lt;code&gt;smart=False&lt;/code&gt; in the formation of the linearizer object resulted in a huge speed increase. Previously using &lt;code&gt;_subs_keep_derivs&lt;/code&gt; there resulted in a run time of several hours. Now it runs in 14 seconds!&lt;/p&gt;
&lt;p&gt;The second test is in the application of the operating point to the M, A, and B matrices. Previously evaluating these had resulted in &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;oo&lt;/code&gt;, and with operation counts exceeding 400,000 for M pre-simplification is out of the question. I tried using &lt;code&gt;msubs&lt;/code&gt; with &lt;code&gt;smart=True&lt;/code&gt; on this M, and let it run for 6 hours. It ended up consuming 98% of my RAM (4 GB worth), and it still wasn't done :( So for reasonable sized expressions the smart_subs we've implemented is acceptable, but it still doesn't work for the huge expressions. I'll have to keep working on optimizations to make this faster/reduce the initial expression size.&lt;/p&gt;
&lt;p&gt;Still, all is not lost. Going from formulation to M, A, and B without the operating point substitution now only takes 20 minutes - down from the several hours before. This is actually faster than the previous linearize method, but unforunately results in expressions that evaluate to &lt;code&gt;nan&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future Work&lt;/h2&gt;
&lt;p&gt;Per my &lt;a href=&quot;https://github.com/pydy/pydy/wiki/GSoC-2014-Application:-Jim-Crist-%28Linearization-Routines-for-Equations-of-Motion%29#timeline&quot;&gt;original timeline&lt;/a&gt; I was supposed to be working on &quot;pre-linearization&quot; routines for generating the equations of motion directly in linearized form. I think this will be dropped in favor of cleaning up and speeding up the existing codebase. There's some dead code that needs removing, and I have some other ideas for speed-ups that I'd like to try.&lt;/p&gt;
&lt;p&gt;After that, I hope to get to the original part 3 of the project, which is adding support for matrices to the code-generation code. Not sure if this would live in sympy or pydy, but it would be extremely useful to myself and others. For now I plan on taking it week-by-week.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;If you have thoughts on how to deal with the &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;oo&lt;/code&gt; issue, please let me know in the comments. Thanks!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 06 Jul 2014 22:25:00 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: This Week in CSymPy: #6-#7</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week6-7/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week6-7/</link>
	<description>&lt;p&gt;Week 7 for GSoC just ended. I successfully cleared the mid-term review, thanks &lt;a href=&quot;https://github.com/certik&quot;&gt;@certik&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started the week 6 by implementing refactoring the various instances of &lt;code&gt;subs&lt;/code&gt; by adding a method &lt;code&gt;create&lt;/code&gt; to construct classes with canonicalization. &lt;a href=&quot;https://github.com/sympy/csympy/issues/210&quot;&gt;#210&lt;/a&gt; was the relevant issue which was raised. I opened &lt;a href=&quot;https://github.com/sympy/csympy/pull/213&quot;&gt;pull 213&lt;/a&gt; to address this issue. This was a good addition as it reduced the line of codes by 117.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
After successfully resolving #210 I started working on the Complex Module. By the end of the sixth week, I had discussed with Ondrej regarding the basic structure for the Complex Class. We had decided to use the &lt;code&gt;mpq_class&lt;/code&gt; itself for the real and the imaginary part, as opposed to creating an alternate real or complex part.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/sympy/csympy/pull/223&quot;&gt;Pull 223&lt;/a&gt; implements the complex module. The class design structure could be found in the PR. 
&lt;br /&gt;&lt;br /&gt;
In Week 7 I was travelling back from University to home, so I couldn’t contribute much code for a couple of days.
By the end of Week 7, I had managed to implement some part of the basic API.
All the virtual functions are yet to be implemented, so right now I’m not returning an object in &lt;code&gt;from_mpq&lt;/code&gt;
&lt;br /&gt;&lt;br /&gt;
I will speed up during the next week and hope to merge the Complex Module.&lt;/p&gt;

&lt;h1 id=&quot;week-highlights&quot;&gt;Week Highlights!&lt;/h1&gt;

&lt;p&gt;Somewhere around this period, I crossed 100 commits into CSymPy master. Its been a long journey since I first started contributing to CSymPy.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Complete the basic API for &lt;code&gt;Complex&lt;/code&gt; Module and merge it into master.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Sat, 05 Jul 2014 13:45:00 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-7888716637890298695</guid>
	<link>http://gsocblog.blogspot.com/2014/07/this-week-was-unproductive-coding-wise.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This week was unproductive coding-wise. I spent most of the time designing and writing pseudo-code.&lt;br /&gt;&lt;br /&gt;For the Formal Power Series part of my project, last week I implemented the algorithm to find general term for series expansion of a function. Also various operations on series like addition, multiplication, composition were implemented.&lt;br /&gt;I store the coefficients of series in a Stream class which works on lazy evaluation scheme.&lt;br /&gt;&lt;br /&gt;However the Stream class currently is not a very generic one. It can only be used to represent series expansion of a function with parameters like &quot;x&quot;, &quot;general_term&quot; and methods for series arithmetics.&lt;br /&gt;&lt;br /&gt;To make it more generic, I'll make the Stream class act only as a container to store elements (infinitely many in lazy scheme).&lt;br /&gt;To represent infinite series, there will be another class - Lazyseries. It will store its coefficients using the Stream class and will contain the methods for series arithmetics.&lt;br /&gt;This way, the stream class can also be used to store other infinite structures. E.g.:- Fibonacci series can be represented in the following way using &quot;Stream&quot;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; def fib(x, y):  &lt;br /&gt;   head = (x, y)  &lt;br /&gt;   tail = lambda: fib(y, x+y)  &lt;br /&gt;   return Stream(head, tail)  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;But I'm a bit unsure if this is the best way for lazy evaluation. Currently I store the first element and the rest of the elements as a lambda function. Lambda function delays the evaluation of the tail. I don't know if this is the most efficient method in terms of memory and speed.&lt;br /&gt;&lt;br /&gt;As an example:- Multiplication of two series is defined as:-&lt;br /&gt;head = head1 * head2&lt;br /&gt;tail = head1 * tail2 + head2 * tail1 + tail1 * tail2&lt;br /&gt;Now when tail is evaluated continuously, many stream objects are created in the memory resulting in memory overflow. I'm working on this.&lt;/div&gt;</description>
	<pubDate>Sat, 05 Jul 2014 08:53:52 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Tarun Gaba: GSoC 14: Midterm Evaluations have ended!</title>
	<guid isPermaLink="true">http://tarzzz.github.io/gsoc14/post-mid-terms.html</guid>
	<link>http://tarzzz.github.io/gsoc14/post-mid-terms.html</link>
	<description>{% include JB/setup %}


[ &amp;lt;-Back to posts ](/gsoc14)

It has been a week after the midterm evaluations are over, and I am back to work
after a small break(with permission from my mentor, off course!).
I have been working on writing a test suite for the Dynamics Visualizer. This
is the wrapping up part of the visualizer for this gsoc.

[Here](/blog/visualization/index.html?load=samples/scene_desc.json) is a visualization 
of a rolling disc(it is slightly buggy though), that i prepared.

To view the animation, allow the visualization to load in the webpage(it shall load
automatically), and then hit the `Play Animation` button.


After writing some tests for visualizer, I am going to start fleshing out API
for the module, to provide IPython support to the visualizer. The main aim of
writing this module is to make visualizer interactive, in the sense, that a user 
should be able to change all the variables from the GUI(which is rendered
inside notebook's output cell) and then rerun the simulations without having to 
write any code, or execute any of the code manually. The data of the new simulations
will be automatically fed into visualizer, and then it can be viewed as an animation.

This whole workflow will be very convenient for the existing PyDy users, as well as
the new ones. It will be particularly convenient for those who want to just play around
with the existing systems, by changing the system variables, and view how it affects
the resulting animations.

With the development of this module, as well as ongoing improvements in the other PyDy
modules(by my fellow GSoC'ers from PyDy), we should be able to perform lightening fast
simulations for a system, as well as view them on a canvas. 

I will keep posting the new work I will be doing, with better details(once I actually start
implementing new stuff!).

[ &amp;lt;-Back to posts ](/gsoc14)</description>
	<pubDate>Fri, 04 Jul 2014 17:40:37 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 6</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=91</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-6/</link>
	<description>&lt;p&gt;Welcome back everyone,&lt;/p&gt;
&lt;p&gt;This week I set about to fix one of my long pending PR associated with Propositional Logic. Following that I worked on conversion to Prenex Normal Form and Skolem Normal Form. Firstly, let me talk about the PR associated with Propositional Logic. It basically involved adding small functions like validity, entailment and some small modifications to the Propositional Knowledge Base. I assume most of the readers would be familiar with the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Validity&quot; target=&quot;_blank&quot; title=&quot;Validity&quot;&gt;validity&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Logical_consequence&quot; target=&quot;_blank&quot; title=&quot;Entailment&quot;&gt;entailment&lt;/a&gt; but I will briefly mention the algorithm to compute this and the intuition behind the same. Validity is given by &lt;code&gt;not satisfiable(Not(expr))&amp;lt;/expr&amp;gt;&lt;/code&gt;. Why does this work? If an expr is valid then it is True under all interpretations. Therefore &lt;code&gt;Not(expr)&lt;/code&gt; is always False i.e. it cannot be satisfied by any model. Hence if the negation of the expr is unsatisfiable then the original formula is valid. Moving on to entailment, the conventional definition stands that a set of formulas formula_set entails a formula expr iff expr is True whenever formula_set is True. That basically boils down to &lt;code&gt;And(*formula_set) &amp;gt;&amp;gt; expr&lt;/code&gt;. However there is another method, to accomplish the same, namely &lt;code&gt;not satisfiable(And(~expr, *formula_set))&lt;/code&gt;. Ok, firstly why does this non-intuitive expression even work? Well whenever formula set is True, expr must be True (for the entailment to hold) hence ~expr must be False thereby making the entire conjunction False. If the formula_set is False then the conjunction is clearly False. So if the entailment is to hold then the conjunction must be unsatisfiable, which is exactly what was implied earlier. Let us look at one special case before moving on. What if the formula_set is empty. While the solution is a matter of convention to a good extent, SymPy uses ideas from the second formula to resolve the ambiguity which yields &lt;code&gt;not satisfiable(And(~expr))&lt;/code&gt; which is exactly the same as validity of expr. Theoretically entailment means “Given &lt;em&gt;this&lt;/em&gt; what can we infer”. So, given nothing we can only infer that, which is always the truth. Except for these changes I also made changes to PropKB which is probably best not discussed at the moment.&lt;/p&gt;
&lt;p&gt;Coming now to the major interest of the post. The major time was spent in the functionality for conversion to &lt;a href=&quot;http://en.wikipedia.org/wiki/Prenex_normal_form&quot; target=&quot;_blank&quot; title=&quot;PNF&quot;&gt;Prenex Normal Form&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Skolem_normal_form&quot; target=&quot;_blank&quot; title=&quot;SNF&quot;&gt;Skolem Normal Form&lt;/a&gt;. Without going into a lot of details let me introduce these to you. A formula in PNF consists of a sequence of Quantifiers (containing both Universal and Existential quantifiers) followed by a Quatifier-less expression. The series of Quantifiers is called a &lt;em&gt;prefix&lt;/em&gt; while the expression is called the matrix. Now, every formula in FOL can be converted to an &lt;em&gt;equivalent&lt;/em&gt; formula in PNF. The matrix can be compared to a formula in propositional logic (if we think of the predicates as literals of PL) and most of the operations of PL become relevant. However we cannot completely ignore the prefix and hence we try to perform some operations such that we can look at the matrix without any regard to the prefix. This brings us to the Skolem Normal Form. A formula is converted to SNF by first converting it to PNF then dropping the Existential quantifiers (according to some rule). Now the prefix contains only Universal quantifiers, which are assumed to be implicitly implied and hence simply ignored while looking at the matrix. I will be updating the various rules for conversion and examples soon. Till then stay tuned.&lt;/p&gt;
&lt;p&gt;Arrivederci&lt;/p&gt;</description>
	<pubDate>Thu, 03 Jul 2014 18:13:06 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: week 6</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-6.html</guid>
	<link>https://hargup.github.io/posts/week-6.html</link>
	<description>&lt;h3&gt;Solving Trigonometric Function (part II)&lt;/h3&gt;
&lt;p&gt;There is another technique to solve trigonometric function. Just as every
trigonometric function can be written in term of \( \tan \) it can also be written
in terms of \( \exp \).&lt;/p&gt;
&lt;p&gt;$$ sin(x) = - \frac{i}{2} \left(e^{i x} - e^{- i x}\right) $$
$$ cos(x) = \frac{e^{i x}}{2} + \frac{1}{2} e^{- i x} $$
$$ tan(x) = \frac{i \left(- e^{i x} + e^{- i x}\right)}{e^{i x} + e^{- i x}} $$
$$ cot(x) = \frac{i \left(e^{i x} + e^{- i x}\right)}{e^{i x} - e^{- i x}} $$&lt;/p&gt;
&lt;p&gt;So, solving a trigonometric equation is equivalent to solving a rational
function in \( \exp \). Note: here the \( \exp \) is in complex domain and
equation \( exp(x) = y \) has solution
\( \left\{i \left(2 \pi n + \arg{\left (y \right )}\right) + \log{\left (\left\lvert{y}\right\rvert \right )}\; |\; n \in \mathbb{Z}\right\} \)
when solved for \( x \).&lt;/p&gt;</description>
	<pubDate>Wed, 02 Jul 2014 08:43:01 +0000</pubDate>
</item>
<item>
	<title>Sudhanshu Mishra: GSoC'14 progress: Week 6</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-8847459392628952171.post-3401083357494053543</guid>
	<link>http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-week-6.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;It was a busy week though I managed to do some work.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I've been working on following things:&lt;/div&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;Integrating &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;TWave&lt;/code&gt; with &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;refraction_angle&lt;/code&gt;(&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7626&quot;&gt;7626&lt;/a&gt;)&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Interference class&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Some blocking 3D geometry code got merged yesterday which gives me a lot of new things to work on. :-)&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I also tried to take a look on very old &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/1226&quot;&gt;patch&lt;/a&gt; for &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;gaussopt&lt;/code&gt;.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;This week I wrote a script to update the development documentation when a PR gets merged into the master. This is up and running.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I passed mid term evaluation that took place last week and I would like to thank &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/flacjacket&quot;&gt;Sean&lt;/a&gt;, &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt;,&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/asmeurer&quot;&gt;Aaron&lt;/a&gt; and &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/smichr&quot;&gt;Chris&lt;/a&gt; for their constant support.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;That's all for now. &lt;em style=&quot;&quot;&gt;Cheers!&lt;/em&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 02 Jul 2014 03:27:16 +0000</pubDate>
	<author>noreply@blogger.com (Sudhanshu Mishra)</author>
</item>
<item>
	<title>Akshay Narasimha: Gsoc Week-6</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-9069493126125199249</guid>
	<link>http://geekpy.blogspot.com/2014/06/gsoc-week-6.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Sorry for the late post ,had an issue with my data card . First of all I couldn't get my PR's (Line3D, Plane) merged as Stefan was busy, though I addressed all of his issues and hopefully it is time before they get merged.&lt;br /&gt;&lt;br /&gt;I started working on the Hyperbola class, you can find the code &lt;a href=&quot;https://github.com/akshayah3/sympy/blob/hyperbola/sympy/geometry/hyperbola.py&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;This week I plan to continue the work on the Hyperbola class and hopefully will get my previous PR's merged.&lt;br /&gt;&lt;br /&gt;Until then cheers! &lt;/div&gt;</description>
	<pubDate>Tue, 01 Jul 2014 04:22:20 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>
<item>
	<title>Kundan Kumar: GSoC Week 6: Docs of system of ODEs</title>
	<guid isPermaLink="false">http://kundankumar185.wordpress.com/?p=102</guid>
	<link>http://kundankumar185.wordpress.com/2014/06/29/102/</link>
	<description>&lt;p&gt;This week has been hell of a week of work and enjoyment with marriage preparation of my cousin. This lead to very less progress in my project work. I was unable to do much with just completion of docs of all implemented methods of system of ODEs. The non-linear system of ODEs which was left on last week has not been much progressed since then.&lt;/p&gt;
&lt;p&gt;I have confusion too on representation of few things which I posted on &lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/LjAIJVt_FyA&quot;&gt;mailing list&lt;/a&gt;. I need community opinion on these things before I proceed on these facts. This will be all for this week. Rest I intend to implement non-linear system of first order for 3 equations during next week.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/102/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/102/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=102&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 29 Jun 2014 16:52:34 +0000</pubDate>
</item>
<item>
	<title>Sachin Joglekar: GSoC Week 6: Completing coordinate systems</title>
	<guid isPermaLink="false">http://codesachin.wordpress.com/?p=19</guid>
	<link>http://codesachin.wordpress.com/2014/06/29/gsoc-week-6-completing-coordinate-systems/</link>
	<description>&lt;p&gt;Phew. This was a busy week. Initially, the plan was to push a WIP PR (without tests maybe) with the code for coordinate systems and point classes. Midway through the week, Jason and I decided to push this new code to the first PR itself, and merge the entire fundamental framework together – in a single PR. Initially I did get a little worked up looking at the amount of work that needed to be done.&lt;/p&gt;
&lt;p&gt;However, things moved much faster than expected – though with a lot of issues along the way. There were problems with the args for CoordSysRect, then some issues with the Tree-algorithm for inter-point distance calculation, and then some more with the code that implements orientation of systems wrt each other…you get the drift. But the code is finally done and polished, along with the unit tests and doctests. Thats why the late post this week – I ‘bravely’ decided to get the code fully working, without glitches, and then only do the blogpost for the week. Thankfully, the plan was a success &lt;span class=&quot;wp-smiley emoji emoji-bigsmile&quot; title=&quot;:-D&quot;&gt;:-D&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Some minor things still remain, like renaming of some attributes to follow conventions  – mostly cosmetic changes, nothing that will affect how the code works.&lt;/p&gt;
&lt;p&gt;The next immediate steps now would be -&lt;/p&gt;
&lt;p&gt;1. Finish off the PR and get it merged.&lt;/p&gt;
&lt;p&gt;2. Study caching mechanisms and implement them in a new ‘patch’ PR.&lt;/p&gt;
&lt;p&gt;The first PR is &lt;a href=&quot;https://github.com/sympy/sympy/pull/7566&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you later then, next week &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/19/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/19/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=19&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 29 Jun 2014 11:28:14 +0000</pubDate>
</item>
<item>
	<title>Avichal Dayal</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-283806077182880539.post-1947632693391126346</guid>
	<link>http://gsocblog.blogspot.com/2014/06/a-bit-late-for-this-weeks-blog.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&amp;lt;script src=&quot;http://latex.codecogs.com/latexit.php?p&amp;amp;amp;li&amp;amp;amp;div&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;  &lt;br /&gt;&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;A bit late for this week's blog.&lt;br /&gt;&lt;br /&gt;Implementing the solveRE() method took longer than I expected. I spent most of this week doing that. This method solves recurrence equation to get the general term for series expansion of a function.&lt;br /&gt;rsolve() can solve some equations but not recurrences of hypergeometric type.&lt;br /&gt;&lt;br /&gt;Hypergeometric recurrence equation is of type:-&lt;br /&gt;Q(k) * r(k + m) = P(k) * r(k)&lt;br /&gt;where P(k) and Q(k) are rational functions in k.&lt;br /&gt;&lt;br /&gt;For the case when m = 1, there exists a simple formula to get r(k).&lt;br /&gt;When m &amp;gt; 1, we can represent it as sum of m-shifted m-fold symmetric functions.&lt;br /&gt;For e.g.:- Let the RE be,&lt;br /&gt;r(k + m) = R(k) . r(k)&lt;br /&gt;We replace k with mk and r(mk) with c(k) we get,&lt;br /&gt;r(m(k+1)) = R(mk) . r(mk) which is equivalent to&lt;br /&gt;c(k+1) = R(mk) . c(k)&lt;br /&gt;Now we can use the same formula for the case when m = 1.&lt;br /&gt;&lt;br /&gt;Similarly by replacing m with km + 1, km + 2 ...., we can solve for r(k) as sum of m-shifted m-fold symmetric functions.&lt;br /&gt;&lt;br /&gt;Here are some results:-&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-_dcemQVhEMw/U65p6UK-xvI/AAAAAAAAAc8/ustuXJs0CKs/s1600/FPS-1.png&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-_dcemQVhEMw/U65p6UK-xvI/AAAAAAAAAc8/ustuXJs0CKs/s1600/FPS-1.png&quot; border=&quot;0&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-QNwhi4R9cx8/U65p6KCONkI/AAAAAAAAAdA/Dfnsnqp7hek/s1600/FPS-2.png&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-QNwhi4R9cx8/U65p6KCONkI/AAAAAAAAAdA/Dfnsnqp7hek/s1600/FPS-2.png&quot; border=&quot;0&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The general terms are not in their simplest form. RisingFactorial must be re-written in terms of factorial to bring it to the usual form.&lt;br /&gt;&lt;br /&gt;Now, I'm able to find FPS or infinite series for a wide range of functions. Next week, I'll take care of efficiency and making the code more in line with SymPy's style.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sat, 28 Jun 2014 07:21:50 +0000</pubDate>
	<author>noreply@blogger.com (Avichal Dayal)</author>
</item>
<item>
	<title>Jim Crist: GSoC Week 6: Just the little things</title>
	<guid isPermaLink="false">tag:,2014-06-27:gsoc-week-6.html</guid>
	<link>http://jcrist.github.io/gsoc-week-6.html</link>
	<description>&lt;p&gt;I was rather busy with my research this week, so no time for a long-winded
post like &lt;a href=&quot;http://jcrist.github.io/gsoc-week-1.html&quot;&gt;some of my&lt;/a&gt; 
&lt;a href=&quot;http://jcrist.github.io/gsoc-week-4.html&quot;&gt;previous&lt;/a&gt; 
&lt;a href=&quot;http://jcrist.github.io/gsoc-week-5.html&quot;&gt;updates&lt;/a&gt;. There's not
much interesting to say anyway. This week was mostly spent on little fixes to
get my current &lt;a href=&quot;https://github.com/sympy/sympy/pull/7581&quot;&gt;pull request&lt;/a&gt; merged.&lt;/p&gt;
&lt;p&gt;Topping the list of things that are better than they were last week is speed.
The profiling I did &lt;a href=&quot;http://jcrist.github.io/gsoc-week-5.html&quot;&gt;last week&lt;/a&gt;
showed that the current function &lt;code&gt;sympy.physics.mechanics&lt;/code&gt; uses to solve a
system of linear equations (&lt;code&gt;_mat_inv_mul&lt;/code&gt;) is &lt;em&gt;sloooooooooow&lt;/em&gt;. The underlying 
reason is because &lt;code&gt;subs&lt;/code&gt; is slow - more on that later. I spent some time
swapping out all forms of solving ($A x = B$) for &lt;code&gt;LUsolve&lt;/code&gt;, the clear winner
of last weeks benchmarks. This resulted in a 10x speedup of the formulation of
equations for the &lt;a href=&quot;http://docs.sympy.org/dev/modules/ physics/mechanics/bicycle_example.html&quot;&gt;bicycle model example&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This bicycle example has become the bane of my existence for the last couple
weeks. It's a super slow test that I'd never actual gotten to run before. But
with the speed improvements made, it actual finishes in a reasonable time.
Except it still doesn't work. I'm able to run all the way up to&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But when I go to sub in values for symbols in these matrices, things get hairy.
There are two issues:&lt;/p&gt;
&lt;h3&gt;Issue 1: Get &lt;code&gt;nan&lt;/code&gt; when not simplified&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;M.subs(val_dict)&lt;/code&gt; results in &lt;code&gt;nan&lt;/code&gt; and &lt;code&gt;oo&lt;/code&gt; upon after &lt;code&gt;subs&lt;/code&gt;. But doesn't
if it's simplified before the subs. An example of this behavior would be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nan&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if this is simplified, this results in something completely different:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigsimp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, for the bicycle case M has &lt;em&gt;over 19 thousand operations&lt;/em&gt;. This doesn't
simplify quickly. Also, by default we don't simplify before &lt;code&gt;subs&lt;/code&gt; in
&lt;code&gt;Linearizer&lt;/code&gt; (you can opt in to simplify, but it's done right before the return,
so it won't affect the subbed result at all). Right now I'm looking through
ways to make the resulting expressions smaller after the formulation, as this 
will result in speedups for &lt;em&gt;all&lt;/em&gt; operations. This could be extremely helpful
for issue 2...&lt;/p&gt;
&lt;h3&gt;Issue 2: &lt;code&gt;subs&lt;/code&gt; is slow&lt;/h3&gt;
&lt;p&gt;because &lt;code&gt;A&lt;/code&gt; has &lt;em&gt;over 38 million operations&lt;/em&gt;!!! In this case &lt;code&gt;subs&lt;/code&gt; doesn't even
return. Ever. I left it running on my computer for 4 hours and came back and it
was still whirring along, fans on high, eating up all my ram. No idea how to
solve this. One possible solution is &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;csympy&lt;/a&gt;,
a fast core written in C++. Once this matures, &lt;code&gt;subs&lt;/code&gt;, &lt;code&gt;trigsimp&lt;/code&gt;, and other
time consuming operations used heavily in &lt;code&gt;sympy.physics.mechanics&lt;/code&gt; could rely
on the equivalent, faster, C++ versions. I filed an issue with an example
expression generated from the bicycle example (this one only had 147,841
operations, not nearly as bad). Hopefully Ondrej and the team can use this
as a benchmark problem to help improve &lt;code&gt;subs&lt;/code&gt; in csympy.&lt;/p&gt;
&lt;p&gt;If you have thoughts on how to overcome these issues, &lt;strong&gt;please let me know&lt;/strong&gt;.
I'm kind of stumped right now.&lt;/p&gt;
&lt;h2&gt;The Good News&lt;/h2&gt;
&lt;p&gt;I didn't want to end this post on a bad note, so I'll close with the remainder
of the things I did last week that actually worked:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Improved documentation! Docstrings that are worth reading, and a start on the
sphinx documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a deprecation warning for &lt;code&gt;KanesMethod.linearize&lt;/code&gt; to warn people about
the method change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major interface changes. Now all operating points are specified as a single
dictionary, or an iterable of dictionaries. This is to aid in consistency across
different system implementations. Referring to a dictionary as &lt;code&gt;u_op&lt;/code&gt; in 
&lt;code&gt;LagrangesMethod&lt;/code&gt; doesn't really make any sense, as Lagrange's method only uses
$q$, $\dot{q}$, and $\ddot{q}$. Also added a kwarg to make simplification of the
results optional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a method to the &lt;code&gt;LagrangesMethod&lt;/code&gt; class to calculate the value of the
multipliers at different points. This is useful for multiple reasons. The
multipliers have meaning, so knowing what the solution is symbolically is nice
for calculating the constraint forces. Also, when linearizing with Lagrange's
method, the multipliers have operating points as well, and these need to be
calculated based on the operating point for the other states ($q$, $\dot{q}$,
etc...). Now a user can go:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict_or_iterable_of_dicts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lam_op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve_multipliers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lam_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Or op_point.update if op_point is a dict, not a list of dicts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qd_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qd_ind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully in the next week I can get my PR merged, so the Lagrange stuff can
finally be submitted.&lt;/p&gt;</description>
	<pubDate>Sat, 28 Jun 2014 02:21:00 +0000</pubDate>
</item>
<item>
	<title>Thilina Rathnayake: [GSoC] Week 6: Cholesky and LDL Algorithms</title>
	<guid isPermaLink="false">http://thilinaatsympy.wordpress.com/?p=360</guid>
	<link>https://thilinaatsympy.wordpress.com/2014/06/27/gsoc-week-6-cholesky-and-ldl-algorithms/</link>
	<description>&lt;p&gt;This week I implemented Cholesky decomposition and LDL decomposition. In addition to that I fixed two errors In CSymPy. I was also bale to finish work with LU decomposition and merge it to master. Also, I could solve the system &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt; using fraction free &lt;strong&gt;LU&lt;/strong&gt; factorization.&lt;/p&gt;
&lt;h2&gt;Cholesky Decomposition&lt;/h2&gt;
&lt;p&gt;Cholesky decomposition can be applied to a &lt;strong&gt;Hermitian positive definite matrix&lt;/strong&gt;. &lt;strong&gt;Hermitian&lt;/strong&gt; matrix is a matrix with complex entries that is equal to it’s conjugate transpose &lt;strong&gt;[1]&lt;/strong&gt;. Hence a symmetric matrix with real entries can be considered as a &lt;strong&gt;Hermitian&lt;/strong&gt; matrix and can be decomposed using &lt;strong&gt;Cholesky&lt;/strong&gt; decomposition if it’s positive definite. A Symmetric matrix &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; is positive definite if &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=z%5ETAz&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;z^TAz&quot; class=&quot;latex&quot; title=&quot;z^TAz&quot; /&gt; is greater than zero for every non zero column matrix &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=z&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;z&quot; class=&quot;latex&quot; title=&quot;z&quot; /&gt;&lt;strong&gt; [2]&lt;/strong&gt;. If the above conditions are satisfied, Cholesky decomposition for a matrix &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; can be written as &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A+%3D+LL%5E%2A&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A = LL^*&quot; class=&quot;latex&quot; title=&quot;A = LL^*&quot; /&gt; where &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=L&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;L&quot; class=&quot;latex&quot; title=&quot;L&quot; /&gt; is an lower triangular Matrix. This is equal to &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A+%3D+LL%5ET&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A = LL^T&quot; class=&quot;latex&quot; title=&quot;A = LL^T&quot; /&gt; when &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=L&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;L&quot; class=&quot;latex&quot; title=&quot;L&quot; /&gt; is a real matrix. This factorization can be used for fast solution of the system &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt;. I am yet to use this decomposition in solving above mentioned system.&lt;/p&gt;
&lt;h2&gt;LDL Factorization&lt;/h2&gt;
&lt;p&gt;LDL decomposition is closely related to Cholesky decomposition. As the name implies, in LDL decomposition of a matrix &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A&quot; class=&quot;latex&quot; title=&quot;A&quot; /&gt; can be written as &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=A+%3D+LDL%5E%2A&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;A = LDL^*&quot; class=&quot;latex&quot; title=&quot;A = LDL^*&quot; /&gt; where &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=L&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;L&quot; class=&quot;latex&quot; title=&quot;L&quot; /&gt; is a lower triangular matrix and &lt;img src=&quot;https://s-ssl.wordpress.com/latex.php?latex=D&amp;amp;bg=ffffff&amp;amp;fg=000&amp;amp;s=0&quot; alt=&quot;D&quot; class=&quot;latex&quot; title=&quot;D&quot; /&gt; is a diagonal matrix &lt;strong&gt;[3]&lt;/strong&gt;. This decomposition can be used for some matrices which don’t have a Cholesky decomposition.&lt;/p&gt;
&lt;h2&gt;CSymPy printing error and simplification errror&lt;/h2&gt;
&lt;p&gt;I also worked on a printing error of CSymPy and a simplification error in &lt;strong&gt;Mul&lt;/strong&gt; class which is used to represent multiplication types in CSymPy. There is still some work to be done to fix simplification error completely. The most important thing was that we were able to introduce a fix which doesn’t create a considerable slow down in speed after being applied.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;[1] Hermitian Matrix, Wikipedia Article: &lt;a href=&quot;http://en.wikipedia.org/wiki/Hermitian_matrix&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Hermitian_matrix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] Positive definite Matrix, Wikipedia Article: &lt;a href=&quot;http://en.wikipedia.org/wiki/Positive-definite_matrix&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Positive-definite_matrix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] LDL Decomposition, Wikipedia Article: &lt;a href=&quot;http://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/360/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/360/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=360&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 27 Jun 2014 15:58:54 +0000</pubDate>
</item>
<item>
	<title>Harsh Gupta: week 5</title>
	<guid isPermaLink="true">https://hargup.github.io/posts/week-5.html</guid>
	<link>https://hargup.github.io/posts/week-5.html</link>
	<description>&lt;h3&gt;Solving Trigonometric Function (part I)&lt;/h3&gt;
&lt;p&gt;This week I spend time on making trigonometric solvers work.
Every trigonometric function can be written in terms of tan.&lt;/p&gt;
&lt;p&gt;$$ sin(x) = \frac{2*tan(x/2)}{tan^{2}(x/2)} $$&lt;/p&gt;
&lt;p&gt;$$ cos(x) = \frac{-tan^{2}(x/2) + 1}{tan^{2}(x/2) + 1} $$&lt;/p&gt;
&lt;p&gt;$$ cot(x) = \frac{1}{tan(x)} $$&lt;/p&gt;
&lt;p&gt;A basic technique to solve trigonometric equations can be rewriting the equation in terms of tan.
And if the equation is made by addition, multiplication or quotient of
trigonometric functions then the transformed equation is a equivalent to a rational
function in tan. That equation can be solved by the usual polynomial
solving techniques.&lt;/p&gt;
&lt;p&gt;Taking the example from the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/solvers&quot;&gt;doc&lt;/a&gt;
\( cos(x) + sin(x) \) gets converted to
\( \frac{-tan^{2}(x/2) + 2*tan(x/2) + 1}{tan^{2}(x/2) + 1} \)&lt;/p&gt;
&lt;p&gt;The solution of this equations is \( tan(x/2) = 1 +- sqrt(2) \).
Since the inverse of tan is
\( \left\{2 \pi n + \operatorname{atan}{\left (y \right )}\; |\; n \in \mathbb{Z}\right\} \)
the solution of the given equation is
$$ \left\{2 \pi n - \frac{\pi}{8}\; |\; n \in \mathbb{Z}\right\} \cup \left\{2 \pi n + \frac{3 \pi}{8}\; |\; n \in \mathbb{Z}\right\} $$&lt;/p&gt;
&lt;p&gt;Though it appears this technique should work universally for trigonometric
equation it fails for even \( sin(x) = 0 \). From the table above
\( sin(x) = \frac{2*tan(x/2)}{tan^{2}(x/2)} \)
So, the \( sin(x) = 0 \) occurs at \( tan(x/2) = 0 \) which has solution
\( \left\{2 \pi n\; |\; n \in \mathbb{Z}\right\} \)
But the solution is \( \left\{ \pi n\; |\; n \in \mathbb{Z}\right\} \)
. Why are we missing some solutions? The
reason is \( sin(x) = 0 \) also occurs when denominator tends to \( \infty \),
i.e.,
the values where \( tan^{2}(x/2) + 1 \) tends to \( \infty \).
We had encountered a similar problem for the solution of
$$ \frac{1}{\left(\frac{x}{x + 1} + 3\right)^{2}} $$&lt;/p&gt;
&lt;p&gt;here \( x = -1 \) is not a point in the domain of the of the equation. The solver
simplifies the equation to&lt;/p&gt;
&lt;p&gt;$$ \frac{\left(x + 1\right)^{2}}{\left(4 x + 3\right)^{2}} $$&lt;/p&gt;
&lt;p&gt;which extends the domain to include the point \( x = -1 \) which is also the
solution to the transformed equation. There we wrote a sub procedure
&lt;code&gt;domain_check&lt;/code&gt; to verify if the returned solution is part of the domain of the
original equation. The problem here is slightly different in the sense that
transforming the equation decreases the domain of the solutions and not increase
it.&lt;/p&gt;
&lt;p&gt;To find such solution we have allow \( \infty \) to be solution to equations, we
will be working on extended reals instead of just reals.  I think this change
will simplify a lot of things.&lt;/p&gt;
&lt;p&gt;Another thing which should be taken care off is that we cannot naively search
for the values for which the denominator tends to infinity as for the same
value numerator might also attain infinitely large value, we will have to
conceder the limiting value of the equation.&lt;/p&gt;</description>
	<pubDate>Thu, 26 Jun 2014 11:43:01 +0000</pubDate>
</item>
<item>
	<title>Soumya Dipta Biswas: GSoC 2014: Week 5</title>
	<guid isPermaLink="false">http://blog.s-d-b.com/?p=86</guid>
	<link>http://blog.s-d-b.com/gsoc-2014-week-5/</link>
	<description>&lt;p&gt;Hello Folks,&lt;/p&gt;
&lt;p&gt;This week was probably not as productive as I would have liked it to be. Firstly, it seems like the algorithm for faster conversion to CNF/DNF I talked about &lt;a href=&quot;http://blog.s-d-b.com/gsoc-2014-week-1-and-2/&quot; target=&quot;_blank&quot; title=&quot;Faster_NF&quot;&gt;before&lt;/a&gt; works fast conditionally. If a particular formula is already quite near to a particular normal form, then the conversion takes a longer time than the recursive algorithm. The overhead incurred for the conversion in this case starts to dominate the actual conversion. So, I am now parallelly working on fixing this problem and the FOL module (as scheduled). Hence, I majorly managed to do only 2 things this week namely Interpretation and conversion to Prenex Normal Form.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpretation&lt;/strong&gt;&lt;br /&gt;
Akin to &lt;code&gt;pl_true(expr, model)&lt;/code&gt; present in the propositional logic module, I have implemented a &lt;code&gt;fol_true(expr, model)&lt;/code&gt; for the FOL module. Before jumping into the concept of interpretation for First Order Logic, let us see what it means for Propositional Logic. If you are already familiar with the same, feel free to jump to the next paragraph. Now, the interpretation of an expression is the value of expression under an assignment. So given the formula &lt;code&gt;A | B&lt;/code&gt; such that &lt;code&gt;{A: True, B: False}&lt;/code&gt; the formula is True. So, this is essentially the evaluated &lt;em&gt;result&lt;/em&gt; of a formula given an assignment. This is quite similar to &lt;code&gt;a + b &amp;gt; 0&lt;/code&gt; which has no value inherently, but if a = 1 and b = 0, then the expression has a value (True). In some cases only a partial assignment is sufficient to determine the value of the expr. For e.g. &lt;code&gt;A &amp;amp; B&lt;/code&gt; with &lt;code&gt;A = False&lt;/code&gt; is clearly False without any regard for the value of B.&lt;/p&gt;
&lt;p&gt;In Propositional Logic, the most basic elements are symbols which can have one of True or False as its value. FOL on the other hand has many elements which can take on any value in the domain. While the concept of interpretation remains the same there, the number of things to be evaluated change. Interpretation in FOL is a rather complex job which will become quite apparent very soon. Let us set about to find the value of each of the basic elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constants are the easiest to evaluate, well because they stand for themselves.&lt;/li&gt;
&lt;li&gt;Variables are similar to variables in any mathematical expression and it is sufficient to simply give them a value. However, one may also give a variable a domain. This domain is the set of all values that the corresponding variable may assume.&lt;/li&gt;
&lt;li&gt;Next come the functions. For functions, one needs to provide a mapping of every possible set of arguments to its corresponding value. For e.g. for &lt;code&gt;f(X, Y)&lt;/code&gt; such that &lt;code&gt;X = {1, 2, 3}&lt;/code&gt; and &lt;code&gt;Y = {10, 20, 30}&lt;/code&gt;, one needs to provide a value for every feasible possible combination of X and Y.&lt;/li&gt;
&lt;li&gt;Predicates are almost the same as functions with the exception that the values they yield must be boolean. The examples below will probably make things much clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s look at an example that will give better perspective to the idea of Interpretation.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from sympy.abc import X, T
&amp;gt;&amp;gt;&amp;gt; from sympy.logic.FOL import Predicate, ForAll, Exists, fol_true
&amp;gt;&amp;gt;&amp;gt; Person = Predicate('Person')
&amp;gt;&amp;gt;&amp;gt; Time = Predicate('Time')
&amp;gt;&amp;gt;&amp;gt; CanFool = Predicate('CanFool')
&amp;gt;&amp;gt;&amp;gt; X_domain = ['John', 'Jack']
&amp;gt;&amp;gt;&amp;gt; T_domain = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; def person(X): return X in X_domain
&amp;gt;&amp;gt;&amp;gt; def time(T): return T in T_domain
&amp;gt;&amp;gt;&amp;gt; CanFoolMap = {('John',2):False, ('John',3):False, 'default':True}
&amp;gt;&amp;gt;&amp;gt; model = {X:X_domain, T:T_domain, Person:person, Time:time, CanFool:CanFoolMap}

# You can fool some of the people all of the time
&amp;gt;&amp;gt;&amp;gt; expr = Exists(X, ForAll(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
&amp;gt;&amp;gt;&amp;gt; fol_true(expr, model)
True

# You can fool all of the people some of the time
&amp;gt;&amp;gt;&amp;gt; expr = ForAll(X, Exists(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
&amp;gt;&amp;gt;&amp;gt; fol_true(expr, model)
True

# You can fool all of the people all of the time
&amp;gt;&amp;gt;&amp;gt; expr = ForAll(X, ForAll(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
&amp;gt;&amp;gt;&amp;gt; fol_true(expr, model)
False&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I hope that makes the idea of interpreation in general and how to use them in SymPy a little clearer. I will update the post giving more examples soon.&lt;/p&gt;
&lt;p&gt;Adios!!!&lt;/p&gt;</description>
	<pubDate>Wed, 25 Jun 2014 20:44:05 +0000</pubDate>
</item>
<item>
	<title>Sushant Hiray: This Week in CSymPy: #5</title>
	<guid isPermaLink="true">http://sushant-hiray.in/posts/gsoc/csympy-week5/</guid>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week5/</link>
	<description>&lt;p&gt;Week 5 for GSoC just ended and this week I completed implementing the Exponential Module.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started the week by implementing &lt;code&gt;LambertW&lt;/code&gt; function. It wasn’t a part of the original proposal but it is a nice addition to have so I implemented it.
&lt;br /&gt;&lt;br /&gt;
If you’re unaware, LambertW function is defined as the inverse function of x*exp(x). This function represents the principal branch  of this inverse function, which is multivalued. For more information, see:
&lt;a href=&quot;http://en.wikipedia.org/wiki/Lambert_W_function&quot;&gt;wiki&lt;/a&gt;. &lt;a href=&quot;https://github.com/sympy/csympy/pull/200&quot;&gt;Pull 200&lt;/a&gt; implemented the LambertW class!
&lt;br /&gt;&lt;br /&gt;
After this, I worked on Hyperbolic module, which was the main target for this week. &lt;a href=&quot;https://github.com/sympy/csympy/pull/203&quot;&gt;Pull 203&lt;/a&gt; implemented the hyperbolic module. 
In addition to the normal functions which were implemented as a part of the TrigFunction API, we implemented &lt;code&gt;expand_as_exp&lt;/code&gt; in the Hyperbolic Module.
&lt;br /&gt;&lt;br /&gt;
With this in place, we can now do things like &lt;code&gt;sinh(x)-&amp;gt;expand_as_exp()&lt;/code&gt; and it will return the exponential form: &lt;code&gt;(e^x - e^{-x})/2&lt;/code&gt; using a combination of exp, adds and divs!
&lt;br /&gt;&lt;br /&gt;
Follow up to this PR we have openened a couple of issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/sympy/csympy/issues/207&quot;&gt;#207&lt;/a&gt; is a bug which I encountered while writing test cases. Essentially same symbolic expressions written in form of add and mul are not equated as equal.
This is a crucial issue and we are yet to see how to proceed further on this. SymPy also faced the same issue &lt;a href=&quot;https://github.com/sympy/sympy/issues/4596&quot;&gt;sympy/sympy#4596&lt;/a&gt; where it was decided to remove
such automatic redistribution. As &lt;a href=&quot;https://github.com/certik&quot;&gt;@certik&lt;/a&gt; suggested, it is perhaps the best to compare underneath via expand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/sympy/csympy/issues/210&quot;&gt;#210&lt;/a&gt; is basically a more generic way to cleanup the existing Trignometric and Hyperbolic Module. This for instance can be used to define the &lt;code&gt;subs&lt;/code&gt; method in the base class rather than writing almost the same code in each subsequent inherited class.
The only reason why this was being defined in all the classes was that we needed to access the method to create the class via canonicalization. I’ve proposed a couple of methods in which we can approach the problem.
Once decided we can fix this issue.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;As usual most of the actual discussions happened on PR, we were supposed to have a meetup on gitter but it was postponed.&lt;/p&gt;

&lt;h1 id=&quot;week-highlights&quot;&gt;Week Highlights!&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;CSymPy just crossed the 1000 commits mark! Yay! It is &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;1036&lt;/a&gt; at the time of writing.&lt;/li&gt;
  &lt;li&gt;The issue serial number has crossed the 200 mark!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite an interesting week this has been as far as milestones are concerned!&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Implement the long awaited &lt;code&gt;Complex&lt;/code&gt; Module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</description>
	<pubDate>Tue, 24 Jun 2014 13:45:00 +0000</pubDate>
</item>
<item>
	<title>Akshay Narasimha: Gsoc14 Week-5</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-54146973659574488.post-384394288691782141</guid>
	<link>http://geekpy.blogspot.com/2014/06/gsoc14-week-5.html</link>
	<description>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I did some good amount of work this week. I finished the implementation of the Plane class. &lt;a href=&quot;https://www.google.com/url?q=https%3A%2F%2Fgithub.com%2Fakshayah3%2Fsympy%2Fcommit%2F41f85a70d70d3654786f68257116fa14df3b2825&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNFKv7zI5GEVuPOZoRrZLVvy_uckVQ&quot;&gt;Here&lt;/a&gt; is the link to the code. I haven't sent a PR though as I am waiting for the merging of the Line3D class, which will happen soon enough as it had a few styling issues which I happen to fix in the latest commit.&lt;br /&gt;&lt;br /&gt;Here is the implementation of the interaction between 2D and 3D entities with the use of Planes.&lt;br /&gt;&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; a = Point(1, 2)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; b = Point3D(1, 3, 5)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; c = Plane(Point3D(x, y, z), normal_vector=[0, 0 ,1]) # Parallel to xy plane&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; d = c.projection(c) # A 3D point&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; d&lt;br /&gt;Point3D(1, 2, 0)&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt; d.distance(b)&lt;br /&gt;sqrt(26)&lt;br /&gt;&lt;br /&gt;Here are the things that I have implemented till now&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Point3D&lt;/li&gt;&lt;li&gt;Line3D&lt;/li&gt;&lt;li&gt;Ray3D&lt;/li&gt;&lt;li&gt;Segment3D&lt;/li&gt;&lt;li&gt;Plane&lt;/li&gt;&lt;/ul&gt;Among these only Point3D class has been merged but I will get most of the other classes merged this week, so that would complete the implementation of 3D Geometry as a whole.So I will spend most of this week trying to get these PR's merged.&lt;br /&gt;&lt;br /&gt;Until then cheers! &lt;/div&gt;</description>
	<pubDate>Tue, 24 Jun 2014 04:16:26 +0000</pubDate>
	<author>noreply@blogger.com (Akshay Narasimha)</author>
</item>

</channel>
</rss>
