<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:planet="http://planet.intertwingly.net/" xmlns:indexing="urn:atom-extension:indexing" indexing:index="no"><access:restriction xmlns:access="http://www.bloglines.com/about/specs/fac-1.0" relationship="deny"/>
  <title>Planet SymPy</title>
  <updated>2014-07-29T19:21:02Z</updated>
  <generator uri="http://intertwingly.net/code/venus/">Venus</generator>
  <author>
    <name>Ondrej Certik</name>
    <email>ondrej@certik.cz</email>
  </author>
  <id>http://planet.sympy.org/atom.xml</id>
  <link href="http://planet.sympy.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="http://planet.sympy.org/" rel="alternate"/>

  <entry>
    <id>http://tarzzz.github.io/gsoc14/first-week.html</id>
    <link href="http://tarzzz.github.io/gsoc14/first-week.html" rel="alternate" type="text/html"/>
    <title>GSoC 14: First Week!</title>
    <summary>{% include JB/setup %}


[ &lt;-Back to posts ](/gsoc14)

First week of GSoC 14 has ended. It has been a week full of discussions and brainstorming over how to 
handle the project, and the collaboration. Most of the time was spent in taking crucial design decisions

As decided, I will be publishing these weekly blog posts in A.O.I format(_Accomplishments_, _Objectives_ and _Issues_)

###Accomplishments:

The main accomplishments of this week involved finalizing a stable API for the generic visualizer. Discussions were held
with Adam and it was decided that a fork of MGView will be used for developing the new visualizer. It will have a 
UI look similar to MGView, but with additional features pertaining to PyDy and related enhancements as well.

Apart from that another main aim was to flesh out an API for the visualizer. The generic visualizer will be made up
of following modules:

  - Parser Module: to parse the JSON and save it in JS objects/variables

  - SceneGenerator Module: To take the relevant data and information from parsed JSON and create a scene on the canvas.

  - SceneEditor Module: Using GUI controls to edit the scene and save them in a JSON file.

  - ParamsEditor Module: Using GUI widgets to modify the simulation parameters, and send/save them as relevant.


###Objectives:

The objectives of the upcoming week are:

 - To develop the Parser Module to be able to consume JSON from both PyDy and MG and parse them into
   relevant Javascript objects.

 - To develop methods on PyDy side to generate the JSON in the form that MotionView can consume.

 - To test some benchmark examples to check this workflow: output from PyDy --&gt; JSON --&gt; consumed by Parser Module.


###Issues:

 Since actual coding work is not started yet!, there are no technical issues encountered so far.



I will keep this blog updated with the regular advancements in the project.



Happy Coding!


[ &lt;-Back to posts ](/gsoc14)</summary>
    <updated>2014-07-29T16:00:41Z</updated>
    <source>
      <id>http://tarzzz.github.io/gsoc14</id>
      <author>
        <name>Tarun Gaba</name>
      </author>
      <link href="http://tarzzz.github.io/gsoc14" rel="alternate" type="text/html"/>
      <link href="http://tarzzz.github.io/rss.gsoc.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts categorized under GSoC</subtitle>
      <title>Tarun Gaba's blog - GSoC</title>
      <updated>2014-07-29T19:20:39Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-10.html</id>
    <link href="https://hargup.github.io/posts/week-10.html" rel="alternate" type="text/html"/>
    <title>week 10: Radical equations</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I worked on the solvers for the equations with radicals.
Suppose you have to solve</p>
<p>$$ \sqrt{x} + x - 2 = 0 $$.</p>
<p>then you have to move the radical to the right hand side of the equation.</p>
<p>$$ x - 2 = - \sqrt{x} $$</p>
<p>and then square at both sides</p>
<p>$$ x^2 - 4x + 4 = x $$</p>
<p>Now the equation is a polynomial in \( x \) can be solved with usual
polynomial solving methods. Note that squaring both sides produce some extra
solutions and we will have to check all the solutions obtained against the
original equation.  If there are more than one radicals involved we may
have to apply the method recursively. For example in solving
\( \sqrt{2x + 9} - \sqrt{x + 1} - \sqrt{x + 4} = 0 \)
the method will recurse twice.</p>
<p>To implement the method I tried a pattern matching approach.
The
squaring part is easy the tricky part is identifying which part to move to
the right hand side. First I tried to match the expression with the form
<code>sqrt(p) + q</code> but it failed even for case like <code>4*sqrt(x) + x - 2</code> because no
pattern matched to it. I had to use <code>a*sqrt(p) + q</code> with the condition that the
expression matched to a shouldn't be zero. Now I can simply move the expression
matched with <code>p</code> and terms multiplicated with it to the RHS and square both
the sides.</p>
<p>Notice that this method for solving sqrt equation can work with any radical
equation, if it were cube root instead of sqrt I just had to cube both the
sides. OK so how do I mathch that expression? I tried to pattern matching with
assumptions on the wild symbols but it doesn't work.  I tried to match with
somthing like <code>a*p**Rational(1, m) + q</code> but this also didn't work out because
Rational(1, m) raises TypeError no matter what the assumption on the variable
are.  There is a proposal for a new pattern matcher, I have not closely checked
the details but it will be able to work with assumption. You can see the
proposal on the wiki
<a href="https://github.com/sympy/sympy/wiki/Proposal-for-a-new-pattern-matching">here</a>
and if it is implemented then things will be good but I can't wait for it.
I had no other option to check term by term for rational power. Here's the
implementation</p>
<pre class="code literal-block"><span class="n">def</span> <span class="n">_has_rational_power</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span><span class="o">:</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">Wild</span><span class="p">(</span><span class="sc">'a'</span><span class="p">),</span> <span class="n">Wild</span><span class="p">(</span><span class="sc">'p'</span><span class="p">),</span> <span class="n">Wild</span><span class="p">(</span><span class="sc">'q'</span><span class="p">)</span>
    <span class="n">pattern_match</span> <span class="o">=</span> <span class="n">expr</span><span class="p">.</span><span class="n">match</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">p</span><span class="o">**</span><span class="n">q</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pattern_match</span> <span class="n">is</span> <span class="n">None</span> <span class="n">or</span> <span class="n">pattern_match</span><span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="n">is</span> <span class="n">S</span><span class="p">.</span><span class="n">Zero</span><span class="o">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">False</span><span class="p">,</span> <span class="n">None</span><span class="p">)</span>
    <span class="n">elif</span> <span class="n">isinstance</span><span class="p">(</span><span class="n">pattern_match</span><span class="p">[</span><span class="n">q</span><span class="p">],</span> <span class="n">Rational</span><span class="p">)</span><span class="o">:</span>
        <span class="k">if</span> <span class="n">not</span> <span class="n">pattern_match</span><span class="p">[</span><span class="n">q</span><span class="p">].</span><span class="n">q</span> <span class="o">==</span> <span class="n">S</span><span class="p">.</span><span class="n">One</span><span class="o">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">True</span><span class="p">,</span> <span class="n">pattern_match</span><span class="p">[</span><span class="n">q</span><span class="p">].</span><span class="n">q</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">not</span> <span class="n">isinstance</span><span class="p">(</span><span class="n">pattern_match</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">Pow</span><span class="p">)</span> <span class="n">or</span> <span class="n">isinstance</span><span class="p">(</span><span class="n">pattern_match</span><span class="p">[</span><span class="n">a</span><span class="p">],</span> <span class="n">Mul</span><span class="p">)</span><span class="o">:</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">False</span><span class="p">,</span> <span class="n">None</span><span class="p">)</span>
    <span class="nl">else:</span>
        <span class="k">return</span> <span class="n">_has_rational_power</span><span class="p">(</span><span class="n">pattern_match</span><span class="p">[</span><span class="n">a</span><span class="p">])</span>
</pre></div>
    </summary>
    <updated>2014-07-29T12:09:01Z</updated>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-4950031512117145558</id>
    <link href="http://blog.sudhanshumishra.in/feeds/4950031512117145558/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-week-10-adding-more-to-utils.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/4950031512117145558" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/4950031512117145558" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-week-10-adding-more-to-utils.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 Week 10: Adding more to utils</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">This week I worked on adding more utility function in optics. Some of them are yet to be added. I'll send a pull request once I write tests for them.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Here's the link to the code pushed till now:</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;"><a href="https://github.com/debugger22/sympy/compare/util-funcs" style="color: blue;">https://github.com/debugger22/sympy/compare/util-funcs</a></div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I also worked on one of my pending PR(<a href="https://github.com/sympy/sympy/pull/7686" style="color: blue;">https://github.com/sympy/sympy/pull/7686</a>) parameterizing a 3D circle. This will make the implementation a bit easier.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Tomorrow I'll be going back to college.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">That's all for now. Cheers!</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;"><br/></div></div></div>
    </content>
    <updated>2014-07-28T09:05:46Z</updated>
    <published>2014-07-28T09:05:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://codesachin.wordpress.com/2014/07/28/gsoc-week-10-polishing-off-the-main-vector-framework/</id>
    <link href="http://codesachin.wordpress.com/2014/07/28/gsoc-week-10-polishing-off-the-main-vector-framework/" rel="alternate" type="text/html"/>
    <title>GSoC Week 10: Polishing off the main vector framework</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This was a tiring week, with me being sick with a bad case of sinus for 3 days. Phew. Even then, I did manage to get quite a bit of work done in the time I could manage to sit in front of the computer without getting a headache. Some main points of progress - […]<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=23&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This was a tiring week, with me being sick with a bad case of sinus for 3 days. Phew. Even then, I did manage to get quite a bit of work done in the time I could manage to sit in front of the computer without getting a headache.<br/> Some main points of progress -</p>
<p>1. I finished off the Orienter classes, with a nice OO-structure, along with docs and tests. I basically changed the API of the <code>orient_new</code></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/23/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/23/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=23&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-28T07:25:26Z</updated>
    <category term="Google Summer of Code 2014"/>
    <author>
      <name>srjoglekar246</name>
    </author>
    <source>
      <id>http://codesachin.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://codesachin.wordpress.com/category/google-summer-of-code-2014/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://codesachin.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://codesachin.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>- Blog by Sachin Joglekar</subtitle>
      <title>Dream. Think. Code. » Google Summer of Code 2014</title>
      <updated>2014-07-29T19:20:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week10/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week10/" rel="alternate" type="text/html"/>
    <title>GSoC Week 10: Complex Complexions Resolved</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>After a significant amount of work in the past couple of weeks, I’ve finally completed the Complex Module.</p>

<h1 id="progress">Progress</h1>

<p>This week I merged <a href="https://github.com/sympy/csympy/pull/248">PR 248</a> which covered almost the entire of the complex module.
<br/><br/>
After merging this PR, Complex Numbers and <code>I</code> could be used in sync with other existing modules in CSymPy.
<a href="https://github.com/certik">@certik</a> refined the Python wrappers to integrate the Complex Module.
Here are the some of the things which could be done using CSymPy python wrappers:
<br/><br/></p>

<div class="highlight"><pre><code class="python"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">csympy</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">I</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">I</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">I</span><span class="o">**</span><span class="mi">2</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">-</span><span class="mi">1</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">I</span><span class="o">+</span><span class="mi">1</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">I</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span>  <span class="p">(</span><span class="n">I</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="mi">2</span><span class="o">*</span><span class="n">I</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">I</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="mi">1</span><span class="o">/</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">2</span><span class="o">/</span><span class="mi">5</span><span class="o">*</span><span class="n">I</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">x</span><span class="o">+</span><span class="n">I</span><span class="o">*</span><span class="n">x</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">I</span><span class="p">)</span><span class="o">*</span><span class="n">x</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">I</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="mi">2</span><span class="o">*</span><span class="n">I</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span>

<span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">I</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">expand</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="o">-</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">I</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span>
</code></pre></div>

<p><br/><br/>
The other major work in this week was to work on the expansion of integral powers of complex number.
<a href="https://github.com/sympy/csympy/pull/264">Pull 264</a> was created to add this functionality. We used a particularly simple yet efficient algorithm to compute the integral power.</p>

<div class="highlight"><pre><code class="python"><span class="k">def</span> <span class="nf">powu</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">x</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">mask</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="n">mask</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">*</span><span class="n">p</span>
        <span class="n">mask</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">p</span>
    <span class="k">return</span> <span class="n">r</span>
</code></pre></div>

<p><br/><br/>
The current expand is a bit slower than what we were expecting. We will be looking to improve the speed in the coming days.
<br/><br/></p>

<h1 id="the-week-ahead">The Week Ahead</h1>
<p>As per the proposal, I will be implementing the Zeta Function.</p>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-07-27T19:05:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kundankumar185.wordpress.com/2014/07/27/week-10-test-cases-in-checksysodesol/</id>
    <link href="http://kundankumar185.wordpress.com/2014/07/27/week-10-test-cases-in-checksysodesol/" rel="alternate" type="text/html"/>
    <title>Week 10: Test cases in checksysodesol</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">I am finally in college, going through a long journey from home. Its final year for me now, got a very tight schedule. I have updated the checksysodesol with test cases. The test cases includes the equations from first and second order linear and non-linear system of ODEs. I debugged few methods of system of…<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=124&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I am finally in college, going through a long journey from home. Its final year for me now, got a very tight schedule.</p>
<p>I have updated the checksysodesol with test cases. The test cases includes the equations from first and second order linear and non-linear system of ODEs. I debugged few methods of system of ODEs, find out through checksysodesol.</p>
<p>The updated <em>func</em> method <a href="https://github.com/sympy/sympy/pull/7738">PR</a> is merged which closes issues <a href="https://github.com/sympy/sympy/issues/7736">#7736</a> and <a href="https://github.com/sympy/sympy/issues/7723">#7723</a>. The <a href="https://github.com/sympy/sympy/pull/7703">PR</a> of non-linear of system of ODEs and <a href="https://github.com/sympy/sympy/pull/7746">PR</a> of checksysodesol is open.</p>
<p>Today I will add all the test cases in checksysodesol and start a PR for non-linear system of ODEs of 2nd order.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/124/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/124/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=124&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-27T08:06:03Z</updated>
    <category term="GSoC"/>
    <author>
      <name>Kundan</name>
    </author>
    <source>
      <id>http://kundankumar185.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://kundankumar185.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://kundankumar185.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://kundankumar185.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://kundankumar185.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>my experiments with life</title>
      <updated>2014-07-29T19:20:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=103</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-9/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 9</title>
    <summary>Hello Everyone, I finished up the changes remaining in FOL and will send in the almost final pull request this week. This was only a minor part of the week however. Before jumping on...</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello Everyone,</p>
<p>I finished up the changes remaining in FOL and will send in the almost final pull request this week. This was only a minor part of the week however. Before jumping on to the implementation of faster SAT, I wanted to revisit faster CNF conversion. I have tweaked things further, but it still seems like very close to CNF turns out to be quite slow. If I can’t imporove the situation any further I will post the changes I made to Tseitin. Except fo that, I worked on tweaking the parameters of SAT, basically EVSIDS, without making any actual code changes. I will be posting the results of the same later.</p>
<p>Thats all for now. Hopefully this weekend will be quite productive.</p>
<p>See ya all later!!!</p></div>
    </content>
    <updated>2014-07-25T12:12:15Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week9/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week9/" rel="alternate" type="text/html"/>
    <title>GSoC Week 9: Complexions in Complex Module</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 9 for GSoC ended a couple of days back. I’m still working on the Complex Module.</p>

<h1 id="progress">Progress</h1>

<p>I started of the week continuing the work on <a href="https://github.com/sympy/csympy/pull/248">pull 248</a>.
<br/><br/>
Initially I started working on the <code>add</code> and <code>mul</code> functions and integrating the <code>complex</code> module with them. This part was pretty easy as Complex addition and Complex multiplication was completely implemented. Intially I just added special cases for the case of Complex in <code>pow</code>. But this quickly ran into issues as <code>is_canonical</code> failed in some testcases.
<br/><br/>
Next I simplified the complex power for the following cases:</p>

<ul>
  <li>When <code>exp</code> is 1 or -1</li>
  <li>When the <code>base</code> is purely imaginary and <code>exp</code> is integer.</li>
</ul>

<p>Following this I made appropriate changes to <code>is_canonical</code> for <code>pow</code>
<br/><br/>
Meanwhile <a href="https://github.com/certik">@certik</a> sent a couple of PR’s <a href="https://github.com/sushant-hiray/csympy/pull/1">sushant-hiray/csympy/#1</a> and <a href="https://github.com/sushant-hiray/csympy/pull/2">sushant-hiray/csympy/#2</a> for implementing the Python wrappers for Complex Module.
I spent some time trying to sync the wrappers and make sure they work as intended.
<br/><br/>
One important fix needed was to improve the printing. Over the entire PR, the printing has been changed multiple times to match the SymPy output. With this PR I’ve updated the current existing printing for <code>add</code>, <code>mul</code> as well as <code>pow</code>
<br/><br/>
The <code>expand</code> function is also updated to handle the case of Complex Numbers. Currently it doesn’t expand terms like: <code>(2 + 3I)^n</code>. Apart from this all the issues which were found have been fixed.</p>

<h1 id="the-week-ahead">The Week Ahead</h1>
<p>Merge the current PR and send a new PR for handling the cases like <code>(2 + 3I)^n</code> in <code>expand</code></p>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-07-23T17:30:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-283806077182880539.post-5238978956281178700</id>
    <link href="http://gsocblog.blogspot.com/feeds/5238978956281178700/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/this-week-i-converted-all-operations-on.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/5238978956281178700" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/5238978956281178700" rel="self" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/this-week-i-converted-all-operations-on.html" rel="alternate" type="text/html"/>
    <title/>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div dir="ltr" style="text-align: left;">This week I converted all the operations on FPS to work with generators.<br/>For e.g.:-<br/>Addition for two series is something like<br/><pre style=""><code style="color: black;"> def add(s1, s2):  <br/>   yield s1[0] + s2[0]  <br/>   s1, s2 = s1.tail, s2.tail  <br/>   for t in add(s1, s2):  <br/>     yield t  <br/></code></pre><br/>Almost all the operations use recursive generators. In this case argument to the add function is different each time.<br/>However in some cases the same function with same argument is called recursively.  For e.g:- In case of division<br/>  <pre style=""><code style="color: black;"> def div(s1, s2):  <br/>   a, b = s1[0], s2[0]  <br/>   def gen():  <br/>     yield a/b  <br/>     iterator = s2 * gen()  <br/>     for t in iterator:  <br/>       yield -t/b </code></pre><pre style=""><code style="color: black;">   for t in gen():</code></pre><pre style=""><code style="color: black;">      yield t </code></pre>gen() is called recursively with the same arguments (no arguments in this case). <br/>I'll try to optimize recursive generators if possible over the next few days.<br/><br/>Other problem I'm facing is args of Stream class. It is necessary that args of all Basic instances should be of type Basic. But the Stream class takes a generator object as an argument.<br/><br/>Next week:-<br/>- Optimize recursive generators if possible<br/>- Generator object as Basic instance? (Find solution for this)<br/>- Implement all necessary ``eval`` routines for FPS like _eval_derivative, _eval_leadterm etc.<br/><br/></div></div></div>
    </content>
    <updated>2014-07-22T13:11:51Z</updated>
    <published>2014-07-22T13:11:00Z</published>
    <author>
      <name>Avichal Dayal</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/107026571968093758973</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-283806077182880539</id>
      <author>
        <name>Avichal Dayal</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://gsocblog.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/283806077182880539/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://gsocblog.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>GSoC 2014 with SymPy</title>
      <updated>2014-07-23T14:29:48Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-6754341602192868346</id>
    <link href="http://geekpy.blogspot.com/feeds/6754341602192868346/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-9.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/6754341602192868346" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/6754341602192868346" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-9.html" rel="alternate" type="text/html"/>
    <title>Gsoc Week-9</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Sorry for the late post as I had to travel a lot this week. Other than that I finished the implementation of the Hyperbola class including the tests. <a href="https://github.com/sympy/sympy/pull/7709">Here</a> is the link to the PR. Apart from that I fixed a few bugs in the Plane and Line3D class.<br/><br/>This week I plan to implement the Parabola class and hopefully will get the PR on Hyperbola merged.<br/><br/>Until then cheers! </div></div>
    </content>
    <updated>2014-07-22T06:05:07Z</updated>
    <published>2014-07-22T06:05:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-5816144129540344738</id>
    <link href="http://blog.sudhanshumishra.in/feeds/5816144129540344738/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-finished-refraction-at.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/5816144129540344738" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/5816144129540344738" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-finished-refraction-at.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 Progress: Finished refraction at planar surface</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I'm sorry for this delayed post. I couldn't work last week due to some other issues so had nothing much to report.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">This week I completed refraction function for planar surface, fixed some bugs and wrote tests for it. I also added a function to calculate angle of deviation. Details can be found on the following link</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;"><a href="https://github.com/sympy/sympy/pull/7626" style="color: blue;">https://github.com/sympy/sympy/pull/7626</a></div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I'm waiting for Sean to start reviewing this.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">My next priority is to complete a pending PR on mirrors.</div></div></div>
    </content>
    <updated>2014-07-20T14:32:41Z</updated>
    <published>2014-07-20T14:32:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kundankumar185.wordpress.com/?p=122</id>
    <link href="http://kundankumar185.wordpress.com/2014/07/20/week-9-checksysodesol/" rel="alternate" type="text/html"/>
    <title>Week 9: Checksysodesol</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week a lot of time is spent debugging solutions. The PR solves the issue #7736 and #7723 which was arising due to wrong calculation of func method while solving non-linear system of ODEs of type5. I sent another PR which contains Checksysodesol, a method for checking the solution of system of ODEs. The PR remains…<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=122&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week a lot of time is spent debugging solutions. The <a href="https://github.com/sympy/sympy/pull/7738">PR</a> solves the issue <a href="https://github.com/sympy/sympy/issues/7736">#7736</a> and <a href="https://github.com/sympy/sympy/issues/7723">#7723</a> which was arising due to wrong calculation of <em>func </em>method while solving non-linear system of ODEs of type5. I sent another <a href="https://github.com/sympy/sympy/pull/7746">PR</a> which contains Checksysodesol, a method for checking the solution of system of ODEs. The PR remains to be updated with the test cases.</p>
<p>The <a href="https://github.com/sympy/sympy/pull/7703">PR</a> of non-linear system of ODEs of three equation for 1st order still remains to be merged.</p>
<p>Thats all for this week. On monday I will be going to my college, hope to work harder there. The most haunting thing at home is electricity, having tough time with it sometime getting meagerly for 3-4 hrs a day. Well thats home, I suppose, getting a delicious meal of mom’s hand.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/122/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/122/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=122&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-20T10:13:27Z</updated>
    <category term="GSoC"/>
    <author>
      <name>Kundan</name>
    </author>
    <source>
      <id>http://kundankumar185.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://kundankumar185.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://kundankumar185.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://kundankumar185.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://kundankumar185.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>my experiments with life</title>
      <updated>2014-07-29T19:20:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=377</id>
    <link href="http://thilinaatsympy.wordpress.com/2014/07/20/gsoc-week-9-matrix-inverse-and-sparse-matrices/" rel="alternate" type="text/html"/>
    <title>[GSoC] Week 9: Matrix Inverse and Sparse Matrices</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, Sorry for a late blog post. I was kind of busy during last week, preparing for a competition. During the last week, I mainly did two things, implementing matrix inverse and starting the implementation of sparse matrices. Implementing Matrix Inverse I implemented matrix inverse in two different methods, using Gauss Jordan elimination and …<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=377&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All, Sorry for a late blog post. I was kind of busy during last week, preparing for a competition.</p>
<p>During the last week, I mainly did two things, implementing matrix inverse and starting the implementation of sparse matrices.</p>
<h1>Implementing Matrix Inverse</h1>
<p>I implemented matrix inverse in two different methods, using Gauss Jordan elimination and fraction free LU decomposition. I had only implemented gauss Jordan elimination to solve a system <img alt="Ax = b" class="latex" src="http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="Ax = b"/> where <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b"/> is a column matrix. I had to enhance the algorithm so that it can be used to solve several systems at once, i.e. <img alt="b" class="latex" src="http://s0.wp.com/latex.php?latex=b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="b"/> can be a collection of column matrix.</p>
<p>This was not a problem in fraction free LU method because <img alt="L" class="latex" src="http://s0.wp.com/latex.php?latex=L&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="L"/> and <img alt="U" class="latex" src="http://s0.wp.com/latex.php?latex=U&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="U"/> factors can be used to solve column vectors <img alt="e_{1}, e_{2}, . . . e_{n}" class="latex" src="http://s0.wp.com/latex.php?latex=e_%7B1%7D%2C+e_%7B2%7D%2C+.+.+.+e_%7Bn%7D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="e_{1}, e_{2}, . . . e_{n}"/> after calculating <img alt="L" class="latex" src="http://s0.wp.com/latex.php?latex=L&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="L"/> and <img alt="U" class="latex" src="http://s0.wp.com/latex.php?latex=U&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="U"/> once.</p>
<h1>Implementing Sparse Matrices</h1>
<p>We decided to adapt the implementation of SciPy sparse matrices. For the time being I have implemented CSR form of a sparse matrix. CSR is an acronym for “Compress Sparse Row”. You can learn more about it in the following links.</p>
<p><a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wiki Article</a></p>
<p><a href="http://netlib.org/linalg/html_templates/node91.html#SECTION00931100000000000000">Netlib Article</a></p>
<p>You can find information about scipy implementation of CSR matrices <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html">here</a>.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/377/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/377/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=377&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-20T08:32:25Z</updated>
    <category term="CSymPy"/>
    <category term="GSoC-2014-CSymPy"/>
    <category term="Matrix Inverse"/>
    <category term="Sparse Matrices"/>
    <category term="SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-07-29T19:20:40Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-9.html</id>
    <link href="https://hargup.github.io/posts/week-9.html" rel="alternate" type="text/html"/>
    <title>week 9</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I moved back to college and my classes have restarted. This week
I worked on a PR to allow infinitely indexed <code>Range</code>. See
https://github.com/sympy/sympy/pull/7741. While doing this PR I discovered
that you cannot monkey patch <code>object</code> to assign some attribute. And I want to
mention that Sergey(one of my mentors) is damn good reviewer.</p></div>
    </summary>
    <updated>2014-07-19T18:50:01Z</updated>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://codesachin.wordpress.com/2014/07/19/gsoc-week-9-dyadics-done/</id>
    <link href="http://codesachin.wordpress.com/2014/07/19/gsoc-week-9-dyadics-done/" rel="alternate" type="text/html"/>
    <title>GSoC Week 9: Dyadics done</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Not much to report this week, except that the code for dyadics is now done, with a all-tests-passing PR being pushed. A happy moment was the basic vector framework code finally getting pushed. Phew :-). Now the next PR in line is the dyadics one itself. I also spent time mapping out the API for […]<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=22&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Not much to report this week, except that the code for dyadics is now done, with a all-tests-passing PR being pushed. A happy moment was the basic vector framework code finally getting pushed. Phew <span class="wp-smiley emoji emoji-smile" title=":-)">:-)</span>. Now the next PR in line is the dyadics one itself.<br/>
I also spent time mapping out the API for the Rotator classes, which I will proceed to discuss with Jason during this week’s meeting. I am still a little doubtful about how useful these classes may be, API wise. Lets see about this one.<br/>
A problem that I am facing currently is the confusion about the Del operator. I started out trying to write it as a SymPy function, but then I realised that the _outputs_ from the methods of Del should be the ones being defined as unevaluated functions- like Gradient, Divergence, etc. Will have to take this up with Jason too.</p>
<p>Anyways, I hope the dyadics code goes in soon, and I plan to send one or two PRs with more functionality soon. Till then, have a great week!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/22/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/22/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=22&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-19T18:02:37Z</updated>
    <category term="Google Summer of Code 2014"/>
    <author>
      <name>srjoglekar246</name>
    </author>
    <source>
      <id>http://codesachin.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://codesachin.wordpress.com/category/google-summer-of-code-2014/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://codesachin.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://codesachin.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>- Blog by Sachin Joglekar</subtitle>
      <title>Dream. Think. Code. » Google Summer of Code 2014</title>
      <updated>2014-07-29T19:20:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2014-07-18:gsoc-week-9.html</id>
    <link href="http://jcrist.github.io/gsoc-week-9.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 9: Docs!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I spent time on all sorts of little things:</p>
<ul>
<li>Finished up the refactoring of <code>KanesMethod</code></li>
<li>Little fixes to <a href="https://github.com/sympy/sympy/pull/7681">my current PR</a>. Just
  waiting on my mentors to review this, I want to get it merged soon-ish.</li>
<li>Documentation.</li>
</ul>
<p>Writing documentation is the worst<sup id="fnref:1"><a class="footnote-ref" href="http://jcrist.github.io/feeds/gsoc.atom.xml#fn:1" rel="footnote">1</a></sup>. After taking time to implement all sorts
of new interesting things, the last thing I want to do is go back and write about
them in detail. Which is why it's so important to do early on. <em>Good</em>
documentation needs to accomplish three things:</p>
<ol>
<li>Provide motivation for <em>why</em> your software is necessary/better/useful.</li>
<li>Describe the user interface, showing <em>how</em> to use each function or class.</li>
<li>Provide real world <em>examples</em> showing how to tie everything together.</li>
</ol>
<p>Python's documentation is interesting in that there are varying ways to do it.
Some of Sympy's documentation is just a nicely rendered form of the docstrings
for all the methods. Other modules have a more prose-y explanation of their
functionality. <code>mechanics</code> is one of those modules.</p>
<p>In my opinion the prose documentation approach is the better way.
Having good docstrings is important, but they aren't the end-all of
documentation<sup id="fnref:2"><a class="footnote-ref" href="http://jcrist.github.io/feeds/gsoc.atom.xml#fn:2" rel="footnote">2</a></sup>. Of course, if I have a question the first thing I'm going to
do is read the docstrings (IPython makes this trivially easy). Only if I still
have questions afterwards will I turn to the online documentation. However, it'd
be extremely off-putting if the online documentation was just the docstrings
again.</p>
<p>With the various changes I've made so far I needed to:</p>
<ol>
<li>Update the <code>LagrangesMethod</code> documentation to reflect the interface change.</li>
<li>Create a documentation page all about the linearization methods.</li>
<li>Update all the examples to reflect the new functionality.</li>
</ol>
<p>All of these are "done". I still need to go through and proofread, but overall
I'd say that the current state of the documentation is acceptable. I would like
to take some time to reorganize the layout of the whole <code>mechanics</code> documentation
at some point. The current layout isn't the easiest to navigate for what you're
looking for.</p>
<p>With this out of the way, the linearization portion of my project is tentatively
done. I say tentatively because I'm still waiting on my PRs to get merged, and 
am also still playing around with solving <a href="http://jcrist.github.io/gsoc-week-8.html">the <code>nan</code> issue</a>
that I've been writing about these last couple weeks.</p>
<p>With that done, I hope to move on to code generation. I've read the current code
generation code and documentation, as well as <a href="https://github.com/pydy/pydy/wiki/codegen-planning">this pydy wiki page</a>
on Jason's ideas about code generation. I'm still a little iffy about the intention
of this functionality, so I'm waiting until we can all meet to discuss what needs
to be done. That was supposed to have happened this week, but fell through.
Hopefully we can set some time aside next week, and I can finally get to work
on it.</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:1">
<p>Not actually the worst. <a class="footnote-backref" href="http://jcrist.github.io/feeds/gsoc.atom.xml#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:2">
<p><a href="http://stevelosh.com/blog/2013/09/teach-dont-tell/">This article</a> by Steve
  Losh is a really good read on this. <a class="footnote-backref" href="http://jcrist.github.io/feeds/gsoc.atom.xml#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
</ol>
</div></div>
    </summary>
    <updated>2014-07-18T20:00:00Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <category term="pydy"/>
    <category term="dynamics"/>
    <author>
      <name>Jim Crist</name>
    </author>
    <source>
      <id>http://jcrist.github.io/</id>
      <link href="http://jcrist.github.io/" rel="alternate" type="text/html"/>
      <link href="http://jcrist.github.io/feeds/gsoc.atom.xml" rel="self" type="application/atom+xml"/>
      <title>Marginally Stable</title>
      <updated>2014-07-18T20:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=100</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-8/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 8</title>
    <summary>Hello Everyone, I have majorly been working on fixes and optimizations this week. There was an interesting error that was coming up because of the way quantifiers had been designed. I have made some...</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello Everyone,</p>
<p>I have majorly been working on fixes and optimizations this week. There was an interesting error that was coming up because of the way quantifiers had been designed. I have made some significant changes to the Quantifier class. An interesting problem regarding constants has cropped up, which I am yet to fix. Please find the discussion regarding it at <a href="https://groups.google.com/forum/#!topic/sympy/16sSUehOFWA" target="_blank" title="Constants">FOL Constants and Unification</a>. For the rest or the week, I have majorly been writing tests for the FOL class and making small changes. Additionally I have spent some time writing tutorials for the logic module of SymPy. The documentation available currently only talks about how to do something but not what all can be done with it. The tutorials are far from complete but I will definitely try to finish the entire thing before the summer is over.</p>
<p>That’s all for now.</p>
<p>Farewell</p></div>
    </content>
    <updated>2014-07-18T13:12:18Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-2147515292514723776</id>
    <link href="http://geekpy.blogspot.com/feeds/2147515292514723776/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-8.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/2147515292514723776" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/2147515292514723776" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-8.html" rel="alternate" type="text/html"/>
    <title>Gsoc Week - 8</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">This week was great in terms of the work done. My PR on the Plane class got merged finally, so this completes the  implementation of 3-D geometry. Though my code had less test coverage to which I have sent a <a href="https://github.com/sympy/sympy/pull/7733">PR</a> which improves it .<br/><br/>Apart from that I have been working on the Hyperbola class and have added most of the methods, tests remain though. <a href="https://github.com/sympy/sympy/pull/7709">Here</a> is the link to the PR.<br/><br/>This week I will add  tests for the Hyperbola class and will start implementing the Parabola class once this is done.<br/><br/>Until then cheers!</div></div>
    </content>
    <updated>2014-07-15T03:19:49Z</updated>
    <published>2014-07-15T03:19:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-283806077182880539.post-8629525061641578470</id>
    <link href="http://gsocblog.blogspot.com/feeds/8629525061641578470/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/as-it-turned-out-i-had-to-replace-most.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/8629525061641578470" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/8629525061641578470" rel="self" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/as-it-turned-out-i-had-to-replace-most.html" rel="alternate" type="text/html"/>
    <title/>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">As it turned out, I had to replace most of my last two week's code. I used lambda functions to implement infinite structures. Lambda function stored the delayed part of the structure.<br/><br/>I scraped that out and now instead use the more Python-ic generators for infinite structures.<br/><br/>Earlier FPS was just for series expansion around x0=0. I added support for asymptotic expansion and series expansion around arbitrary points. This just included the substitutions as done in the series() method.<br/><br/>However I faced an irritating bug regarding this.<br/>The Lazyseries class has arguments: &lt;x&gt;, &lt;generator object&gt;<br/>So if ``l = Lazyseries(x, generator)``<br/>When  ``l.subs(x, x+1)`` is done, it turned out that &lt;generator object&gt; was being iterated. I noticed this after sometime, fixing it by writing a custom _eval_subs()<br/><br/>Regarding the operation on series, I had to rewrite all of them using generators.<br/>Adding series is just term-wise addition which can be accomplished by a simple one-liner i.e. ``imap(operator.add, self, other)``.<br/>But it turned out that this was actually wrong. This didn't give sorted output when adding series.<br/>E.g.:-<br/>s1 = x + x**2 + x**3 + ...<br/>s2 = x + x**3 + x**5 + ... <br/>Now if s = s1 + s2,<br/>s = 2x + (x**2 + x**3) + (x**3 + x**5) + ...<br/>If I want series expansion of s with order = 4, it terminates at the third term after getting the x**5 term. Whereas, it should go further as there is a x**4 term too. <br/><br/><br/>I wrote a custom add function merging two iterators similar to the mergesort algorithm. There is a built-in function called heapq.merge that does the same thing but it does not provide a key to compare values. It turns out that it is one of Cpython's ideas floating around to provide a key for heapq.<br/><br/>I hope to get this done in a few days and get it ready for the merge.<br/><br/><br/></div></div>
    </content>
    <updated>2014-07-13T18:41:00Z</updated>
    <published>2014-07-13T18:41:00Z</published>
    <author>
      <name>Avichal Dayal</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/107026571968093758973</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-283806077182880539</id>
      <author>
        <name>Avichal Dayal</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://gsocblog.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/283806077182880539/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://gsocblog.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>GSoC 2014 with SymPy</title>
      <updated>2014-07-23T14:29:48Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://asmeurer.github.io/posts/scipy-2014/</id>
    <link href="http://asmeurer.github.io/posts/scipy-2014/" rel="alternate" type="text/html"/>
    <title>SciPy 2014</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div><p>I just finished <a href="https://conference.scipy.org/scipy2014/">SciPy 2014</a>, a
week-long conference in Austin, TX for scientific computing with Python.</p>
<p>This is my third SciPy (I have been to
<a href="https://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/">2011</a>
and <a href="https://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/">2013</a>). This
year, the conference was noticeably larger. Last year there were
<a href="http://andy.terrel.us/blog/2013/07/05/scipy2013-recap/">~350 people</a>, this
year, there were
<a href="https://twitter.com/scopatz/status/488370261150818304">~450 people</a>.  Aside
from there being a lot more people, and the main keynotes taking place in a
larger room, the most noticeable consequence of this is that there were three
days of talks this year, and three concurrent tracks of talks all three days
(last year there were two of each). The conference consisted of two days of
tutorials, three days of talks, and two days of sprints, running from July 5
to July 12.</p>
<h2>Tutorials</h2>
<p>The conference started on Sunday with tutorials. I gave a tutorial on SymPy
with <a href="http://matthewrocklin.com/blog/">Matthew Rocklin</a> and
<a href="http://www.moorepants.info/blog/">Jason Moore</a>. The videos are on YouTube
(parts <a href="https://www.youtube.com/watch?v=Lgp442bibDM">one</a>,
<a href="https://www.youtube.com/watch?v=_PTe10whFKo">two</a>,
<a href="https://www.youtube.com/watch?v=qleGSnrnxgc">three</a>, and
<a href="https://www.youtube.com/watch?v=04AGOl1P2U4">four</a>).  I gave tutorials for
SymPy the previous two times I was at SciPy, although with different people
(with Mateusz Paprocki in 2011 and
<a href="http://ondrejcertik.blogspot.com/">Ondřej Čertík</a> in 2013). I really enjoy
seeing new people learn about SymPy, and working with Matthew Rocklin, who is
a very good speaker and teacher.</p>
<p>I also attended the tutorial on PyDy by Jason Moore, Gilbert Gede, and
Obinna Nwanna (parts <a href="https://www.youtube.com/watch?v=lWbeuDwYVto">one</a>
and <a href="https://www.youtube.com/watch?v=1-KqRvNX0po">two</a>).  This tutorial was
also well done, and I highly recommend it if you are interested in Newtonian
mechanics.</p>
<p>I unfortunately was unable to attend any of the other tutorials, but I heard
good things about them, especially the
<a href="https://www.youtube.com/watch?v=vWkgEddb4-A">Julia tutorial</a>.</p>
<h2>Talks</h2>
<p>From Tuesday to Thursday were talks. The quality of talks this year was very
high. The SciPy talks have always been high quality talks, but this year I
felt that they were particularly good. I don't think I saw a bad talk.</p>
<p>Thus, I can't really recommend the good talks that I saw without recommending
all of them. You should go to YouTube and the
<a href="https://conference.scipy.org/scipy2014/schedule/">SciPy schedule</a> and watch
any talk that looks interesting.</p>
<p>I therefore am going to recommend here the very best talks.  Two talks in
particular stood out to me as the best.</p>
<p>First is Greg Wilson's Thursday keynote, which is among the best talks I've
ever seen from any conference.</p>
<p/><center>&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="http://www.youtube.com/embed/1e26rp6qPbA" width="560"&gt;&lt;/iframe&gt;</center>
<p>Greg mentions a lot of ideas, quite a few of which are controversial, which I
think always makes for an interesting talk (it also means that I don't agree
with everything he said, although I do agree with most of it). Most of the
talk is about pedagogy, especially regarding his experiences at
<a href="http://software-carpentry.org/">Software Carpentry</a>. Some things he posited:</p>
<ul>
<li>
<p>There is actually good research about what methods work and don't work in
  teaching. He referenced
  <a href="http://www.slideshare.net/richardcookau/john-hattie-effect-sizes-on-achievement">this presentation</a>,
  which lists just about every possible pedagogical method, and the net
  difference that it has on students, based on over 50,000 studies. For
  example, individualized instruction has a very small positive effect,
  whereas teacher feedback has a very large positive effect. Since each takes
  time and resources, we should focus on those effects that have the highest
  impact. Greg pointed out that web-based learning has very little positive
  effect, and hence is a waste of time and money. The most effective change is
  removing disruptive students.</p>
<p>In particular, I liked the quote, "if you want more computing in high
school, you have to tell me what to take out."  People like to go on that
schools need to teach more of this or more of that, and computing and
programming tends to be high on that list these days, but anyone who does
not discuss what things should be removed from the curriculum, which is
already quite full, is not being honest about the discussion.</p>
</li>
<li>
<p>The other big point Greg made is that we need more incremental massive
  collaboration in teaching. This is the same model that has built open source
  and Wikipedia, but is mostly absent from teaching. Incremental change is
  important here, as well. It is more useful for someone to contribute fixes
  to existing lesson plans, so that they become better for the students, but
  in his experience, people are much more willing to add new lessons.  Greg
  calls for a "culture of patching". If incremental change could be adopted in
  teaching, teachers could aggregate methods and lesson plans, removing the
  massive duplication, and most importantly, making teaching materials that
  actually work for students to learn. Greg Wilson asks why open source and
  Wikipedia are able to thrive on massive <em>incremental</em> change, but teaching
  is not, a question he hasn't found the answer to.</p>
<p>My thought on the matter is that unlike writing software or collecting and
presenting facts, pedagogy is very difficult. If I contribute a patch to
an open source project that fixes a bug, I can run the tests to see if my
fix is "correct". If I fix an incorrect fact on Wikipedia, it is less
easy, but I can still cite and check references to make sure it is
correct.  But for teaching, it is very difficult to know what methods work
and what don't, and as Greg pointed out at the beginning of his talk, the
effects of different methods can be very counterintuitive.</p>
</li>
</ul>
<p>The second talk that I recommend is
<a href="http://jakevdp.github.io/">Jake VanderPlas</a>'s talk about Frequentism and
Bayesianism.</p>
<p/><center>&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="http://www.youtube.com/embed/KhAUfqhLakw" width="560"&gt;&lt;/iframe&gt;</center>
<p>I won't summarize this talk, as Jake has done a much better job in his blog
(parts
<a href="http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/">one</a>,
<a href="http://jakevdp.github.io/blog/2014/06/06/frequentism-and-bayesianism-2-when-results-differ/">two</a>,
<a href="http://jakevdp.github.io/blog/2014/06/12/frequentism-and-bayesianism-3-confidence-credibility/">three</a>,
and
<a href="http://jakevdp.github.io/blog/2014/06/14/frequentism-and-bayesianism-4-bayesian-in-python/">four</a>). The
best thing is to just watch the talk.  I will just point out that before the
talk, I did not really understand the difference, not being a statistician or
someone who works with statistics regularly, and having seen the talk, I now
feel that I do.  It's a controversial topic, and if you care about the matter,
you should know that Jake is a strong Bayesian, although I felt that he gave
both sides a fair exposition.</p>
<p>Again, all talks I saw at the conference were good. But those two I felt were
the best. I should also mention here that I myself gave a talk on Conda (more
on that later).</p>
<h2>The Conference</h2>
<p>Of course, the talks are only a part of any conference. The best part of SciPy
is the gathering of the community. Each year I meet more new people, as well
as talk with people I already know, but don't get to see outside of SciPy.</p>
<p>For me, the biggest part of the interactions this year were on Conda and
packaging.  The background is that I have been working full time for Continuum
since January, and I had interned last summer, working primarily on the Conda
package manager and Anaconda, the Python distribution.  This year, some of the
biggest buzz at the conference was about Conda. I'm obviously selection
biased, because people came to me specifically to talk about Conda, but I also
overheard it in other people's conversations, in several of the presentations,
and frankly, the people who did talk to me about Conda were <em>very</em> excited
about it.  Just like everyone was talking about the IPython Notebook last year
and how it has solved the fundamental problems of sharing and presenting data
analysis, this year, everyone thanked me for my work on Conda and how it has
basically solved the packaging problem, the ubiquitous problem in Python since
people started using it.</p>
<h3>Conda: The Packaging Problem Solved</h3>
<p>Here is the talk I gave on Conda:</p>
<p/><center>&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="http://www.youtube.com/embed/UaIvrDWrIWM" width="560"&gt;&lt;/iframe&gt;</center>
<p>I made the claim in my talk that Conda has solved the packaging problem, and
the general feel from people I talked to who are using Conda is that it has.</p>
<p>I think this slide from my presentation summarizes why Conda solves the
packaging problem.</p>
<p><img src="http://asmeurer.github.io/galleries/conda_scipy2014_slide.png" width="500"/></p>
<p>One of the most amazing things about the scientific Python community, and one
of the things that I think really sets it apart from other Python communities,
is the use of Python alongside other languages, such as C, C++, Fortran, R, or
Julia.  No one language is enough to get the job done for serious scientific
work.  The fundamental brokenness of Python packaging has been that it has
focused too much on Python specific tools and processes.  The
distutils/setuptools/pip/virtualenv stack works great if your code begins and
ends with Python.  Where it falls over is when you want to link against a C
library, compile some Fortran or Cython code, and communicate with other
languages like R and Julia.  By being a system level package manager, which is
fundamentally Python agnostic, Conda is able to deal with all packages
equally, whether that package be a Python package, a C extension which other
packages link against, or Python itself.</p>
<p>By being truly cross-platform and user installable, Conda is able to reach the
maximal number of users, especially those who have historically been hit by
the packaging problem the hardest:  those who are on Windows or those who do
not have admin rights to install necessary tools to install the packages they
need.</p>
<p>Finally, Conda installs binaries, not source packages, and its metadata is
entirely static (you do not need to execute arbitrary Python code to capture
the metadata of a package).  These two things remove two of the largest
sources of issues with the existing Python packaging tools, such as compiler
errors, and nonuniformity in metadata standards (there seem to be as many
different ways of writing <code>setup.py</code> as there are packages on PyPI), by
removing arbitrary code execution from package installation.</p>
<p>Conda opens up its ecosystem to anybody by making it easy for people to build
their own Conda packages using reproducible Conda recipes.  And
<a href="https://binstar.org/">Binstar</a> makes it easy to share those packages.  I'm
very excited about Binstar, as I think it does for packaging what GitHub has
done for open source, i.e., distributes and democratizes it. There are
challenges on how to deal with this, of course. As with any distributed
democratized system, Binstar can be a wild west of packages.  Continuum is
thinking about ways to manage this complexity, while still reaping the
benefits it provides. If you have any thoughts on things that can be done, let
me know in the comments section below.</p>
<p>Of course, solving the packaging problem and removing it are different
things.  Conda does not make it easier to compile difficult packages.  It only
makes it so that fewer people have to do it.  And there is still work to be
done before Conda really takes over the world.</p>
<h2>Sprints</h2>
<p>The conference ended with two days of sprints. I mainly helped people with
Conda packaging.  One key thing that happened is that I worked with Aron
Ahmadia so that HashDist can generate Conda
packages. <a href="http://hashdist.github.io/">HashDist</a> is a package compiling
framework that makes it easy to have completely reproducible builds by hashing
all the information that was used to compile a package, and recompiling when
any of that information changes. You can learn more about HashDist by watching
Aron's talk from the conference:</p>
<p/><center>&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="http://www.youtube.com/embed/wviHkzk0AkY" width="560"&gt;&lt;/iframe&gt;</center>
<p>I am now convinced that HashDist is a good solution for people who still want
the control of compiling their own packages. Once HashDist is able to produce
Conda packages, then you can gain the benefits of both worlds: Conda's
powerful package management and environment notion, with HashDist's modular
and reproducible package building framework.</p>
<h2>Other thoughts</h2>
<p>The organizers of SciPy did an excellent job this year.  The video crew did
something which I have not seen before, which is that they uploaded the videos
of the talks on the same day that the talks were held. My talk, which was held
right before lunch, was uploaded before the last talk of the day.  Something
that I saw come out of this is that people not attending the conference were
able to watch the talks and take part of the conversation with the conference
attendees, via Twitter and other social media, or by joining the sprints after
the conference.</p>
<p>The extended three days of talks really took their toll on me. The conference
starts early enough in the morning and the social events after go so late in
the evening that each day of the conference I become a little more sleep
deprived. Usually by two days of tutorials and two days of talks I have hit my
limit, and this year, I really had a hard time making it through that fifth
day. Fortunately for the sprints I was able sleep in a little bit, as it's not
a big deal if you miss the beginning.</p>
<p>This year the conference organizers made a push for diversity, and it
shows. There were noticeably more women at the conference this year, and not
just insomuch as there were more people at all.</p>
<p>Finally, I leave you with the greatest lightening talk. Ever.</p>
<p/><center>&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" height="315" src="http://www.youtube.com/embed/ln4nE_EVDCg?start=3254" width="560"&gt;&lt;/iframe&gt;</center>


</div></div>
    </summary>
    <updated>2014-07-13T16:52:27Z</updated>
    <author>
      <name>Aaron Meurer</name>
    </author>
    <source>
      <id>http://asmeurer.github.io/</id>
      <link href="http://asmeurer.github.io/" rel="alternate" type="text/html"/>
      <link href="http://asmeurer.github.io/blog/rss.xml" rel="self" type="application/rss+xml"/>
      <subtitle>My blog</subtitle>
      <title>Aaron Meurer's Blog</title>
      <updated>2014-07-29T19:20:17Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kundankumar185.wordpress.com/2014/07/13/week-7-and-week-8-non-linear-system-of-odes/</id>
    <link href="http://kundankumar185.wordpress.com/2014/07/13/week-7-and-week-8-non-linear-system-of-odes/" rel="alternate" type="text/html"/>
    <title>Week 7 and Week 8 : Non-linear system of ODEs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">In week 7, there was negligible work done, had health issues. Because of that I was unable to update things here. During week 8, I got in non-linear system of ODEs for 3 equations of first order (PR). But most of them is not responding in my system. It takes very long time to respond…<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=121&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>In week 7, there was negligible work done, had health issues. Because of that I was unable to update things here. During week 8, I got in non-linear system of ODEs for 3 equations of first order (<a href="https://github.com/sympy/sympy/pull/7703">PR</a>). But most of them is not responding in my system. It takes very long time to respond but still I am not getting the final solutions (before that my system crashes).</p>
<p>Though I have written method for these types, test cases for two types have been included and for other 3 I am not getting any solution. I will needing help from Tim and Sean for making any advances in this.</p>
<p>The one <a href="https://github.com/sympy/sympy/pull/7676">PR</a> of non-linear system of ODEs for 2 equation of first order has been merged and the <a href="https://github.com/sympy/sympy/pull/7678">PR</a> for docs is all ready to go.</p>
<p>The next week I plan to finish the PR of non-linear one and start new for checksysodesol which I have just started and start working on non-linear system of ODEs for 2 equation of second order.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/121/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/121/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=121&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-13T09:18:36Z</updated>
    <category term="GSoC"/>
    <author>
      <name>Kundan</name>
    </author>
    <source>
      <id>http://kundankumar185.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://kundankumar185.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://kundankumar185.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://kundankumar185.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://kundankumar185.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>my experiments with life</title>
      <updated>2014-07-29T19:20:59Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week8/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week8/" rel="alternate" type="text/html"/>
    <title>This Week in CSymPy: #8</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 8 for GSoC just ended. I’m particularly pleased that I’ve managed to get a basic version of Complex Module merged into master.</p>

<h1 id="progress">Progress</h1>

<p>I hadn’t made much progress last week as I was traveling back home. So I had only managed to implement some of the functions. This week I implemented all the virtual functions which were necessary. Updated <code>Complex::from_mpq</code> to return the appropriate instance of <code>Complex</code> and <code>Rational</code>. <a href="https://github.com/sympy/csympy/pull/223">Pull 223</a> implemented the basic version of complex module.
<br/><br/>
I also noticed that some of the files I had commented out earlier had a mismatched tab configuration. So I fixed the mismatch identation for all the files in the project. <a href="https://github.com/sympy/csympy/pull/242">Pull 242</a> fixed this issue.
<br/><br/>
While writing tests for the Complex Module, I noticed that there was no explicit divide by zero check in the code and as a result, on division by zero, we were getting a coredumped. This issue was filed as <a href="https://github.com/sympy/csympy/issues/239">#239</a> which was subsequently fixed via
<a href="https://github.com/sympy/csympy/pull/241">Pull 241</a>.
<br/><br/>
After some fixes and adding divide by zero checks in the complex module, the <a href="https://github.com/sympy/csympy/pull/223">Pull 223</a>  was merged. With this in place, we can perform all basic operations on complex integers as well as rationals. The only exception being pow. It was decided that complex <code>pow</code> shouldn’t evaluated by default. Also since the current definition of <code>pow</code> returns a <code>RCP&lt;const Number&gt;</code> so it needs to be refactored to account the current design.</p>

<h1 id="the-week-ahead">The Week Ahead</h1>
<p>Make sure complex module works with all other submodules of <code>CSymPy</code> and add tests accordingly. <a href="https://github.com/sympy/csympy/pull/248">Pull 248</a> has been started to deal with this.</p>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-07-13T05:45:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-7.html</id>
    <link href="https://hargup.github.io/posts/week-7.html" rel="alternate" type="text/html"/>
    <title>week 7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h2>Week 7, 8</h2>
<h3>Fu Simplification</h3>
<p>In the early part of the week 7 was thinking and working on design decisions.
I want the code to be very modular so that it could be easily extended by
people other than me. This came up in a meeting with Matthew and I want the
solvers to be like the Fu simplification explained by Matthew in this <a href="https://www.youtube.com/watch?v=QldxygVVj-s&amp;list=PLYx7XA2nY5GfuhCvStxgbynFNrxr3VFog&amp;index=20">Scipy
Talk</a>.
The idea was that we can see solving an equation as series of transformations.
If we have a lot of small transformations such that the input type is same as
output type, and some notion of what makes a "better" output we can search though
the list of transformations running one on top of other. I also posted about
it on the <a href="https://groups.google.com/forum/#!topic/sympy/42GdMJ9ssyM">mailing
list</a> which brought
out some flaws in the preliminary design. The idea is pretty crude in the
current stage and I'll have to look deeper into it, but not now.</p>
<p>I also discussed about the implementing a pattern dispached based solver
suggested by <a href="https://groups.google.com/d/msg/sympy/moSEFHop0n4/e2hBKRQ9WP4J">F.B</a>
on the mailing list. But we decided that it will be better if we finish the
equation solver by the current technique first.</p>
<h3>Intersection with S.Reals</h3>
<p>I decribed in the last post that one way to solve trigonometric equation is
rewriting them in terms of \( exp \). But that is \( exp \) in the complex domain and
the solution of \(exp(x) = a \) is \( \left\{i \left(2 \pi
n + \arg{\left (a \right )}\right) + \log{\left
(\left\lvert{a}\right\rvert \right )}\; |\; n \in \mathbb{Z}\right\}
\). Hence we have to filter out real solutions from the obtained solutions.
The filering is equivalent to the intersection of the solutions with the \( \mathbb{R}
\) set. Suppose \( g(x) \) and \( h(x) \) are real valued functions and we
have to perform
$$ \mathbb{R} \cap \left\{g{\left (n \right )} + i h{\left (n \right )}\; |\; n \in \mathbb{Z}\right\} $$
then the answer will be simply
$$ \left\{g{\left (n \right )}\; |\; n \in \left\{h{\left (n \right )} = 0\; |\; n \in \mathbb{Z}\right\}\right\} $$</p>
<p>Separate the real and imaginary parts and equate the imaginary to zero
but the problem was with the assumptions on the symbols. For example while
separating real and imaginary parts of the equation.</p>
<pre class="code literal-block"><span class="n">In</span><span class="p">[]</span><span class="o">:</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="n">I</span><span class="o">*</span><span class="n">n</span><span class="p">).</span><span class="n">as_imag_real</span><span class="p">()</span>
<span class="n">Out</span><span class="p">[]</span><span class="o">:</span><span class="p">(</span><span class="n">re</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="n">im</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">re</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">+</span> <span class="n">im</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</pre>


<p>That is because <code>n</code> is by default complex, even in the <code>Lambda(..).expr</code>.
I wrote some code to decide the
assumption on the variable of imageset from the baseset. See <a href="https://github.com/sympy/sympy/pull/7694">PR
7694</a>.
There was another issue that needs to be resolved
<code>S.Integers.intersect(S.Reals)</code> doesn't evaluate to <code>S.Reals</code>.</p>
<h3>LambertW and Multivariate Solvers</h3>
<p>The method to solve equation containing exp and log function is using the
LambertW function. LambertW function is the inverse of \( x \exp(x) \).  The
function is multivariate function both for the real and complex
domains and Sympy has only one branch implemented. This also leads us to loss
of solutions. Aaron gave an example
<a href="https://github.com/sympy/sympy/pull/2723#issuecomment-33760912">here</a>. But I'm
pretty unfamiliar with solving by LambertW and LambertW itself and it will take
me some time to build an understanding of them.
As an ad hoc solution I'm using the code in the <code>_tsolve</code> in the
<code>solvers.solvers</code> module to do at least what the current solvers can do.</p>
<p>When the importing of <code>_tsolve</code> method was done. I started working on the
multivariate solvers. Here's how the current multivariate solvers work:</p>
<p><strong>Solving single multivariate equation</strong></p>
<ol>
<li>
<p>count the number of free symbols in f - no of symbols for
equation. If the equation has exactly one symbol which is not asked for then
use <code>solve_undetermined_coeffs</code>, the <code>solve_undetermined_coeffs</code> find the
values of the coefficient in a univariate polynomial such that it always
equates to zero.</p>
</li>
<li>
<p>Then for each symbol <code>solve_linear</code> is tried which tries to find a solution
of that symbol in terms of constants or other symbols, the docstring says</p>
<pre class="code literal-block"><span class="n">No</span> <span class="n">simplification</span> <span class="n">is</span> <span class="n">done</span> <span class="n">to</span> <span class="n">f</span> <span class="n">other</span> <span class="n">than</span> <span class="n">and</span> <span class="n">mul</span><span class="o">=</span><span class="n">True</span> <span class="n">expansion</span><span class="p">,</span>
<span class="n">so</span> <span class="n">the</span> <span class="n">solution</span> <span class="n">will</span> <span class="n">correspond</span> <span class="n">strictly</span> <span class="n">to</span> <span class="n">a</span> <span class="n">unique</span> <span class="n">solution</span><span class="p">.</span>
</pre>


</li>
</ol>
<p>So we don't have to worry about loosing a solution. For every symbol it is
checked if doesn't depend on previously solved symbols, if it does that
solution is discarded.</p>
<ol>
<li>For the symbols for which the above method failed, the <code>_solve</code> function is
called for the equation for that variable and as above if the solution contains
a variable already solved then that solution is discarded.</li>
</ol>
<p><strong>System of equations in multiple variables</strong></p>
<ul>
<li>
<p>Try to convert the system of equations into a system of polynomial equation
  in variables</p>
</li>
<li>
<p>If all the equations are linear solve then using <code>solve_linear_system</code>, check
  the result and return it. If asked for particular solution solve using
  <code>minsolve_linear_system</code></p>
</li>
<li>
<p>If the number of symbols is same as the size of the system solve the
  polynomial system using <code>solve_poly_system</code>. In case the system is
  over-determined All the free symbols intersection the variables asked for are
  calculated. Then for every subset of such symbols of length equal to that of
  the system, an attempt to solve the equations by <code>solve_poly_system</code> is made.
  Here if any of the solution depends on previously solved system the solution
  is discarded.</p>
</li>
<li>
<p>In the case there are failed equations:</p>
<ul>
<li>For every know result:</li>
<li>Substitute every thing into the failed equation and see if the equation turns to zero.
  if it does accept the result otherwise put it in the bad_results group.</li>
<li>Then try to solve try to solve the failed equation using <code>solve</code> for each symbol.</li>
<li>If that solution depends on any other previously solved symbols
  discard it.</li>
<li>If it doesn't satisfy other equations, discard it.</li>
<li>Check if the solution doesn't set any denominator to zero, if it does
  discard that solution.</li>
<li>If it satisfies the above conditions substitute this value in know
  solutions and add it as a new result.</li>
</ul>
</li>
</ul></div>
    </summary>
    <updated>2014-07-12T14:00:01Z</updated>
    <category term="mathjax"/>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://codesachin.wordpress.com/2014/07/12/gsoc-weeks-78-beginning-with-dyadics/</id>
    <link href="http://codesachin.wordpress.com/2014/07/12/gsoc-weeks-78-beginning-with-dyadics/" rel="alternate" type="text/html"/>
    <title>GSoC Weeks 7,8: Beginning with Dyadics</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">The last two weeks have been slow, hence a common blog post for both of them. Last week was spent in improving the current PR even more, especially with dedicated rotator methods for each type of rotation (Body/Space/Axis/Quaternion) of Coordinate Systems. Its not much, just methods like ‘orient_new_axis’, ‘orient_new_body’, etc. as add-ons on top of […]<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=21&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>The last two weeks have been slow, hence a common blog post for both of them. Last week was spent in improving the current PR even more, especially with dedicated rotator methods for each type of rotation (Body/Space/Axis/Quaternion) of Coordinate Systems. Its not much, just methods like ‘orient_new_axis’, ‘orient_new_body’, etc. as add-ons on top of the all-powerful ‘orient_new’ method. The coding involved wasn’t much, since the new methods essentially call the ‘orient_new’ method with the relevant parameters. However, the rotation API is now much simpler than using the ‘orient_new’ method for all kinds of orientations – mainly because the extra flexibility provided by the ‘orient_new’ method implies a more awkward API for the same.<br/>
Jason, Mathew and Aaron were together at SciPy, during our last week’s GSoC meeting. There, the common consensus was to try and have Rotator classes to make the orientation framework even more user-friendly. Discussing the interface for the same is on this week’s meeting agenda.<br/>
A big change that we thought of doing in the timeline was to let go of spherical/cylindrical systems for a while, and instead focus on dyadic tensors – since the code is mostly done (my work during last year’s GSoC), they will be a useful and powerful addition to the vector module.<br/>
So my next few (much shorter than the current one) PRs would be-<br/>
1) The code for dyadic tensors<br/>
2) Documentation for all the basic, non-time-dependent framework<br/>
3) Rotator classes(?)<br/>
4) Implementation of the Del operator as an SymPy Function<br/>
5) Just some basic helper methods to convert vectors from one form (rect/spherical/cylindrical) to another<br/>
The code for Dyadics is mostly done, the docs are on-going, and I am thinking of having a common super-class for Vector and Dyadic- called Tensor(inheriting from Expr) – since many of the SymPy manipulation procedures work in the exact same manner for Vectors as well as Dyadics. Will discuss this with Jason soon.</p>
<p>Anyways, thats all for now, have a great week!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/21/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/21/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=21&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-12T07:37:43Z</updated>
    <category term="Google Summer of Code 2014"/>
    <author>
      <name>srjoglekar246</name>
    </author>
    <source>
      <id>http://codesachin.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://codesachin.wordpress.com/category/google-summer-of-code-2014/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://codesachin.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://codesachin.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>- Blog by Sachin Joglekar</subtitle>
      <title>Dream. Think. Code. » Google Summer of Code 2014</title>
      <updated>2014-07-29T19:20:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2014-07-11:gsoc-week-8.html</id>
    <link href="http://jcrist.github.io/gsoc-week-8.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 8: Try, try, try again...</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I'm still struggling to solve the <code>nan</code> and <code>oo</code> issue I've discussed in my
post <a href="http://jcrist.github.io/gsoc-week-6.html">a couple weeks ago</a>.
<a href="http://jcrist.github.io/gsoc-week-7.html">Last week</a> I showed off a custom
written subs function for use inside <code>sympy.physics.mechanics</code> that helped with
speed considerably, and <em>attempted</em> to solve the <code>nan</code> problem. This worked
great for small-medium expressions, but failed on large ones. Or did it? I'm not
sure anymore.</p>
<p><a href="https://github.com/sympy/sympy/pull/7464">This pull request</a> brought up something
that I had witnessed, but never really thought about as a potential source of my
issues. To summarize, Sympy's current (hopefully soon to be old) caching system
never clears. Ever. For interactive work, or short running sessions this is fine.
However, for the huge expressions generated in <code>mechanics</code>, this can be a source
of memory issues, as the cache grows to hold all sub-expressions that were cached.</p>
<p>It turns out that <code>simplify</code> is one of those functions that is cached. This may
explain why when I tried to use <code>msubs</code> with <code>smart_subs=True</code> (which crawls the
expression tree and does selective simplification) this resulted in <em>all</em> of my
RAM being used up (4 GB!!!). I haven't had a chance to pull in this PR into my
repo and test it out, but it sounds like it should fix the problem. Instead of
growing infinitely, the cache uses a <a href="http://jcrist.github.io/feeds/ //en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used">least recently used (LRU)</a> algorithm to
determine what stays and what is removed. The cache size can be set by the user,
so those that prefer speed over memory use can still cache everything. Per his
benchmarks it seems to be only 10% slower, which shouldn't be much of a problem.
Overall, I'm really psyched to start using this. Perhaps with this the <code>smart_subs</code>
I wrote up will work, even if it takes a while. If not, I'm kind-of out of ideas.</p>
<p>I spent some time this week trying out a few other ways of solving this problem.
So far none of them have worked.</p>
<h3>1. Using <code>cse</code>, and applying simplify selectively to the sub-expressions.</h3>
<p>The basic idea here was to apply <code>cse</code> on the expression, and then evaluate
each sub-expression. If it evaluated to <code>nan</code>, simplify it, then evaluate it
again.</p>
<p>This seemed like a good idea at first, but upon closer examination it
falls apart. The issue is that the expressions that could cancel/simplify out
are often broken into <em>separate sub-expressions</em>. This means that they are
evaluated numerically separately, and only once combined will they result in
a <code>nan</code>, at which point they can't be simplified anyway.</p>
<h3>2. Taking the limit of the bad sub-expressions.</h3>
<p>This was another idea that seemed good until I tried it. Similar to the <code>smart_subs</code>
I talked about <a href="http://jcrist.github.io/gsoc-week-7.html">last week</a>, except this
time it's taking the limit of the bad sub-expressions as they approach the operating
point. The thought being that it may be computationaly cheaper to find the limit
than to apply <code>simplify</code> and then evaluate.</p>
<p>There were several problems iwth this design. The first being that <code>Sympy</code> has no
functionality for finding multivariable limits. These can't be calculated
iteratively either (by that I mean find the limit for x, then the limit for y, then
the limit for z, etc...), as the part that could "simplify out" could already be
gone.</p>
<p>The second, and more serious issue, is that there was no way to tell if the limit
at that point was equal to the value the expression should actually evaluate too, or if it
is just the value of the <em>limit at that point</em>. For example:</p>
<div class="codehilite" style="background: #272822;"><pre style="line-height: 125%;"><span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">expr</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(a</span> <span style="color: #f92672;">-</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">)</span><span style="color: #f92672;">/</span><span style="color: #f8f8f2;">(a</span><span style="color: #f92672;">**</span><span style="color: #ae81ff;">2</span> <span style="color: #f92672;">-</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">)</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">op_point</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">{a:</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">}</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">expr</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">subs(op_point)</span>
<span style="color: #f8f8f2;">nan</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">limit(expr,</span> <span style="color: #f8f8f2;">a,</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #e6db74;">'+'</span><span style="color: #f8f8f2;">)</span>
<span style="color: #ae81ff;">1</span><span style="color: #f92672;">/</span><span style="color: #ae81ff;">2</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">limit(expr,</span> <span style="color: #f8f8f2;">a,</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #e6db74;">'-'</span><span style="color: #f8f8f2;">)</span>
<span style="color: #ae81ff;">1</span><span style="color: #f92672;">/</span><span style="color: #ae81ff;">2</span>
</pre></div>


<p>Using the method described above, it would seem that the expression should just
evaluate to <code>1/2</code>. However, if you actually plot this expression, you'll find
that there is a discontinuity at <code>a = 1</code>. From either side it approaches 1/2,
but at 1 it is actually <code>nan</code>.</p>
<h3>3. Numerical perturbation about the setpoint to find the limit of the bad sub-expressions.</h3>
<p>The idea here was to calculate the limit of the sub-expressions through numerical
evaluation and perturbation. This fails for all the reasons described above, as
well as the fact that Sympy is a symbolic computation library, and we should be
able to do this symbolically.</p>
<hr/>
<p>Unfortunately those were all the ideas I had to solve this problem. If the algorithm described
last week doesn't end up working using the new cacheing system, I'm kind of stumped.
Back on <a href="http://www.seas.upenn.edu/~terfan/strugglebus/pennapps2013f/">the struggle bus</a>...</p>
<hr/>
<h2>Meanwhile...</h2>
<p>As another <em>potential</em> solution, I've set about refactoring the <code>KanesMethod</code> class
in the hope that I'll find some way of generating expressions that are smaller
than they currently are. The first step was rewriting to make it readable, more
modular, and remove the dead code that had built up over the years. This is done.
In it's current state it passes all tests, and runs them in half the time that it
had before!!! Still no major reduction in expression size, but I'll hopefully find
some magical place in the code that could be made more efficient. We'll see.</p>
<p>I'm also working on the documentation for the linearization stuff that's already
done, as well as waiting on someone to finally review my
<a href="https://github.com/sympy/sympy/pull/7681">PR for LagrangesMethod support</a>. I hope to
get that merged soon so that I can get started on the code generation portion of this
project.</p></div>
    </summary>
    <updated>2014-07-11T22:00:00Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <category term="pydy"/>
    <category term="dynamics"/>
    <author>
      <name>Jim Crist</name>
    </author>
    <source>
      <id>http://jcrist.github.io/</id>
      <link href="http://jcrist.github.io/" rel="alternate" type="text/html"/>
      <link href="http://jcrist.github.io/feeds/gsoc.atom.xml" rel="self" type="application/atom+xml"/>
      <title>Marginally Stable</title>
      <updated>2014-07-18T20:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=10</id>
    <link href="http://thilinaatsympy.wordpress.com/2014/07/11/gsoc-week-8-solving-ax-b-and-determinant/" rel="alternate" type="text/html"/>
    <title>[GSoC] Week 8: Solving Ax = b and Determinant</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, Sorry, I couldn’t write a blog post last week. During past two weeks, I contributed in solving some of the bugs in CSymPy and the determinant of a Matrix. Also, I implemented the solutions of the system by using various decomposition methods. Determinant of a Matrix I implemented determinant using two different methods, …<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=10&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All,</p>
<p>Sorry, I couldn’t write a blog post last week. During past two weeks, I contributed in solving some of the bugs in CSymPy and the determinant of a Matrix. Also, I implemented the solutions of the system <img alt="Ax = b" class="latex" src="http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="Ax = b"/> by using various decomposition methods.</p>
<h1>Determinant of a Matrix</h1>
<p>I implemented determinant using two different methods, Bareiss’s method and Berkowitz algorithm.</p>
<h2>Bareiss’s algorithm</h2>
<p>Bareiss’s algorithm[1] can be used to find the row echelon form or determinant of a Matrix. This is not a division free algorithm, but guarantees that all the divisions are exact, i.e. there is no remainder [2]. The algorithm is based on Sylvester’s identity and a transformation that yields the determinant after successive application. This can be also used to solve a system of equations. You can read more about the algorithm in [2].</p>
<h2>Berkowitz Algorithm</h2>
<p>Berkowitz algorithm can also be used in calculating the determinant. This algorithms has various other applications as well, like calculating characteristic polynomial of a matrix, principal minors and Eigen values. I am yet to implement the calculation of characteristic polynomial and Eigen values using this algorithm but that won’t be a difficult thing. I wish to do it over the weekend.</p>
<h1>Ax = b</h1>
<p>I used various matrix decompositions implemented earlier to solve the system <img alt="Ax = b" class="latex" src="http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="Ax = b"/>. Only the fraction free LU decomposition was used earlier, but now we can solve linear systems using LU decomposition and LDL decomposition. QR and Cholesky decomposition can be enabled after figuring out a good way to do expression simplification in CSymPy.</p>
<p>I hope to work on Sparse matrices in upcoming weeks and do some benchmarks of CSymPy’s algorithms with GiNaC.</p>
<h1>References</h1>
<p>[1] Erwin H. Bareiss, Sylvester’s Identity and Multi step Integer-Preserving Gaussian Elimination</p>
<p>[2] Wikipedia article, <a href="http://en.wikipedia.org/wiki/Bareiss_algorithm" rel="nofollow">http://en.wikipedia.org/wiki/Bareiss_algorithm</a></p>
<p>[3] Wolfram Mathworld article, <a href="http://mathworld.wolfram.com/SylvestersDeterminantIdentity.html" rel="nofollow">http://mathworld.wolfram.com/SylvestersDeterminantIdentity.html</a></p>
<p> </p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/10/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/10/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=10&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-07-11T15:51:53Z</updated>
    <category term="GSoC-2014-CSymPy"/>
    <category term="CSymPy"/>
    <category term="determinant"/>
    <category term="Linear Algebra"/>
    <category term="SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-07-29T19:20:40Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=97</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-7/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 7</title>
    <summary>Hello everyone, I have been extremely busy this week. So I haven’t managed to get the time to write out a proper post. However since it is already very late in the week it...</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello everyone,</p>
<p>I have been <em>extremely</em> busy this week. So I haven’t managed to get the time to write out a proper post. However since it is already very late in the week it is better to create a small outline than wait for the actual product. Firstly, I worked on standardization of FOL expression. However the bulk of the week was consumed in writing code for the <a href="http://en.wikipedia.org/wiki/Unification_%28computer_science%29" target="_blank" title="Unification">most general unifier</a> and <a href="http://en.wikipedia.org/wiki/Resolution_%28logic%29#Resolution_in_first_order_logic" target="_blank" title="Resolution">resolution</a>. While these functions mark almost the end of my FOL proposal, the entire module is yet not ready and still needs some work. I will explain all these concepts in detail (preferably some time next week, once I have more time) along with examples and how to do it in SymPy.</p>
<p>Cheers!!!</p></div>
    </content>
    <updated>2014-07-10T19:13:06Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:02Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-8093487105603123103</id>
    <link href="http://blog.sudhanshumishra.in/feeds/8093487105603123103/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-working-with-geometry.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/8093487105603123103" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/8093487105603123103" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-working-with-geometry.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 Progress: Working with geometry</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div class="markdown-body" style=""><div style="color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;"><span style="background-color: white;">This week I completed <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">refraction_angle</code>. Now it also works with <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code> and <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Plane</code>. This function calculates transmitted vector after refraction. <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">medium1</code> and <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">medium2</code> can be <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Medium</code>or any sympifiable object. If<code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">incident</code> is an object of <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code>, <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">normal</code> also has to be an instance of <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code> in order to get the output as a <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code>. If plane of separation is not provided and normal is an instance of <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code>, normal will be assumed to be intersecting incident ray at the plane of separation. This will not be the case when <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">normal</code> is a <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Matrix</code> or any other sequence. <br style=""/>If <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">incident</code> is an instance of <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code> and <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">plane</code> has not been provided and <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">normal</code> is not<code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Ray3D</code>, output will be a <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Matrix</code>. It is dependent on <code style="border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; font-family: Menlo, Consolas, 'Courier New', monospace; font-size: 12px !important; padding: 2px 4px; white-space: nowrap;">Plane</code> so I haven’t added tests for it.</span></div><div style="color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;"><span style="background-color: white;">Here’s the link to the PR <a href="https://github.com/sympy/sympy/pull/7626" style="">https://github.com/sympy/sympy/pull/7626</a></span></div><div style="color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;"><span style="background-color: white;">This week I also worked on making spherical mirrors in SymPy. There are few issues that I am facing. Currently I’m working(stuck) on locating mirrors in space. It’s an amalgamation of 2D and 3D geometry. I still have to subclass Ray of geometry and make it useful for this. I’ve sent a <a href="https://github.com/sympy/sympy/pull/7686" style="">WIP PR</a>.</span></div><div style="color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;"><span style="background-color: white;">I’m waiting for Sean to merge <a href="https://github.com/sympy/sympy/pull/7607" style="">this</a> long waited PR for moving Gaussian optics module.</span></div><div style="color: #162029; font-family: 'Open Sans', 'Trebuchet MS', Helvetica, sans-serif; font-size: 14px; line-height: 20px; margin-bottom: 15px;">That's all for now.</div></div></div></div>
    </content>
    <updated>2014-07-08T17:24:18Z</updated>
    <published>2014-07-08T17:24:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="physics"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-6017249369410601684</id>
    <link href="http://geekpy.blogspot.com/feeds/6017249369410601684/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-7.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/6017249369410601684" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/6017249369410601684" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/07/gsoc-week-7.html" rel="alternate" type="text/html"/>
    <title>Gsoc Week-7</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">This has been a decent week in terms of progress. One of my long standing PR's has been merged (Line3D class). The other one on Plane has been reviewed by a lot of people and luckily I got a lot of suggestions as to how I can improve the code. I have made the required changes and am waiting for a final go on this PR as that would speed up the work on the optics module as it has a dependency on this class.<br/><br/>Meanwhile this week I also worked on the Hyperbola class. I have added a few more methods. <a href="https://github.com/sympy/sympy/pull/7709">Here</a> is the link to the PR. I plan to implement more methods this week along with the Rectangular Hyperbola class.<br/><br/>Until then cheers!</div></div>
    </content>
    <updated>2014-07-08T04:42:02Z</updated>
    <published>2014-07-08T04:42:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2014-07-06:gsoc-week-7.html</id>
    <link href="http://jcrist.github.io/gsoc-week-7.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 7: Expression Trees and Substitution</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
</p><div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Late post this week due to the <a href="http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29">celebration of everything that is American</a>. This week I finally got my first PR merged. The general linearization code is now part of the Sympy codebase. I currently have a <a href="https://github.com/sympy/sympy/pull/7681">PR for Lagrange support</a> waiting to be reviewed. After that I just need to write the ReST docs and the first part of the project is "complete". The rest of the week was spent on more optimization work. I'm getting closer to being able to solve the <a href="http://docs.sympy.org/dev/modules/physics/mechanics/bicycle_example.html">bicycle example</a> in a reasonable amount of time!</p>
<p><a href="http://jcrist.github.io/gsoc-week-6.html">Last week's post</a> showed the issues with the large expression size and <code>subs</code> (it takes forever to run). I took some time this week to look into how expressions work in sympy, and wrote a specialized subs function for use in <code>sympy.physics.mechanics</code>. The rest of this post will show give an overview and some benchmarks of this code.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="expression-trees">Expression Trees</h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In sympy, expressions are stored as <a href="http://en.wikipedia.org/wiki/Tree_%28data_structure%29">trees</a>. Each node is an object that has an attribute <code>args</code> that contains a list of it's child nodes. This is best shown by an example:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [1]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">sympy.printing.dot</span> <span class="kn">import</span> <span class="n">dotprint</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [2]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s">'a, b, c'</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [3]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">test</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="n">a</span><span class="o">**</span><span class="mi">2</span><span class="o">/</span><span class="n">b</span>
<span class="n">test</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[3]:</div>


<div class="output_text output_subarea output_pyout">
<pre>a**2/b + a*cos(a + b)
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [4]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'test.dot'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">fil</span><span class="p">:</span>
    <span class="n">fil</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">dotprint</span><span class="p">(</span><span class="n">test</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [5]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="o">%%</span><span class="k">bash</span>
<span class="n">dot</span> <span class="o">-</span><span class="n">Tpng</span> <span class="n">test</span><span class="o">.</span><span class="n">dot</span> <span class="o">-</span><span class="n">o</span> <span class="n">test</span><span class="o">.</span><span class="n">png</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [6]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">IPython.core.display</span> <span class="kn">import</span> <span class="n">Image</span> 
<span class="n">Image</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="s">'test.png'</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[6]:</div>


<div class="output_png output_subarea output_pyout">
<img/>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The root node of this tree is an <code>Add</code> object, as the outermost operation is adding two smaller expressions together. Going down the left side first, we see that <span class="math">\(a^2/b\)</span> is stored as multiplying <span class="math">\(a^2\)</span> times <span class="math">\(b^{-1}\)</span>. Sympy doesn't have <code>Div</code> objects, fractions are all expressed using <code>Mul</code>, with the denominator wrapped in a <code>Pow(den, -1)</code>. Traversing the right side <span class="math">\(a \cos(a + b)\)</span> is stored as multiplying <code>a</code> and a <code>cos</code> object together. The <code>cos</code> object itself contains one child node - an <code>Add</code> - which holds <code>a</code> and <code>b</code>.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="crawling-the-tree">Crawling the Tree</h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The design of sympy expression objects uses two key features: <code>args</code>, and <code>func</code>. As mentioned above, <code>object.args</code> holds a tuple of all the child nodes for that object. Likewise, <code>object.func</code> is a class method that takes in arguments, and returns an instance of that class. For <em>most</em> objects in sympy, running</p>
<pre><code>object.func(*object.args) == object</code></pre>
<p>will be a true expression. I say most because not all objects adhere to this (leaf nodes). There has been a lot of discussion about this <a href="https://github.com/sympy/sympy/wiki/Args-Invariant">here</a>, if you're interested.</p>
<p>One of the great things about this design is that it makes it very easy to write operations that modify these trees using recursion. Normally, recursion in python is frowned upon because the function calls add overhead that could be removed if rewritten as a loop. There is also a maximum recursion depth (default of 1000) to prevent stackoverflow conditions. However, a sympy expression that has 1000 nested nodes is highly unlikely (even in <code>mechanics</code>), and the recursion makes the code <em>much</em> more readable. As the <a href="http://legacy.python.org/dev/peps/pep-0020/">zen of python</a> says, "Readability counts".</p>
<p>A simple crawler to print every node is written below. It consists of two functions.</p>
<p>The first one is a generic function <code>crawl</code>, that crawls the expression tree, calls <code>func</code> on each node, and returns the result if there is one. Otherwise it recurses down a level into the child nodes, forming a list of <code>new_args</code>, and then calls <code>expr.func</code> to rebuild the expression from those args.</p>
<p>The second one is a printer function. As we don't want to modify the expression at all, we'll just print the node, and then return the expression if it doesn't have args (it's a leaf node). Note that there are more efficient ways to traverse the tree and print all the nodes - this is mostly to demonstrate <code>crawl</code>, as it will be used later.</p>
<p>Using these two functions a function that crawls the tree, prints every node, and returns the original expression can be composed using a simple lambda statement.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [7]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">crawl</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="sd">"""Crawl the expression tree, and apply func to every node."""</span>
    <span class="n">val</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">val</span>
    <span class="n">new_args</span> <span class="o">=</span> <span class="p">(</span><span class="n">crawl</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">new_args</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">printer</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">"""Print out every node"""</span>
    <span class="k">print</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">expr</span>

<span class="n">print_expr</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">expr</span><span class="p">:</span> <span class="n">crawl</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">printer</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's test this function on our expression from above:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [8]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">temp</span> <span class="o">=</span> <span class="n">print_expr</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
<span class="c"># Checking that the expression was unchanged (temp == test)</span>
<span class="k">assert</span> <span class="n">temp</span> <span class="o">==</span> <span class="n">test</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>a**2/b + a*cos(a + b)
a**2/b
a**2
a
2
1/b
b
-1
a*cos(a + b)
a
cos(a + b)
a + b
b
a

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Comparing the printed results with the tree diagram from before, one can see how each big expression can be decomposed into smaller expressions. Further, the rebuilt expression after traversing was identical to the input expression. In the next section we'll write another function that changes the expression tree using <code>crawl</code>.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="a-custom-subs-function">A Custom <code>subs</code> Function</h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>In <code>sympy.physics.mechanics</code>, we deal with symbols, dynamic symbols (which are of type <code>AppliedUndef</code>), and derivatives of these dynamicsymbols. Unfortunately, the provided <code>subs</code> function traverses inside the <code>Derivative</code> terms, giving underdesired results:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [9]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">sympy.physics.mechanics</span> <span class="kn">import</span> <span class="n">dynamicsymbols</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">dynamicsymbols</span><span class="p">(</span><span class="s">'x, y'</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">diff</span><span class="p">())</span>
<span class="n">test</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[9]:</div>


<div class="output_text output_subarea output_pyout">
<pre>a*(x(t) + Derivative(x(t), t))
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [10]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Subbing in b for x. Desired result is a*(b + x.diff())</span>
<span class="n">test</span><span class="o">.</span><span class="n">subs</span><span class="p">({</span><span class="n">x</span><span class="p">:</span> <span class="n">b</span><span class="p">})</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[10]:</div>


<div class="output_text output_subarea output_pyout">
<pre>a*(b + Derivative(b, t))
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To get around this problem, we've been using a custom function <code>_subs_keep_derivs</code>. This function creates two substitution dictionaries - one with <code>Derivative</code>, and one without. Four substitutions then take place:</p>
<ol style="">
<li>Perform subs with the terms in the derivative dictionary</li>
<li>Substitute in <code>Dummy</code> symbols for all <code>Derivative</code> terms in the resulting expression</li>
<li>Perform subs with the terms in the non-derivative dictionary</li>
<li>Substitute back the original <code>Derivative</code> terms from the <code>Dummy</code> symbols</li>
</ol>
<p>This is slow due to the need for <em>four calls to expr.subs</em>. Also, <code>subs</code> applies substitutions sequentially (i.e. each term in the substitution dict requires its own tree traversal). For our purposes in <code>mechanics</code>, this is unecessary. Using the already written <code>crawl</code> function, we can compose our own <code>subs</code> that ignores terms inside derivative objects fairly easily:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [11]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">sub_func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">):</span>
    <span class="sd">"""Perform expression subsitution, ignoring derivatives."""</span>
    <span class="k">if</span> <span class="n">expr</span> <span class="ow">in</span> <span class="n">sub_dict</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">sub_dict</span><span class="p">[</span><span class="n">expr</span><span class="p">]</span>
    <span class="k">elif</span> <span class="ow">not</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span> <span class="ow">or</span> <span class="n">expr</span><span class="o">.</span><span class="n">is_Derivative</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">expr</span>
    
<span class="n">new_subs</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">:</span> <span class="n">crawl</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_func</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>That's it. Due to the composable nature of <code>crawl</code>, the code needed to perform this operation is incredibly simple. Let's test it to make sure it on our previous expression:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [12]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Simple example</span>
<span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">b</span><span class="p">})</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[12]:</div>


<div class="output_text output_subarea output_pyout">
<pre>a*(b + Derivative(x(t), t))
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So it leaves terms inside derivaties alone, exactly as desired. We can see how this compares to the previous implementation:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [13]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Old way of doing things, taken from sympy.physics.mechanics.functions</span>
<span class="k">def</span> <span class="nf">_subs_keep_derivs</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">):</span>
    <span class="sd">"""Performs subs exactly as subs normally would be,</span>
<span class="sd">    but doesn't sub in expressions inside Derivatives."""</span>

    <span class="n">ds</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">atoms</span><span class="p">(</span><span class="n">Derivative</span><span class="p">)</span>
    <span class="n">gs</span> <span class="o">=</span> <span class="p">[</span><span class="n">Dummy</span><span class="p">()</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ds</span><span class="p">]</span>
    <span class="n">items</span> <span class="o">=</span> <span class="n">sub_dict</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
    <span class="n">deriv_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">is_Derivative</span><span class="p">)</span>
    <span class="n">sub_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span><span class="o">.</span><span class="n">is_Derivative</span><span class="p">)</span>
    <span class="n">dict_to</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">ds</span><span class="p">,</span> <span class="n">gs</span><span class="p">))</span>
    <span class="n">dict_from</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">gs</span><span class="p">,</span> <span class="n">ds</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">deriv_dict</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">dict_to</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">sub_dict</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">dict_from</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [14]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Benchmark substitution</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using _subs_keep_derivs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">_subs_keep_derivs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">b</span><span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using new_subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">b</span><span class="p">})</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Using _subs_keep_derivs
100 loops, best of 3: 3 ms per loop
Using new_subs
10000 loops, best of 3: 39.9 µs per loop

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So it's significantly faster. For this small benchmark, approximately 75x faster. Also, as it works in only one traversal of the tree it has a smaller computational complexity - meaning that for larger expressions this speed increase will be even higher. For kicks, let's see how it compares to normal subs for an expression without derivatives:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [15]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># For kicks, see how it compares to subs for expr without derivative:</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">test</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using new subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Using subs
1000 loops, best of 3: 676 µs per loop
Using new subs
1000 loops, best of 3: 247 µs per loop

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So our implementation of <code>subs</code> is faster than sympy's. However, this micro benchmark isn't all that meaningful. Normal <code>subs</code> works in multiple passes so that expressions inside the <code>sub_dict</code> are also affected. <code>subs</code> also incorporates math knowledge about the expressions, while ours just does a naive direct match and replace. For our purposes though, this is sufficient. Also, as with all micro-benchmarks, this should be taken with a grain of salt. The main point is that our custom subs function is <em>significantly faster</em> than the old method of <code>_subs_keep_derivs</code>.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="custom-simplification">Custom Simplification</h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The other major issue I discussed <a href="http://jcrist.github.io/gsoc-week-6.html">last week</a> was that some expressions result in <code>nan</code> or <code>oo</code> (infinity) when not simplified, but after simplification result in a realizable expression. For example:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [16]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">test</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="n">tan</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Before simplification:"</span><span class="p">,</span> <span class="n">test</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"After simplification:"</span><span class="p">,</span> <span class="n">simplify</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Before simplification: nan
After simplification: 1

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For small expressions, doing <code>simplify</code> before evaluation is acceptable, but for larger ones simplification is way too slow. However, these divide by zero errors are caused by subexpressions, not the whole expression. Using some knowledge of the types of expressions present in the mechanics module, we can come up with some simple heuristics for what can result in <code>nan</code>, <code>oo</code> and <code>zoo</code>:</p>
<ol style="">
<li>tan(pi/2)</li>
<li>Fractions with 0 in the denominator</li>
</ol>
<p>In reality, these are the same thing, because</p>
<p><span class="math">\[ \tan(\pi/2) = \frac{\sin(\pi/2)}{\cos(\pi/2)} = \frac{1}{0} \]</span></p>
<p>Using this knowledge, we can come up with a simple algorithm for performing subs and catching these issues at the same time:</p>
<ol style="">
<li>Replace all <code>tan(*)</code> with <code>sin(*)/cos(*)</code>. This will allow us to only have to check for denominator = 0 conditions.</li>
<li>For nodes that are fractions, check if the denominator evaluates to 0. If so, apply <code>simplify</code> to the fraction, and then carry on as normal.</li>
</ol>
<p>This may not catch every instance that results in would result in a <code>nan</code> without simplification, but it should catch most of them. Also, the algorithm is so simple, that it can be implemented in only a few lines. First, the <code>tan</code> replacement. This requires almost no new code, as it can be composed using the already written <code>crawl</code> function:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [17]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">tan_repl_func</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">"""Replace tan with sin/cos"""</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">tan</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">sin</span><span class="p">(</span><span class="o">*</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span><span class="o">/</span><span class="n">cos</span><span class="p">(</span><span class="o">*</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
    <span class="k">elif</span> <span class="ow">not</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span> <span class="ow">or</span> <span class="n">expr</span><span class="o">.</span><span class="n">is_Derivative</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">expr</span>

<span class="n">tan_repl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">expr</span><span class="p">:</span> <span class="n">crawl</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">tan_repl_func</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Testing it:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [18]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">tan_repl</span><span class="p">(</span><span class="n">tan</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">+</span> <span class="n">tan</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">/</span><span class="n">tan</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[18]:</div>


<div class="output_text output_subarea output_pyout">
<pre>sin(a)/cos(a) + sin(a)*cos(b)/(sin(b)*cos(a))
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So that works as expected. Now for the second pass; the subs with denominator checking and selective simplification. This takes a little bit more code than before, but I've heavily commented it so you should be able to see what's going on:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [19]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">smart_subs_func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">):</span>
        <span class="c"># Decompose the expression into num, den</span>
        <span class="n">num</span><span class="p">,</span> <span class="n">den</span> <span class="o">=</span> <span class="n">fraction_decomp</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">den</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="c"># If there is a non trivial denominator, we need to handle it</span>
            <span class="n">denom_subbed</span> <span class="o">=</span> <span class="n">smart_subs_func</span><span class="p">(</span><span class="n">den</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">denom_subbed</span><span class="o">.</span><span class="n">evalf</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c"># If denom is 0 after this, attempt to simplify the bad expr</span>
                <span class="n">expr</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c"># Expression won't result in nan, find numerator</span>
                <span class="n">num_subbed</span> <span class="o">=</span> <span class="n">smart_subs_func</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">num_subbed</span><span class="o">/</span><span class="n">denom_subbed</span>
        <span class="c"># We have to crawl the tree manually, because `expr` may have been</span>
        <span class="c"># modified in the simplify step. First, perform subs as normal:</span>
        <span class="n">val</span> <span class="o">=</span> <span class="n">sub_func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">val</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">val</span>
        <span class="n">new_args</span> <span class="o">=</span> <span class="p">(</span><span class="n">smart_subs_func</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">new_args</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">fraction_decomp</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">"""Return num, den such that expr = num/den"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Mul</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span><span class="p">,</span> <span class="mi">1</span>
    <span class="n">num</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">den</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">is_Pow</span> <span class="ow">and</span> <span class="n">a</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">den</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">a</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">num</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">den</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">expr</span><span class="p">,</span> <span class="mi">1</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">Mul</span><span class="p">(</span><span class="o">*</span><span class="n">num</span><span class="p">)</span>
    <span class="n">den</span> <span class="o">=</span> <span class="n">Mul</span><span class="p">(</span><span class="o">*</span><span class="n">den</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">num</span><span class="p">,</span> <span class="n">den</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Finally, we can put everything from above inside a nice wrapper function:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [20]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">smart_subs</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">):</span>
    <span class="sd">"""Performs subs, checking for conditions that may result in `nan` or </span>
<span class="sd">    `oo`, and attempts to simplify them out.</span>

<span class="sd">    The expression tree is traversed twice, and the following steps are</span>
<span class="sd">    performed on each expression node:</span>
<span class="sd">    - First traverse: </span>
<span class="sd">        Replace all `tan` with `sin/cos`.</span>
<span class="sd">    - Second traverse:</span>
<span class="sd">        If node is a fraction, check if the denominator evaluates to 0.</span>
<span class="sd">        If so, attempt to simplify it out. Then if node is in sub_dict,</span>
<span class="sd">        sub in the corresponding value."""</span>
    <span class="n">expr</span> <span class="o">=</span> <span class="n">crawl</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">tan_repl_func</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">smart_subs_func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's see if it works as expected. Using a simple test case:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [21]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">test</span> <span class="o">=</span> <span class="n">tan</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">sub_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">a</span><span class="p">:</span> <span class="n">pi</span><span class="o">/</span><span class="mi">2</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Without `smart_subs`:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"With `smart_subs`:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">smart_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Without `smart_subs`:
nan
With `smart_subs`:
1

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>And some timings:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [22]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">print</span><span class="p">(</span><span class="s">"Using `smart_subs`:"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">smart_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using simplification, then normal subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">simplify</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">sub_dict</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using trigsimp, then normal subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">trigsimp</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Using `smart_subs`:
10000 loops, best of 3: 92 µs per loop
Using simplification, then normal subs
10 loops, best of 3: 42.9 ms per loop
Using trigsimp, then normal subs
10 loops, best of 3: 30.8 ms per loop

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using selective simplification, the same results can be obtained for a fraction of the cost. 360 times faster for this small test.</p>
<p>Let's see what the overhead of <code>smart_subs</code> is for an expression that doesn't need it:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [23]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">test</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">+</span> <span class="n">a</span><span class="o">/</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span>
<span class="n">sub_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="k">print</span><span class="p">(</span><span class="s">"new_subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"smart_subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">smart_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using simplification, then normal subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">simplify</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">sub_dict</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using trigsimp, then normal subs"</span><span class="p">)</span>
<span class="o">%</span><span class="k">timeit</span> <span class="n">trigsimp</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>new_subs
1000 loops, best of 3: 222 µs per loop
smart_subs
1000 loops, best of 3: 2.34 ms per loop
Using simplification, then normal subs
1 loops, best of 3: 1.11 s per loop
Using trigsimp, then normal subs
1 loops, best of 3: 815 ms per loop

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So there's considerable overhead, which was expected. Still, it's much faster than using simplify first, and then running <code>subs</code>.</p>
<p>The best use method would be to first try it with <code>new_subs</code>, and if you get a <code>nan</code> or <code>oo</code>, then try using <code>smart_subs</code>. To aid in this, we can write a nice wrapper function <code>msubs</code> that contains both methods:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [24]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="k">def</span> <span class="nf">msubs</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">,</span> <span class="n">smart</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="sd">"""A custom subs for use on expressions derived in physics.mechanics.</span>

<span class="sd">    Traverses the expression tree once, performing the subs found in sub_dict.</span>
<span class="sd">    Terms inside `Derivative` expressions are ignored:</span>

<span class="sd">    &gt;&gt;&gt; x = dynamicsymbols('x')</span>
<span class="sd">    &gt;&gt;&gt; msubs(x.diff() + x, {x: 1})</span>
<span class="sd">    Derivative(x, t) + 1</span>

<span class="sd">    If smart=True, also checks for conditions that may result in `nan`, but</span>
<span class="sd">    if simplified would yield a valid expression. For example:</span>

<span class="sd">    &gt;&gt;&gt; (sin(a)/tan(a)).subs(a, 0)</span>
<span class="sd">    nan</span>
<span class="sd">    &gt;&gt;&gt; msubs(sin(a)/tan(a), {a: 0}, smart=True)</span>
<span class="sd">    1</span>

<span class="sd">    It does this by first replacing all `tan` with `sin/cos`. Then each node</span>
<span class="sd">    is traversed. If the node is a fraction, subs is first evaluated on the</span>
<span class="sd">    denominator. If this results in 0, simplification of the entire fraction</span>
<span class="sd">    is attempted. Using this selective simplification, only subexpressions</span>
<span class="sd">    that result in 1/0 are targeted, resulting in faster performance."""</span>

    <span class="k">if</span> <span class="n">smart</span><span class="p">:</span>
        <span class="n">func</span> <span class="o">=</span> <span class="n">smart_subs</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">func</span> <span class="o">=</span> <span class="n">new_subs</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Matrix</span><span class="p">):</span>
        <span class="c"># For matrices, func is applied to each element using `applyfunc`</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">applyfunc</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">func</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [25]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c">#Check that the results are the same:</span>
<span class="n">msubs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span> <span class="o">==</span> <span class="n">new_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
<span class="n">msubs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">,</span> <span class="n">smart</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">==</span> <span class="n">smart_subs</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">sub_dict</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[25]:</div>


<div class="output_text output_subarea output_pyout">
<pre>True
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This code has been included in my optimization branch, and is performing admirably against all the included tests (so much speed up!!!). The big test though is the bicycle example.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="the-big-test">The Big Test</h2>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>To really put this new code to the test I applied it to the <a href="http://docs.sympy.org/dev/modules/physics/mechanics/bicycle_example.html">bicycle example</a>, which has operation counts ranging from 400,000 to several million depending on which expression you're working with. How did it fair? Mixed results...</p>
<p>Using <code>msubs</code> with <code>smart=False</code> in the formation of the linearizer object resulted in a huge speed increase. Previously using <code>_subs_keep_derivs</code> there resulted in a run time of several hours. Now it runs in 14 seconds!</p>
<p>The second test is in the application of the operating point to the M, A, and B matrices. Previously evaluating these had resulted in <code>nan</code> and <code>oo</code>, and with operation counts exceeding 400,000 for M pre-simplification is out of the question. I tried using <code>msubs</code> with <code>smart=True</code> on this M, and let it run for 6 hours. It ended up consuming 98% of my RAM (4 GB worth), and it still wasn't done :( So for reasonable sized expressions the smart_subs we've implemented is acceptable, but it still doesn't work for the huge expressions. I'll have to keep working on optimizations to make this faster/reduce the initial expression size.</p>
<p>Still, all is not lost. Going from formulation to M, A, and B without the operating point substitution now only takes 20 minutes - down from the several hours before. This is actually faster than the previous linearize method, but unforunately results in expressions that evaluate to <code>nan</code>.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="future-work">Future Work</h2>
<p>Per my <a href="https://github.com/pydy/pydy/wiki/GSoC-2014-Application:-Jim-Crist-%28Linearization-Routines-for-Equations-of-Motion%29#timeline">original timeline</a> I was supposed to be working on "pre-linearization" routines for generating the equations of motion directly in linearized form. I think this will be dropped in favor of cleaning up and speeding up the existing codebase. There's some dead code that needs removing, and I have some other ideas for speed-ups that I'd like to try.</p>
<p>After that, I hope to get to the original part 3 of the project, which is adding support for matrices to the code-generation code. Not sure if this would live in sympy or pydy, but it would be extremely useful to myself and others. For now I plan on taking it week-by-week.</p>
<hr/>
<p><em>If you have thoughts on how to deal with the <code>nan</code> and <code>oo</code> issue, please let me know in the comments. Thanks!</em></p>
</div>
</div>
</div><p/></div>
    </summary>
    <updated>2014-07-06T22:25:00Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <category term="pydy"/>
    <category term="dynamics"/>
    <author>
      <name>Jim Crist</name>
    </author>
    <source>
      <id>http://jcrist.github.io/</id>
      <link href="http://jcrist.github.io/" rel="alternate" type="text/html"/>
      <link href="http://jcrist.github.io/feeds/gsoc.atom.xml" rel="self" type="application/atom+xml"/>
      <title>Marginally Stable</title>
      <updated>2014-07-18T20:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week6-7/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week6-7/" rel="alternate" type="text/html"/>
    <title>This Week in CSymPy: #6-#7</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 7 for GSoC just ended. I successfully cleared the mid-term review, thanks <a href="https://github.com/certik">@certik</a></p>

<h1 id="progress">Progress</h1>

<p>I started the week 6 by implementing refactoring the various instances of <code>subs</code> by adding a method <code>create</code> to construct classes with canonicalization. <a href="https://github.com/sympy/csympy/issues/210">#210</a> was the relevant issue which was raised. I opened <a href="https://github.com/sympy/csympy/pull/213">pull 213</a> to address this issue. This was a good addition as it reduced the line of codes by 117.</p>

<p><br/><br/>
After successfully resolving #210 I started working on the Complex Module. By the end of the sixth week, I had discussed with Ondrej regarding the basic structure for the Complex Class. We had decided to use the <code>mpq_class</code> itself for the real and the imaginary part, as opposed to creating an alternate real or complex part.
<br/><br/>
<a href="https://github.com/sympy/csympy/pull/223">Pull 223</a> implements the complex module. The class design structure could be found in the PR. 
<br/><br/>
In Week 7 I was travelling back from University to home, so I couldn’t contribute much code for a couple of days.
By the end of Week 7, I had managed to implement some part of the basic API.
All the virtual functions are yet to be implemented, so right now I’m not returning an object in <code>from_mpq</code>
<br/><br/>
I will speed up during the next week and hope to merge the Complex Module.</p>

<h1 id="week-highlights">Week Highlights!</h1>

<p>Somewhere around this period, I crossed 100 commits into CSymPy master. Its been a long journey since I first started contributing to CSymPy.</p>

<h1 id="the-week-ahead">The Week Ahead</h1>
<p>Complete the basic API for <code>Complex</code> Module and merge it into master.</p>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-07-05T13:45:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-283806077182880539.post-7888716637890298695</id>
    <link href="http://gsocblog.blogspot.com/feeds/7888716637890298695/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/this-week-was-unproductive-coding-wise.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/7888716637890298695" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/7888716637890298695" rel="self" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/07/this-week-was-unproductive-coding-wise.html" rel="alternate" type="text/html"/>
    <title/>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">This week was unproductive coding-wise. I spent most of the time designing and writing pseudo-code.<br/><br/>For the Formal Power Series part of my project, last week I implemented the algorithm to find general term for series expansion of a function. Also various operations on series like addition, multiplication, composition were implemented.<br/>I store the coefficients of series in a Stream class which works on lazy evaluation scheme.<br/><br/>However the Stream class currently is not a very generic one. It can only be used to represent series expansion of a function with parameters like "x", "general_term" and methods for series arithmetics.<br/><br/>To make it more generic, I'll make the Stream class act only as a container to store elements (infinitely many in lazy scheme).<br/>To represent infinite series, there will be another class - Lazyseries. It will store its coefficients using the Stream class and will contain the methods for series arithmetics.<br/>This way, the stream class can also be used to store other infinite structures. E.g.:- Fibonacci series can be represented in the following way using "Stream"<br/><br/><pre style=""><code style="color: black;"> def fib(x, y):  <br/>   head = (x, y)  <br/>   tail = lambda: fib(y, x+y)  <br/>   return Stream(head, tail)  <br/></code></pre><br/><br/>But I'm a bit unsure if this is the best way for lazy evaluation. Currently I store the first element and the rest of the elements as a lambda function. Lambda function delays the evaluation of the tail. I don't know if this is the most efficient method in terms of memory and speed.<br/><br/>As an example:- Multiplication of two series is defined as:-<br/>head = head1 * head2<br/>tail = head1 * tail2 + head2 * tail1 + tail1 * tail2<br/>Now when tail is evaluated continuously, many stream objects are created in the memory resulting in memory overflow. I'm working on this.</div></div>
    </content>
    <updated>2014-07-05T08:53:52Z</updated>
    <published>2014-07-05T08:53:00Z</published>
    <author>
      <name>Avichal Dayal</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/107026571968093758973</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-283806077182880539</id>
      <author>
        <name>Avichal Dayal</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://gsocblog.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/283806077182880539/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://gsocblog.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>GSoC 2014 with SymPy</title>
      <updated>2014-07-23T14:29:48Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://tarzzz.github.io/gsoc14/post-mid-terms.html</id>
    <link href="http://tarzzz.github.io/gsoc14/post-mid-terms.html" rel="alternate" type="text/html"/>
    <title>GSoC 14: Midterm Evaluations have ended!</title>
    <summary>{% include JB/setup %}


[ &lt;-Back to posts ](/gsoc14)

It has been a week after the midterm evaluations are over, and I am back to work
after a small break(with permission from my mentor, off course!).
I have been working on writing a test suite for the Dynamics Visualizer. This
is the wrapping up part of the visualizer for this gsoc.

[Here](/blog/visualization/index.html?load=samples/scene_desc.json) is a visualization 
of a rolling disc(it is slightly buggy though), that i prepared.

To view the animation, allow the visualization to load in the webpage(it shall load
automatically), and then hit the `Play Animation` button.


After writing some tests for visualizer, I am going to start fleshing out API
for the module, to provide IPython support to the visualizer. The main aim of
writing this module is to make visualizer interactive, in the sense, that a user 
should be able to change all the variables from the GUI(which is rendered
inside notebook's output cell) and then rerun the simulations without having to 
write any code, or execute any of the code manually. The data of the new simulations
will be automatically fed into visualizer, and then it can be viewed as an animation.

This whole workflow will be very convenient for the existing PyDy users, as well as
the new ones. It will be particularly convenient for those who want to just play around
with the existing systems, by changing the system variables, and view how it affects
the resulting animations.

With the development of this module, as well as ongoing improvements in the other PyDy
modules(by my fellow GSoC'ers from PyDy), we should be able to perform lightening fast
simulations for a system, as well as view them on a canvas. 

I will keep posting the new work I will be doing, with better details(once I actually start
implementing new stuff!).

[ &lt;-Back to posts ](/gsoc14)</summary>
    <updated>2014-07-04T17:40:37Z</updated>
    <source>
      <id>http://tarzzz.github.io/gsoc14</id>
      <author>
        <name>Tarun Gaba</name>
      </author>
      <link href="http://tarzzz.github.io/gsoc14" rel="alternate" type="text/html"/>
      <link href="http://tarzzz.github.io/rss.gsoc.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts categorized under GSoC</subtitle>
      <title>Tarun Gaba's blog - GSoC</title>
      <updated>2014-07-29T15:40:38Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=91</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-6/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 6</title>
    <summary>Welcome back everyone, This week I set about to fix one of my long pending PR associated with Propositional Logic. Following that I worked on conversion to Prenex Normal Form and Skolem Normal Form....</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Welcome back everyone,</p>
<p>This week I set about to fix one of my long pending PR associated with Propositional Logic. Following that I worked on conversion to Prenex Normal Form and Skolem Normal Form. Firstly, let me talk about the PR associated with Propositional Logic. It basically involved adding small functions like validity, entailment and some small modifications to the Propositional Knowledge Base. I assume most of the readers would be familiar with the concept of <a href="http://en.wikipedia.org/wiki/Validity" target="_blank" title="Validity">validity</a> and <a href="http://en.wikipedia.org/wiki/Logical_consequence" target="_blank" title="Entailment">entailment</a> but I will briefly mention the algorithm to compute this and the intuition behind the same. Validity is given by <code>not satisfiable(Not(expr))&lt;/expr&gt;</code>. Why does this work? If an expr is valid then it is True under all interpretations. Therefore <code>Not(expr)</code> is always False i.e. it cannot be satisfied by any model. Hence if the negation of the expr is unsatisfiable then the original formula is valid. Moving on to entailment, the conventional definition stands that a set of formulas formula_set entails a formula expr iff expr is True whenever formula_set is True. That basically boils down to <code>And(*formula_set) &gt;&gt; expr</code>. However there is another method, to accomplish the same, namely <code>not satisfiable(And(~expr, *formula_set))</code>. Ok, firstly why does this non-intuitive expression even work? Well whenever formula set is True, expr must be True (for the entailment to hold) hence ~expr must be False thereby making the entire conjunction False. If the formula_set is False then the conjunction is clearly False. So if the entailment is to hold then the conjunction must be unsatisfiable, which is exactly what was implied earlier. Let us look at one special case before moving on. What if the formula_set is empty. While the solution is a matter of convention to a good extent, SymPy uses ideas from the second formula to resolve the ambiguity which yields <code>not satisfiable(And(~expr))</code> which is exactly the same as validity of expr. Theoretically entailment means “Given <em>this</em> what can we infer”. So, given nothing we can only infer that, which is always the truth. Except for these changes I also made changes to PropKB which is probably best not discussed at the moment.</p>
<p>Coming now to the major interest of the post. The major time was spent in the functionality for conversion to <a href="http://en.wikipedia.org/wiki/Prenex_normal_form" target="_blank" title="PNF">Prenex Normal Form</a> and <a href="http://en.wikipedia.org/wiki/Skolem_normal_form" target="_blank" title="SNF">Skolem Normal Form</a>. Without going into a lot of details let me introduce these to you. A formula in PNF consists of a sequence of Quantifiers (containing both Universal and Existential quantifiers) followed by a Quatifier-less expression. The series of Quantifiers is called a <em>prefix</em> while the expression is called the matrix. Now, every formula in FOL can be converted to an <em>equivalent</em> formula in PNF. The matrix can be compared to a formula in propositional logic (if we think of the predicates as literals of PL) and most of the operations of PL become relevant. However we cannot completely ignore the prefix and hence we try to perform some operations such that we can look at the matrix without any regard to the prefix. This brings us to the Skolem Normal Form. A formula is converted to SNF by first converting it to PNF then dropping the Existential quantifiers (according to some rule). Now the prefix contains only Universal quantifiers, which are assumed to be implicitly implied and hence simply ignored while looking at the matrix. I will be updating the various rules for conversion and examples soon. Till then stay tuned.</p>
<p>Arrivederci</p></div>
    </content>
    <updated>2014-07-03T18:13:06Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:02Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-6.html</id>
    <link href="https://hargup.github.io/posts/week-6.html" rel="alternate" type="text/html"/>
    <title>week 6</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h3>Solving Trigonometric Function (part II)</h3>
<p>There is another technique to solve trigonometric function. Just as every
trigonometric function can be written in term of \( \tan \) it can also be written
in terms of \( \exp \).</p>
<p>$$ sin(x) = - \frac{i}{2} \left(e^{i x} - e^{- i x}\right) $$
$$ cos(x) = \frac{e^{i x}}{2} + \frac{1}{2} e^{- i x} $$
$$ tan(x) = \frac{i \left(- e^{i x} + e^{- i x}\right)}{e^{i x} + e^{- i x}} $$
$$ cot(x) = \frac{i \left(e^{i x} + e^{- i x}\right)}{e^{i x} - e^{- i x}} $$</p>
<p>So, solving a trigonometric equation is equivalent to solving a rational
function in \( \exp \). Note: here the \( \exp \) is in complex domain and
equation \( exp(x) = y \) has solution
\( \left\{i \left(2 \pi n + \arg{\left (y \right )}\right) + \log{\left (\left\lvert{y}\right\rvert \right )}\; |\; n \in \mathbb{Z}\right\} \)
when solved for \( x \).</p></div>
    </summary>
    <updated>2014-07-02T08:43:01Z</updated>
    <category term="mathjax"/>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-3401083357494053543</id>
    <link href="http://blog.sudhanshumishra.in/feeds/3401083357494053543/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-week-6.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/3401083357494053543" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/3401083357494053543" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/07/gsoc14-progress-week-6.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 progress: Week 6</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">It was a busy week though I managed to do some work.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I've been working on following things:</div><ul style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;"><li style="">Integrating <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">TWave</code> with <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">refraction_angle</code>(<a href="https://github.com/sympy/sympy/pull/7626" style="color: blue;">7626</a>)</li><li style="">Interference class</li></ul><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Some blocking 3D geometry code got merged yesterday which gives me a lot of new things to work on. :-)</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I also tried to take a look on very old <a href="https://github.com/sympy/sympy/pull/1226" style="color: blue;">patch</a> for <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">gaussopt</code>.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">This week I wrote a script to update the development documentation when a PR gets merged into the master. This is up and running.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I passed mid term evaluation that took place last week and I would like to thank <a href="https://github.com/flacjacket" style="color: blue;">Sean</a>, <a href="https://github.com/certik" style="color: blue;">Ondrej</a>,<a href="https://github.com/asmeurer" style="color: blue;">Aaron</a> and <a href="https://github.com/smichr" style="color: blue;">Chris</a> for their constant support.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">That's all for now. <em style="">Cheers!</em></div></div></div>
    </content>
    <updated>2014-07-02T03:27:16Z</updated>
    <published>2014-07-02T03:27:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="physics"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-9069493126125199249</id>
    <link href="http://geekpy.blogspot.com/feeds/9069493126125199249/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc-week-6.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/9069493126125199249" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/9069493126125199249" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc-week-6.html" rel="alternate" type="text/html"/>
    <title>Gsoc Week-6</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Sorry for the late post ,had an issue with my data card . First of all I couldn't get my PR's (Line3D, Plane) merged as Stefan was busy, though I addressed all of his issues and hopefully it is time before they get merged.<br/><br/>I started working on the Hyperbola class, you can find the code <a href="https://github.com/akshayah3/sympy/blob/hyperbola/sympy/geometry/hyperbola.py">here</a>.<br/>This week I plan to continue the work on the Hyperbola class and hopefully will get my previous PR's merged.<br/><br/>Until then cheers! </div></div>
    </content>
    <updated>2014-07-01T04:22:20Z</updated>
    <published>2014-07-01T04:22:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kundankumar185.wordpress.com/?p=102</id>
    <link href="http://kundankumar185.wordpress.com/2014/06/29/102/" rel="alternate" type="text/html"/>
    <title>GSoC Week 6: Docs of system of ODEs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week has been hell of a week of work and enjoyment with marriage preparation of my cousin. This lead to very less progress in my project work. I was unable to do much with just completion of docs of all implemented methods of system of ODEs. The non-linear system of ODEs which was left…<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=102&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week has been hell of a week of work and enjoyment with marriage preparation of my cousin. This lead to very less progress in my project work. I was unable to do much with just completion of docs of all implemented methods of system of ODEs. The non-linear system of ODEs which was left on last week has not been much progressed since then.</p>
<p>I have confusion too on representation of few things which I posted on <a href="https://groups.google.com/forum/#!topic/sympy/LjAIJVt_FyA">mailing list</a>. I need community opinion on these things before I proceed on these facts. This will be all for this week. Rest I intend to implement non-linear system of first order for 3 equations during next week.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/102/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/102/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=102&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-29T16:52:34Z</updated>
    <category term="GSoC"/>
    <author>
      <name>Kundan</name>
    </author>
    <source>
      <id>http://kundankumar185.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://kundankumar185.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://kundankumar185.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://kundankumar185.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://kundankumar185.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>my experiments with life</title>
      <updated>2014-07-29T19:20:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://codesachin.wordpress.com/?p=19</id>
    <link href="http://codesachin.wordpress.com/2014/06/29/gsoc-week-6-completing-coordinate-systems/" rel="alternate" type="text/html"/>
    <title>GSoC Week 6: Completing coordinate systems</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Phew. This was a busy week. Initially, the plan was to push a WIP PR (without tests maybe) with the code for coordinate systems and point classes. Midway through the week, Jason and I decided to push this new code to the first PR itself, and merge the entire fundamental framework together – in a […]<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=19&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Phew. This was a busy week. Initially, the plan was to push a WIP PR (without tests maybe) with the code for coordinate systems and point classes. Midway through the week, Jason and I decided to push this new code to the first PR itself, and merge the entire fundamental framework together – in a single PR. Initially I did get a little worked up looking at the amount of work that needed to be done.</p>
<p>However, things moved much faster than expected – though with a lot of issues along the way. There were problems with the args for CoordSysRect, then some issues with the Tree-algorithm for inter-point distance calculation, and then some more with the code that implements orientation of systems wrt each other…you get the drift. But the code is finally done and polished, along with the unit tests and doctests. Thats why the late post this week – I ‘bravely’ decided to get the code fully working, without glitches, and then only do the blogpost for the week. Thankfully, the plan was a success <span class="wp-smiley emoji emoji-bigsmile" title=":-D">:-D</span>.</p>
<p>Some minor things still remain, like renaming of some attributes to follow conventions  – mostly cosmetic changes, nothing that will affect how the code works.</p>
<p>The next immediate steps now would be -</p>
<p>1. Finish off the PR and get it merged.</p>
<p>2. Study caching mechanisms and implement them in a new ‘patch’ PR.</p>
<p>The first PR is <a href="https://github.com/sympy/sympy/pull/7566">here</a>.</p>
<p>See you later then, next week <span class="wp-smiley emoji emoji-smile" title=":-)">:-)</span>.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/19/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/19/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=19&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-29T11:28:14Z</updated>
    <category term="Google Summer of Code 2014"/>
    <author>
      <name>srjoglekar246</name>
    </author>
    <source>
      <id>http://codesachin.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://codesachin.wordpress.com/category/google-summer-of-code-2014/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://codesachin.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://codesachin.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>- Blog by Sachin Joglekar</subtitle>
      <title>Dream. Think. Code. » Google Summer of Code 2014</title>
      <updated>2014-07-29T19:20:41Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-283806077182880539.post-1947632693391126346</id>
    <link href="http://gsocblog.blogspot.com/feeds/1947632693391126346/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/06/a-bit-late-for-this-weeks-blog.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/1947632693391126346" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/1947632693391126346" rel="self" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/06/a-bit-late-for-this-weeks-blog.html" rel="alternate" type="text/html"/>
    <title/>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">&lt;script src="http://latex.codecogs.com/latexit.php?p&amp;amp;li&amp;amp;div" type="text/javascript"&gt;&lt;/script&gt;  <br/><div dir="ltr" style="text-align: left;">A bit late for this week's blog.<br/><br/>Implementing the solveRE() method took longer than I expected. I spent most of this week doing that. This method solves recurrence equation to get the general term for series expansion of a function.<br/>rsolve() can solve some equations but not recurrences of hypergeometric type.<br/><br/>Hypergeometric recurrence equation is of type:-<br/>Q(k) * r(k + m) = P(k) * r(k)<br/>where P(k) and Q(k) are rational functions in k.<br/><br/>For the case when m = 1, there exists a simple formula to get r(k).<br/>When m &gt; 1, we can represent it as sum of m-shifted m-fold symmetric functions.<br/>For e.g.:- Let the RE be,<br/>r(k + m) = R(k) . r(k)<br/>We replace k with mk and r(mk) with c(k) we get,<br/>r(m(k+1)) = R(mk) . r(mk) which is equivalent to<br/>c(k+1) = R(mk) . c(k)<br/>Now we can use the same formula for the case when m = 1.<br/><br/>Similarly by replacing m with km + 1, km + 2 ...., we can solve for r(k) as sum of m-shifted m-fold symmetric functions.<br/><br/>Here are some results:-<br/><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-_dcemQVhEMw/U65p6UK-xvI/AAAAAAAAAc8/ustuXJs0CKs/s1600/FPS-1.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="223" src="http://2.bp.blogspot.com/-_dcemQVhEMw/U65p6UK-xvI/AAAAAAAAAc8/ustuXJs0CKs/s1600/FPS-1.png" width="400"/></a></div><br/><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-QNwhi4R9cx8/U65p6KCONkI/AAAAAAAAAdA/Dfnsnqp7hek/s1600/FPS-2.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="223" src="http://2.bp.blogspot.com/-QNwhi4R9cx8/U65p6KCONkI/AAAAAAAAAdA/Dfnsnqp7hek/s1600/FPS-2.png" width="400"/></a></div><br/>The general terms are not in their simplest form. RisingFactorial must be re-written in terms of factorial to bring it to the usual form.<br/><br/>Now, I'm able to find FPS or infinite series for a wide range of functions. Next week, I'll take care of efficiency and making the code more in line with SymPy's style.<br/><br/></div></div></div>
    </content>
    <updated>2014-06-28T07:21:50Z</updated>
    <published>2014-06-28T07:21:00Z</published>
    <author>
      <name>Avichal Dayal</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/107026571968093758973</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-283806077182880539</id>
      <author>
        <name>Avichal Dayal</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://gsocblog.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/283806077182880539/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://gsocblog.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>GSoC 2014 with SymPy</title>
      <updated>2014-07-23T14:29:48Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2014-06-27:gsoc-week-6.html</id>
    <link href="http://jcrist.github.io/gsoc-week-6.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 6: Just the little things</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>I was rather busy with my research this week, so no time for a long-winded
post like <a href="http://jcrist.github.io/gsoc-week-1.html">some of my</a> 
<a href="http://jcrist.github.io/gsoc-week-4.html">previous</a> 
<a href="http://jcrist.github.io/gsoc-week-5.html">updates</a>. There's not
much interesting to say anyway. This week was mostly spent on little fixes to
get my current <a href="https://github.com/sympy/sympy/pull/7581">pull request</a> merged.</p>
<p>Topping the list of things that are better than they were last week is speed.
The profiling I did <a href="http://jcrist.github.io/gsoc-week-5.html">last week</a>
showed that the current function <code>sympy.physics.mechanics</code> uses to solve a
system of linear equations (<code>_mat_inv_mul</code>) is <em>sloooooooooow</em>. The underlying 
reason is because <code>subs</code> is slow - more on that later. I spent some time
swapping out all forms of solving ($A x = B$) for <code>LUsolve</code>, the clear winner
of last weeks benchmarks. This resulted in a 10x speedup of the formulation of
equations for the <a href="http://docs.sympy.org/dev/modules/ physics/mechanics/bicycle_example.html">bicycle model example</a>. </p>
<p>This bicycle example has become the bane of my existence for the last couple
weeks. It's a super slow test that I'd never actual gotten to run before. But
with the speed improvements made, it actual finishes in a reasonable time.
Except it still doesn't work. I'm able to run all the way up to</p>
<div class="codehilite" style="background: #272822;"><pre style="line-height: 125%;"><span style="color: #f8f8f2;">M,</span> <span style="color: #f8f8f2;">A,</span> <span style="color: #f8f8f2;">B</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">KM</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">linearize()</span>
</pre></div>


<p>But when I go to sub in values for symbols in these matrices, things get hairy.
There are two issues:</p>
<h3>Issue 1: Get <code>nan</code> when not simplified</h3>
<p><code>M.subs(val_dict)</code> results in <code>nan</code> and <code>oo</code> upon after <code>subs</code>. But doesn't
if it's simplified before the subs. An example of this behavior would be:</p>
<div class="codehilite" style="background: #272822;"><pre style="line-height: 125%;"><span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">sin(q1)</span><span style="color: #f92672;">/</span><span style="color: #f8f8f2;">tan(q1)</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">subs({q1:</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">}</span>
<span style="color: #f8f8f2;">nan</span>
</pre></div>


<p>Note that if this is simplified, this results in something completely different:</p>
<div class="codehilite" style="background: #272822;"><pre style="line-height: 125%;"><span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">sin(q1)</span><span style="color: #f92672;">/</span><span style="color: #f8f8f2;">tan(q1)</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">M</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">trigsimp()</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span>
<span style="color: #f8f8f2;">cos(q1)</span>
<span style="color: #f92672;">&gt;&gt;&gt;</span> <span style="color: #f8f8f2;">M</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">subs({q1:</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">})</span>
<span style="color: #ae81ff;">1</span>
</pre></div>


<p>However, for the bicycle case M has <em>over 19 thousand operations</em>. This doesn't
simplify quickly. Also, by default we don't simplify before <code>subs</code> in
<code>Linearizer</code> (you can opt in to simplify, but it's done right before the return,
so it won't affect the subbed result at all). Right now I'm looking through
ways to make the resulting expressions smaller after the formulation, as this 
will result in speedups for <em>all</em> operations. This could be extremely helpful
for issue 2...</p>
<h3>Issue 2: <code>subs</code> is slow</h3>
<p>because <code>A</code> has <em>over 38 million operations</em>!!! In this case <code>subs</code> doesn't even
return. Ever. I left it running on my computer for 4 hours and came back and it
was still whirring along, fans on high, eating up all my ram. No idea how to
solve this. One possible solution is <a href="https://github.com/sympy/csympy">csympy</a>,
a fast core written in C++. Once this matures, <code>subs</code>, <code>trigsimp</code>, and other
time consuming operations used heavily in <code>sympy.physics.mechanics</code> could rely
on the equivalent, faster, C++ versions. I filed an issue with an example
expression generated from the bicycle example (this one only had 147,841
operations, not nearly as bad). Hopefully Ondrej and the team can use this
as a benchmark problem to help improve <code>subs</code> in csympy.</p>
<p>If you have thoughts on how to overcome these issues, <strong>please let me know</strong>.
I'm kind of stumped right now.</p>
<h2>The Good News</h2>
<p>I didn't want to end this post on a bad note, so I'll close with the remainder
of the things I did last week that actually worked:</p>
<ol>
<li>
<p>Improved documentation! Docstrings that are worth reading, and a start on the
sphinx documentation.</p>
</li>
<li>
<p>Added a deprecation warning for <code>KanesMethod.linearize</code> to warn people about
the method change.</p>
</li>
<li>
<p>Major interface changes. Now all operating points are specified as a single
dictionary, or an iterable of dictionaries. This is to aid in consistency across
different system implementations. Referring to a dictionary as <code>u_op</code> in 
<code>LagrangesMethod</code> doesn't really make any sense, as Lagrange's method only uses
$q$, $\dot{q}$, and $\ddot{q}$. Also added a kwarg to make simplification of the
results optional.</p>
</li>
<li>
<p>Added a method to the <code>LagrangesMethod</code> class to calculate the value of the
multipliers at different points. This is useful for multiple reasons. The
multipliers have meaning, so knowing what the solution is symbolically is nice
for calculating the constraint forces. Also, when linearizing with Lagrange's
method, the multipliers have operating points as well, and these need to be
calculated based on the operating point for the other states ($q$, $\dot{q}$,
etc...). Now a user can go:</p>
<div class="codehilite" style="background: #272822;"><pre style="line-height: 125%;"><span style="color: #f8f8f2;">op_point</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">dict_or_iterable_of_dicts</span>
<span style="color: #f8f8f2;">lam_op</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">LM</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">solve_multipliers(op_point)</span>
<span style="color: #f8f8f2;">op_point</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">append(lam_op)</span>     <span style="color: #75715e;"># Or op_point.update if op_point is a dict, not a list of dicts</span>
<span style="color: #f8f8f2;">M,</span> <span style="color: #f8f8f2;">A,</span> <span style="color: #f8f8f2;">B</span> <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">LM</span><span style="color: #f92672;">.</span><span style="color: #f8f8f2;">linearize(q_ind</span><span style="color: #f92672;">=</span><span style="color: #f8f8f2;">q_ind,</span> <span style="color: #f8f8f2;">qd_ind</span><span style="color: #f92672;">=</span><span style="color: #f8f8f2;">qd_ind,</span> <span style="color: #f8f8f2;">op_point</span><span style="color: #f92672;">=</span><span style="color: #f8f8f2;">op_point)</span>
</pre></div>


</li>
</ol>
<p>Hopefully in the next week I can get my PR merged, so the Lagrange stuff can
finally be submitted.</p>&lt;script type="text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;</div>
    </summary>
    <updated>2014-06-28T02:21:00Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <category term="pydy"/>
    <category term="dynamics"/>
    <author>
      <name>Jim Crist</name>
    </author>
    <source>
      <id>http://jcrist.github.io/</id>
      <link href="http://jcrist.github.io/" rel="alternate" type="text/html"/>
      <link href="http://jcrist.github.io/feeds/gsoc.atom.xml" rel="self" type="application/atom+xml"/>
      <title>Marginally Stable</title>
      <updated>2014-07-18T20:00:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=360</id>
    <link href="http://thilinaatsympy.wordpress.com/2014/06/27/gsoc-week-6-cholesky-and-ldl-algorithms/" rel="alternate" type="text/html"/>
    <title>[GSoC] Week 6: Cholesky and LDL Algorithms</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week I implemented Cholesky decomposition and LDL decomposition. In addition to that I fixed two errors In CSymPy. I was also bale to finish work with LU decomposition and merge it to master. Also, I could solve the system using fraction free LU factorization. Cholesky Decomposition Cholesky decomposition can be applied to a Hermitian …<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=360&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week I implemented Cholesky decomposition and LDL decomposition. In addition to that I fixed two errors In CSymPy. I was also bale to finish work with LU decomposition and merge it to master. Also, I could solve the system <img alt="Ax = b" class="latex" src="http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="Ax = b"/> using fraction free <strong>LU</strong> factorization.</p>
<h2>Cholesky Decomposition</h2>
<p>Cholesky decomposition can be applied to a <strong>Hermitian positive definite matrix</strong>. <strong>Hermitian</strong> matrix is a matrix with complex entries that is equal to it’s conjugate transpose <strong>[1]</strong>. Hence a symmetric matrix with real entries can be considered as a <strong>Hermitian</strong> matrix and can be decomposed using <strong>Cholesky</strong> decomposition if it’s positive definite. A Symmetric matrix <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A"/> is positive definite if <img alt="z^TAz" class="latex" src="http://s0.wp.com/latex.php?latex=z%5ETAz&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z^TAz"/> is greater than zero for every non zero column matrix <img alt="z" class="latex" src="http://s0.wp.com/latex.php?latex=z&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="z"/><strong> [2]</strong>. If the above conditions are satisfied, Cholesky decomposition for a matrix <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A"/> can be written as <img alt="A = LL^*" class="latex" src="http://s0.wp.com/latex.php?latex=A+%3D+LL%5E%2A&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A = LL^*"/> where <img alt="L" class="latex" src="http://s0.wp.com/latex.php?latex=L&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="L"/> is an lower triangular Matrix. This is equal to <img alt="A = LL^T" class="latex" src="http://s0.wp.com/latex.php?latex=A+%3D+LL%5ET&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A = LL^T"/> when <img alt="L" class="latex" src="http://s0.wp.com/latex.php?latex=L&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="L"/> is a real matrix. This factorization can be used for fast solution of the system <img alt="Ax = b" class="latex" src="http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="Ax = b"/>. I am yet to use this decomposition in solving above mentioned system.</p>
<h2>LDL Factorization</h2>
<p>LDL decomposition is closely related to Cholesky decomposition. As the name implies, in LDL decomposition of a matrix <img alt="A" class="latex" src="http://s0.wp.com/latex.php?latex=A&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A"/> can be written as <img alt="A = LDL^*" class="latex" src="http://s0.wp.com/latex.php?latex=A+%3D+LDL%5E%2A&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="A = LDL^*"/> where <img alt="L" class="latex" src="http://s0.wp.com/latex.php?latex=L&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="L"/> is a lower triangular matrix and <img alt="D" class="latex" src="http://s0.wp.com/latex.php?latex=D&amp;bg=eff1f5&amp;fg=444444&amp;s=0" title="D"/> is a diagonal matrix <strong>[3]</strong>. This decomposition can be used for some matrices which don’t have a Cholesky decomposition.</p>
<h2>CSymPy printing error and simplification errror</h2>
<p>I also worked on a printing error of CSymPy and a simplification error in <strong>Mul</strong> class which is used to represent multiplication types in CSymPy. There is still some work to be done to fix simplification error completely. The most important thing was that we were able to introduce a fix which doesn’t create a considerable slow down in speed after being applied.</p>
<h2>References</h2>
<p>[1] Hermitian Matrix, Wikipedia Article: <a href="http://en.wikipedia.org/wiki/Hermitian_matrix" rel="nofollow">http://en.wikipedia.org/wiki/Hermitian_matrix</a></p>
<p>[2] Positive definite Matrix, Wikipedia Article: <a href="http://en.wikipedia.org/wiki/Positive-definite_matrix" rel="nofollow">http://en.wikipedia.org/wiki/Positive-definite_matrix</a></p>
<p>[3] LDL Decomposition, Wikipedia Article: <a href="http://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition" rel="nofollow">http://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition</a></p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/360/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/360/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=360&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-27T15:58:54Z</updated>
    <category term="GSoC-2014-CSymPy"/>
    <category term="Cholesky decomposition"/>
    <category term="CSymPy"/>
    <category term="LDL decomposition"/>
    <category term="Linear Algebra"/>
    <category term="SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-07-29T19:20:40Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-5.html</id>
    <link href="https://hargup.github.io/posts/week-5.html" rel="alternate" type="text/html"/>
    <title>week 5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h3>Solving Trigonometric Function (part I)</h3>
<p>This week I spend time on making trigonometric solvers work.
Every trigonometric function can be written in terms of tan.</p>
<p>$$ sin(x) = \frac{2*tan(x/2)}{tan^{2}(x/2)} $$</p>
<p>$$ cos(x) = \frac{-tan^{2}(x/2) + 1}{tan^{2}(x/2) + 1} $$</p>
<p>$$ cot(x) = \frac{1}{tan(x)} $$</p>
<p>A basic technique to solve trigonometric equations can be rewriting the equation in terms of tan.
And if the equation is made by addition, multiplication or quotient of
trigonometric functions then the transformed equation is a equivalent to a rational
function in tan. That equation can be solved by the usual polynomial
solving techniques.</p>
<p>Taking the example from the <a href="https://github.com/sympy/sympy/wiki/solvers">doc</a>
\( cos(x) + sin(x) \) gets converted to
\( \frac{-tan^{2}(x/2) + 2*tan(x/2) + 1}{tan^{2}(x/2) + 1} \)</p>
<p>The solution of this equations is \( tan(x/2) = 1 +- sqrt(2) \).
Since the inverse of tan is
\( \left\{2 \pi n + \operatorname{atan}{\left (y \right )}\; |\; n \in \mathbb{Z}\right\} \)
the solution of the given equation is
$$ \left\{2 \pi n - \frac{\pi}{8}\; |\; n \in \mathbb{Z}\right\} \cup \left\{2 \pi n + \frac{3 \pi}{8}\; |\; n \in \mathbb{Z}\right\} $$</p>
<p>Though it appears this technique should work universally for trigonometric
equation it fails for even \( sin(x) = 0 \). From the table above
\( sin(x) = \frac{2*tan(x/2)}{tan^{2}(x/2)} \)
So, the \( sin(x) = 0 \) occurs at \( tan(x/2) = 0 \) which has solution
\( \left\{2 \pi n\; |\; n \in \mathbb{Z}\right\} \)
But the solution is \( \left\{ \pi n\; |\; n \in \mathbb{Z}\right\} \)
. Why are we missing some solutions? The
reason is \( sin(x) = 0 \) also occurs when denominator tends to \( \infty \),
i.e.,
the values where \( tan^{2}(x/2) + 1 \) tends to \( \infty \).
We had encountered a similar problem for the solution of
$$ \frac{1}{\left(\frac{x}{x + 1} + 3\right)^{2}} $$</p>
<p>here \( x = -1 \) is not a point in the domain of the of the equation. The solver
simplifies the equation to</p>
<p>$$ \frac{\left(x + 1\right)^{2}}{\left(4 x + 3\right)^{2}} $$</p>
<p>which extends the domain to include the point \( x = -1 \) which is also the
solution to the transformed equation. There we wrote a sub procedure
<code>domain_check</code> to verify if the returned solution is part of the domain of the
original equation. The problem here is slightly different in the sense that
transforming the equation decreases the domain of the solutions and not increase
it.</p>
<p>To find such solution we have allow \( \infty \) to be solution to equations, we
will be working on extended reals instead of just reals.  I think this change
will simplify a lot of things.</p>
<p>Another thing which should be taken care off is that we cannot naively search
for the values for which the denominator tends to infinity as for the same
value numerator might also attain infinitely large value, we will have to
conceder the limiting value of the equation.</p>
</div>
    </summary>
    <updated>2014-06-26T11:43:01Z</updated>
    <category term="mathjax"/>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=86</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-5/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 5</title>
    <summary>Hello Folks, This week was probably not as productive as I would have liked it to be. Firstly, it seems like the algorithm for faster conversion to CNF/DNF I talked about before works fast...</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello Folks,</p>
<p>This week was probably not as productive as I would have liked it to be. Firstly, it seems like the algorithm for faster conversion to CNF/DNF I talked about <a href="http://blog.s-d-b.com/gsoc-2014-week-1-and-2/" target="_blank" title="Faster_NF">before</a> works fast conditionally. If a particular formula is already quite near to a particular normal form, then the conversion takes a longer time than the recursive algorithm. The overhead incurred for the conversion in this case starts to dominate the actual conversion. So, I am now parallelly working on fixing this problem and the FOL module (as scheduled). Hence, I majorly managed to do only 2 things this week namely Interpretation and conversion to Prenex Normal Form.</p>
<p><strong>Interpretation</strong><br/>
Akin to <code>pl_true(expr, model)</code> present in the propositional logic module, I have implemented a <code>fol_true(expr, model)</code> for the FOL module. Before jumping into the concept of interpretation for First Order Logic, let us see what it means for Propositional Logic. If you are already familiar with the same, feel free to jump to the next paragraph. Now, the interpretation of an expression is the value of expression under an assignment. So given the formula <code>A | B</code> such that <code>{A: True, B: False}</code> the formula is True. So, this is essentially the evaluated <em>result</em> of a formula given an assignment. This is quite similar to <code>a + b &gt; 0</code> which has no value inherently, but if a = 1 and b = 0, then the expression has a value (True). In some cases only a partial assignment is sufficient to determine the value of the expr. For e.g. <code>A &amp; B</code> with <code>A = False</code> is clearly False without any regard for the value of B.</p>
<p>In Propositional Logic, the most basic elements are symbols which can have one of True or False as its value. FOL on the other hand has many elements which can take on any value in the domain. While the concept of interpretation remains the same there, the number of things to be evaluated change. Interpretation in FOL is a rather complex job which will become quite apparent very soon. Let us set about to find the value of each of the basic elements.</p>
<ul>
<li>Constants are the easiest to evaluate, well because they stand for themselves.</li>
<li>Variables are similar to variables in any mathematical expression and it is sufficient to simply give them a value. However, one may also give a variable a domain. This domain is the set of all values that the corresponding variable may assume.</li>
<li>Next come the functions. For functions, one needs to provide a mapping of every possible set of arguments to its corresponding value. For e.g. for <code>f(X, Y)</code> such that <code>X = {1, 2, 3}</code> and <code>Y = {10, 20, 30}</code>, one needs to provide a value for every feasible possible combination of X and Y.</li>
<li>Predicates are almost the same as functions with the exception that the values they yield must be boolean. The examples below will probably make things much clearer.</li>
</ul>
<p>Let’s look at an example that will give better perspective to the idea of Interpretation.</p>
<p/><pre class="crayon-plain-tag">&gt;&gt;&gt; from sympy.abc import X, T
&gt;&gt;&gt; from sympy.logic.FOL import Predicate, ForAll, Exists, fol_true
&gt;&gt;&gt; Person = Predicate('Person')
&gt;&gt;&gt; Time = Predicate('Time')
&gt;&gt;&gt; CanFool = Predicate('CanFool')
&gt;&gt;&gt; X_domain = ['John', 'Jack']
&gt;&gt;&gt; T_domain = [1, 2, 3]
&gt;&gt;&gt; def person(X): return X in X_domain
&gt;&gt;&gt; def time(T): return T in T_domain
&gt;&gt;&gt; CanFoolMap = {('John',2):False, ('John',3):False, 'default':True}
&gt;&gt;&gt; model = {X:X_domain, T:T_domain, Person:person, Time:time, CanFool:CanFoolMap}

# You can fool some of the people all of the time
&gt;&gt;&gt; expr = Exists(X, ForAll(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
&gt;&gt;&gt; fol_true(expr, model)
True

# You can fool all of the people some of the time
&gt;&gt;&gt; expr = ForAll(X, Exists(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
&gt;&gt;&gt; fol_true(expr, model)
True

# You can fool all of the people all of the time
&gt;&gt;&gt; expr = ForAll(X, ForAll(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
&gt;&gt;&gt; fol_true(expr, model)
False</pre><p> </p>
<p>I hope that makes the idea of interpreation in general and how to use them in SymPy a little clearer. I will update the post giving more examples soon.</p>
<p>Adios!!!</p></div>
    </content>
    <updated>2014-06-25T20:44:05Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:01Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week5/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week5/" rel="alternate" type="text/html"/>
    <title>This Week in CSymPy: #5</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 5 for GSoC just ended and this week I completed implementing the Exponential Module.</p>

<h1 id="progress">Progress</h1>

<p>I started the week by implementing <code>LambertW</code> function. It wasn’t a part of the original proposal but it is a nice addition to have so I implemented it.
<br/><br/>
If you’re unaware, LambertW function is defined as the inverse function of x*exp(x). This function represents the principal branch  of this inverse function, which is multivalued. For more information, see:
<a href="http://en.wikipedia.org/wiki/Lambert_W_function">wiki</a>. <a href="https://github.com/sympy/csympy/pull/200">Pull 200</a> implemented the LambertW class!
<br/><br/>
After this, I worked on Hyperbolic module, which was the main target for this week. <a href="https://github.com/sympy/csympy/pull/203">Pull 203</a> implemented the hyperbolic module. 
In addition to the normal functions which were implemented as a part of the TrigFunction API, we implemented <code>expand_as_exp</code> in the Hyperbolic Module.
<br/><br/>
With this in place, we can now do things like <code>sinh(x)-&gt;expand_as_exp()</code> and it will return the exponential form: <code>(e^x - e^{-x})/2</code> using a combination of exp, adds and divs!
<br/><br/>
Follow up to this PR we have openened a couple of issues:</p>

<ul>
  <li>
    <p><a href="https://github.com/sympy/csympy/issues/207">#207</a> is a bug which I encountered while writing test cases. Essentially same symbolic expressions written in form of add and mul are not equated as equal.
This is a crucial issue and we are yet to see how to proceed further on this. SymPy also faced the same issue <a href="https://github.com/sympy/sympy/issues/4596">sympy/sympy#4596</a> where it was decided to remove
such automatic redistribution. As <a href="https://github.com/certik">@certik</a> suggested, it is perhaps the best to compare underneath via expand.</p>
  </li>
  <li>
    <p><a href="https://github.com/sympy/csympy/issues/210">#210</a> is basically a more generic way to cleanup the existing Trignometric and Hyperbolic Module. This for instance can be used to define the <code>subs</code> method in the base class rather than writing almost the same code in each subsequent inherited class.
The only reason why this was being defined in all the classes was that we needed to access the method to create the class via canonicalization. I’ve proposed a couple of methods in which we can approach the problem.
Once decided we can fix this issue.</p>
  </li>
</ul>

<h1 id="discussions">Discussions</h1>

<p>As usual most of the actual discussions happened on PR, we were supposed to have a meetup on gitter but it was postponed.</p>

<h1 id="week-highlights">Week Highlights!</h1>

<ul>
  <li>CSymPy just crossed the 1000 commits mark! Yay! It is <a href="https://github.com/sympy/csympy">1036</a> at the time of writing.</li>
  <li>The issue serial number has crossed the 200 mark!</li>
</ul>

<p>Quite an interesting week this has been as far as milestones are concerned!</p>

<h1 id="the-week-ahead">The Week Ahead</h1>
<ul>
  <li>Implement the long awaited <code>Complex</code> Module.</li>
</ul>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-06-24T13:45:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-384394288691782141</id>
    <link href="http://geekpy.blogspot.com/feeds/384394288691782141/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc14-week-5.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/384394288691782141" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/384394288691782141" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc14-week-5.html" rel="alternate" type="text/html"/>
    <title>Gsoc14 Week-5</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">I did some good amount of work this week. I finished the implementation of the Plane class. <a href="https://www.google.com/url?q=https%3A%2F%2Fgithub.com%2Fakshayah3%2Fsympy%2Fcommit%2F41f85a70d70d3654786f68257116fa14df3b2825&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFKv7zI5GEVuPOZoRrZLVvy_uckVQ">Here</a> is the link to the code. I haven't sent a PR though as I am waiting for the merging of the Line3D class, which will happen soon enough as it had a few styling issues which I happen to fix in the latest commit.<br/><br/>Here is the implementation of the interaction between 2D and 3D entities with the use of Planes.<br/><br/>&gt;&gt;&gt; a = Point(1, 2)<br/>&gt;&gt;&gt; b = Point3D(1, 3, 5)<br/>&gt;&gt;&gt; c = Plane(Point3D(x, y, z), normal_vector=[0, 0 ,1]) # Parallel to xy plane<br/>&gt;&gt;&gt; d = c.projection(c) # A 3D point<br/>&gt;&gt;&gt; d<br/>Point3D(1, 2, 0)<br/>&gt;&gt;&gt; d.distance(b)<br/>sqrt(26)<br/><br/>Here are the things that I have implemented till now<br/><ul style="text-align: left;"><li>Point3D</li><li>Line3D</li><li>Ray3D</li><li>Segment3D</li><li>Plane</li></ul>Among these only Point3D class has been merged but I will get most of the other classes merged this week, so that would complete the implementation of 3D Geometry as a whole.So I will spend most of this week trying to get these PR's merged.<br/><br/>Until then cheers! </div></div>
    </content>
    <updated>2014-06-24T04:16:26Z</updated>
    <published>2014-06-24T04:16:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-8191047412644166823</id>
    <link href="http://blog.sudhanshumishra.in/feeds/8191047412644166823/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/06/gsoc14-progress-week-5.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/8191047412644166823" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/8191047412644166823" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/06/gsoc14-progress-week-5.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 progress, Week 5</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I did good amount of work this week. I sent a small part of it related to ray tracing for review.</div><ul style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;"><li style=""><a href="https://github.com/sympy/sympy/pull/7626" style="color: blue;">https://github.com/sympy/sympy/pull/7626</a></li></ul><div style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I got some great suggestions from Sean to make it compatible directly with<span style="color: #444444;"> </span><code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">TWave</code><span style="color: #444444;"> </span>class. It is a WIP as I'm waiting for few 3D geometry classes. I'm also working on inteference of light waves and I hope that I'll send it for review in next couple of days. My last PR on medium is still unmerged and I really need it to be in master to work on more implementations.</div><div style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I'm also trying to move<span style="color: #444444;"> </span><code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">physics/gaussopt</code><span style="color: #444444;"> </span>to<span style="color: #444444;"> </span><code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">physics/optics/gaussopt</code><span style="color: #444444;"> </span>as it'll be good to keep things related to optics at the same place. I'm waiting for opinion of the community about it. Here's the link to that PR:</div><ul style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;"><li style=""><a href="https://github.com/sympy/sympy/pull/7607" style="color: blue;">https://github.com/sympy/sympy/pull/7607</a></li></ul><div style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Here is some other minor work that I've done this week outside of optics:</div><ul style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;"><li style=""><a href="https://github.com/sympy/sympy/pull/7609" style="color: blue;">https://github.com/sympy/sympy/pull/7609</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7610" style="color: blue;">https://github.com/sympy/sympy/pull/7610</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7612" style="color: blue;">https://github.com/sympy/sympy/pull/7612</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7614" style="color: blue;">https://github.com/sympy/sympy/pull/7614</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7627" style="color: blue;">https://github.com/sympy/sympy/pull/7627</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7628" style="color: blue;">https://github.com/sympy/sympy/pull/7628</a></li><li style="color: #444444;"><a href="https://github.com/sympy/sympy/pull/7629" style="color: blue;">https://github.com/sympy/sympy/pull/7629</a></li></ul><div style="font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">That's all for now. <em style="">Cheers!</em></div></div></div>
    </content>
    <updated>2014-06-23T17:59:19Z</updated>
    <published>2014-06-23T17:59:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="physics"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://tarzzz.github.io/gsoc14/second-week.html</id>
    <link href="http://tarzzz.github.io/gsoc14/second-week.html" rel="alternate" type="text/html"/>
    <title>GSoC 14: Second Week!</title>
    <summary>{% include JB/setup %}


[ &lt;-Back to posts ](/gsoc14)

Second week of GSoC '14 has ended. It has been a very hectic week. A good part of my time was spent in studying 
and tweaking the MGView code(whose fork we had decided to work on). The new _generic-visualizer_ has to be compatible 
with both PyDy as well as MG(MotionGenesis), so great care is being taken to maintain the backwards compatibility
of the package, as well to add the support for PyDy visualization data. I have also worked on Python side, to 
modify the JSON data generated for the visualizations(from PyDy side).


###Accomplishments:

There have been three major accomplishments this week:

  - **Studying MGView code:** This has to be the most time consuming part! I had to go over a module spanning
    multiple files to study the workflow, and how each methods are linked together. Some conversations with
    Adam Leeper(who wrote the original package) have been very useful in this regard.

  - **Modifying JSON generated from PyDy:** Certain modifications have been done on the JSON generated from the
    PyDy backend, so that they are compatible with MotionView. A major change is that the generated JSON data
    is split over two files, one `scene_desc.json` shall contain all the parameters required to create a static
    scene, and another file `simulation_data.json` which shall contain all the simulation data(in the form of 
    4x4 matrices). It would be very helpful in un-cluttering the data. The API changes in Python side are totally
    backward compatible, which means no previous code shall break once these changes are merged.

  - **Tweaking MGView code:** I have started working on MGView code, to provide the support for PyDy generated
    JSON data. This part will span the coming weeks too.


###Objectives:

The objectives of the upcoming week are to be able to produce some visualizations on the frontend side. 
For that I will need to tweak into the MGView code to allow support for PyDy JSONs.


###Issues:

The main issues I am facing is the inhomogenities in the output produced by PyDy and MG. Since the visualizer
(MOtionView) must be able to visualize data generated from both of these packages, without any bias it has to be 
designed like so. Since It is already built to specifically visualize data generated from MotionGenesis software,
There are certain parts of code which need to be totally rewritten, and it has to be done without breaking the
workflow of the visualizer. So it can get somewhat messy to do so. I am working on to find a clean way to do so.

The upcoming two weeks are somewhat crucial to the project timeline. I have to work really hard in the coming weeks to
keep up with my deliverables before the midterm evaluations. I think I shall get back to coding now! :)




[ &lt;-Back to posts ](/gsoc14)</summary>
    <updated>2014-06-22T19:00:40Z</updated>
    <source>
      <id>http://tarzzz.github.io/gsoc14</id>
      <author>
        <name>Tarun Gaba</name>
      </author>
      <link href="http://tarzzz.github.io/gsoc14" rel="alternate" type="text/html"/>
      <link href="http://tarzzz.github.io/rss.gsoc.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts categorized under GSoC</subtitle>
      <title>Tarun Gaba's blog - GSoC</title>
      <updated>2014-06-27T19:20:40Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://kundankumar185.wordpress.com/?p=100</id>
    <link href="http://kundankumar185.wordpress.com/2014/06/22/gsoc-week-5-non-linear-system-of-odes/" rel="alternate" type="text/html"/>
    <title>GSoC Week 5: Non-linear system of ODEs</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Considering the 5th week has passed, PR for linear system of 3 equations of first order still remains to be merged. Also, PR for non-linear system of ODEs for 2 equations of first order is on the way. The non-linear system of ODEs which I have included are these - &gt;x’ = x**n*F(x, y)  …<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=100&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Considering the 5th week has passed, <a href="https://github.com/sympy/sympy/pull/7611">PR</a> for linear system of 3 equations of first order still remains to be merged. Also, <a href="https://github.com/sympy/sympy/pull/7616">PR</a> for non-linear system of ODEs for 2 equations of first order is on the way. The non-linear system of ODEs which I have included are these -</p>
<p>&gt;<span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">x’ = x**n*F(x, y)</span></span></p>
<p><span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">   y’ = g(y)*F(x, y)</span></span></p>
<p>&gt;<span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">x’ = exp(λx)*F(x, y)</span></span></p>
<p><span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">   y’ = g(y)*F(x, y)</span></span></p>
<p>&gt;<span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">x’ = F(x, y)</span></span></p>
<p><span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">   y’ = G(x, y)</span></span></p>
<p>&gt;<span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">x’ = f1(x)*g1(y)*Φ(x, y, t)</span></span></p>
<p><span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">   y’ = f2(x)*g2(y)*Φ(x, y, t)</span></span></p>
<p>&gt;<span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">x = t*x’ + F(x’, y’)</span></span></p>
<p><span style="color: #000000; font-size: small;"><span style="font-family: Arial, sans-serif;">   y = t*y’ + G(x’, y’)</span></span></p>
<p>Though the representation of output of these equation are due, because of `Eq` representation not working with a list. So the representation of test cases is not complete.</p>
<p>There are some equations which may be of above format but is not solvable due to problem of dsolve with certain single equation ODEs, whose solutions, being entwined in terms of function and variable, are inseparable. This is also due to inefficiency of `solve` function that `solve` is not able seperate function and variable in a solution returned by dsolve.</p>
<p>This week’s I spent a lot of time correcting conflicts in git rebase which created a lot of mess. I tried to solve those but wasn’t very succesful so I deleted the previous branches and created new one.</p>
<p>This week I intend to complete the documentation part which I have left for implemented differential equations and complete the system of non-linear ODEs for 1st order.</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/100/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/100/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=kundankumar185.wordpress.com&amp;blog=68025302&amp;post=100&amp;subd=kundankumar185&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-22T10:28:36Z</updated>
    <category term="GSoC"/>
    <category term="ODEs"/>
    <author>
      <name>Kundan</name>
    </author>
    <source>
      <id>http://kundankumar185.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://kundankumar185.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://kundankumar185.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://kundankumar185.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://kundankumar185.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <title>my experiments with life</title>
      <updated>2014-07-29T19:20:59Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://codesachin.wordpress.com/?p=17</id>
    <link href="http://codesachin.wordpress.com/2014/06/21/gsoc-week-5-pr-reviews-and-starting-coordsysrect/" rel="alternate" type="text/html"/>
    <title>GSoC Week 5: PR reviews and starting CoordSysRect</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">This week had the dual focus of - 1. Polishing off the Vector framework based on PR reviews 2. Starting the implementation of CoordSysRect+Point I had thought last week, that the vector classes I implemented in the first PR were the polished version. However, with the reviews given, I have come to realise that a […]<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=17&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>This week had the dual focus of -</p>
<p>1. Polishing off the Vector framework based on PR reviews</p>
<p>2. Starting the implementation of CoordSysRect+Point</p>
<p>I had thought last week, that the vector classes I implemented in the first PR <em>were</em> the polished version. However, with the reviews given, I have come to realise that a lot of improvements had/have to be made. Francesco Bonazzi, one of the SymPy contributors, was a huge help in improving the code and making it more efficient than what it initially was.</p>
<p>The biggest suggestion for improvement that was provided was to not implement custom hashing and equality checking methods for the Vector classes. Initially, I had overridden the inherited versions of these methods in the new classes, based on tuples generated with respect to the vectorial components of any Vector instance. However, SymPy already has a strong framework for these functionalities, based on the <em>args</em> of a Basic object. Moreover, the SymPy core is apparently being re-written in C++. This would make the SymPy-core versions of the aforementioned methods much, much more efficient than my Python versions.</p>
<p>Luckily, I had implemented the ‘__new__’ methods of the Vector classes in such a way that ‘equivalent’ Vector instances had exactly the same args. This made the usage of the inherited methods much, much easier – the only thing that remained to do was to pass the appropriate args to the superclass __new__ methods. Hence, all Vector classes rely on the SymPy core now, for as much as they can. Phew. Still a problem is the BaseScalar class, whose superclass is Dummy. The __new__ method for Dummy makes it not-possible to pass coordinate-system and index-related information to it – making the appropriate hashing impossible. If I instead inherit from AtomicExpr, I will have to rewrite many methods – not sure if its a good idea. Lets see what the community has to say about this.</p>
<p>About the implementation of the new stuff, I have already finished implementing the Point class. Now I am currently working on implementing CoordSysRect – I am still writing the HUGE __new__ method for this class. For now, I am referring to the tests of sympy.physics.vector while doing the coding. Hope I am successful in writing the classes soon, and integrating it with a polishing and ‘perfected’ version of the vector core.</p>
<p>Thats all for this week. Have a great week!</p><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/17/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/17/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=codesachin.wordpress.com&amp;blog=67602166&amp;post=17&amp;subd=codesachin&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-21T11:45:48Z</updated>
    <category term="Google Summer of Code 2014"/>
    <author>
      <name>srjoglekar246</name>
    </author>
    <source>
      <id>http://codesachin.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://codesachin.wordpress.com/category/google-summer-of-code-2014/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://codesachin.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://codesachin.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://codesachin.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>- Blog by Sachin Joglekar</subtitle>
      <title>Dream. Think. Code. » Google Summer of Code 2014</title>
      <updated>2014-07-29T19:20:41Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>http://thilinaatsympy.wordpress.com/?p=348</id>
    <link href="http://thilinaatsympy.wordpress.com/2014/06/21/gsoc-week-5-matrix-decompositions/" rel="alternate" type="text/html"/>
    <title>[GSoC] Week 5: Matrix Decompositions</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">Hi All, Week 5 of the GSoC is over and I have made some progress in Matrix factorizations. I implemented LU factorization and QR factorization. Still I have to implement Cholesky factorization. I hope to do it during the Weekend. LU factorization LU factorization was invented by Alan Turing and this is very important when …<img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=348&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hi All,</p>
<p>Week 5 of the GSoC is over and I have made some progress in Matrix factorizations. I implemented LU factorization and QR factorization. Still I have to implement Cholesky factorization. I hope to do it during the Weekend.</p>
<h2>LU factorization</h2>
<p>LU factorization was invented by Alan Turing and this is very important when solving a system of equations. In <strong>LU</strong> decomposition we try to factorize a given square matrix into a product of two matrices, <strong>L</strong> and <strong>U</strong> where <strong>L</strong> is a lower triangular matrix and <strong>U</strong> is a upper triangular matrix. The factorization can be a true factorization i.e. <strong>A = LU</strong> or it may be the process of finding two matrices <strong>L</strong>, <strong>U</strong> which can be used in solving the system <strong>Ax = B</strong>. In the latter case we don’t have <strong>A = LU.</strong> I implemented three different algorithms for <strong>LU</strong> decomposition.</p>
<h4>Fraction Free LU decomposition in [1]</h4>
<p>Fraction free version described in [1] results in two matrices, a lower triangular matrix <strong>L </strong>and a upper triangular matrix <strong>U</strong>. But this is not a true factorization i.e. <strong>A != LU</strong> in this case. The algorithm is more focused in a factorization that helps to solve a system <strong>Ax = B</strong>. So we are only interested in finding two matrices which can be used in backward / forward substitution to solve the system.</p>
<h4>Normal and Fraction Free version in SymPy</h4>
<p>I also implemented the normal and fraction free version of the algorithm in SymPy which gives an exact factorization <strong>A = LU</strong>. Normal algorithm results in fractions and not good for numerical calculations if you are not using arbitrary precision arithmetic. In contrast fraction free versions do not generate these kinds of fraction as a result of the decomposition. These algorithms can be found in [2] and [3] respectively.</p>
<h2>QR decomposition</h2>
<p>In <strong>QR </strong>decomposition we find two matrices, an [orthogonal matrix](<a href="http://en.wikipedia.org/wiki/Orthogonal_matrix" rel="nofollow">http://en.wikipedia.org/wiki/Orthogonal_matrix</a>)  <strong>Q </strong>and  a upper triangular matrix <strong>R</strong> such that <strong>A = QR</strong>. Here <strong>A </strong>doesn’t have to be a square matrix.There are several method to calculate <strong>QR</strong> factorization but <strong>SymPy</strong> uses <strong><span class="mw-headline" id="Using_the_Gram.E2.80.93Schmidt_process">Gram–Schmidt </span></strong><span class="mw-headline" id="Using_the_Gram.E2.80.93Schmidt_process">process. The Algorithm can be found in [4].<br/>
</span></p>
<h2>Issues</h2>
<p><strong>QR</strong> decomposition is not a `symbolic friendly` algorithm as it involves finding square root. I searched thoroughly for an algorithm that is suited for symbolic entries but couldn’t find one.</p>
<h2>References</h2>
<div class="line" id="LC175"><span class="c1">[1] Algorithm 3, page 14, Nakos, G. C., Turner, P. R., Williams, R. M. (1997). Fraction-free algorithms for linear and polynomial equations. ACM SIGSAM Bulletin, 31(3), 11–19. doi:10.1145/271130.271133.</span></div>
<div class="line"/>
<div class="line">[2] <a href="http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.LUdecomposition" rel="nofollow">http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.LUdecomposition</a></div>
<div class="line"/>
<div class="line">[3] <a href="http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.LUdecompositionFF" rel="nofollow">http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.LUdecompositionFF</a></div>
<div class="line"/>
<div class="line">[4] <a href="http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.QRdecomposition" rel="nofollow">http://docs.sympy.org/latest/modules/matrices/matrices.html#sympy.matrices.matrices.MatrixBase.QRdecomposition</a></div><br/>  <a href="http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/348/" rel="nofollow"><img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/348/"/></a> <img alt="" border="0" height="1" src="http://pixel.wp.com/b.gif?host=thilinaatsympy.wordpress.com&amp;blog=52956410&amp;post=348&amp;subd=thilinaatsympy&amp;ref=&amp;feed=1" width="1"/></div>
    </content>
    <updated>2014-06-21T06:20:41Z</updated>
    <category term="GSoC-2014-CSymPy"/>
    <category term="CSymPy"/>
    <category term="Linear Algebra"/>
    <category term="LU factorization"/>
    <category term="Matrix factorization"/>
    <category term="QR factorization"/>
    <category term="SymPy"/>
    <author>
      <name>Thilina Rathnayake</name>
    </author>
    <source>
      <id>http://thilinaatsympy.wordpress.com</id>
      <logo>http://s2.wp.com/i/buttonw-com.png</logo>
      <link href="http://thilinaatsympy.wordpress.com/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://thilinaatsympy.wordpress.com" rel="alternate" type="text/html"/>
      <link href="http://thilinaatsympy.wordpress.com/osd.xml" rel="search" type="application/opensearchdescription+xml"/>
      <link href="http://thilinaatsympy.wordpress.com/?pushpress=hub" rel="hub" type="text/html"/>
      <subtitle>My Work related to sympy</subtitle>
      <title>Thilina's SymPy Blog</title>
      <updated>2014-07-29T19:20:40Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:,2014-06-20:gsoc-week-5.html</id>
    <link href="http://jcrist.github.io/gsoc-week-5.html" rel="alternate" type="text/html"/>
    <title>GSoC Week 5: Adventures in Profiling</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>
</p><div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This week I've been working on little fixes. Improving the docstrings, a couple interface improvements, finalizing some design decisions. The plan is to finish up this work next week, and then move on to the code generation portion of the project. In it's current state, the linearizer can handle <code>KanesMethod</code> and <code>LagrangesMethod</code> with ease. I'll probably spend some time hacking away at the <code>matrix_to_linearizer</code> function as well, but that's not priority.</p>
<p>The rest of the week was spent profiling and doing some basic optimizations. Being a mechanical engineer, I haven't spent much time learning about numerical methods (although, I am taking this <a href="http://ocw.mit.edu/courses/mathematics/18-085-computational-science-and-engineering-i-fall-2008/index.htm">MIT OCW course this summer</a>). As such, my natural way of solving the system</p>
<p><span class="math">\[
A x = B
\]</span></p>
<p>where <span class="math">\(A\)</span>, <span class="math">\(B\)</span>, and <span class="math">\(x\)</span> are matrices, is to take the inverse of <span class="math">\(A\)</span>, and multiply it by <span class="math">\(B\)</span>:</p>
<p><span class="math">\[ x = A^{-1} B \]</span></p>
<p>Turns out, this is horribly inefficient. But what is the best way? I had to do some profiling.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="creating-benchmark-matrices">Creating Benchmark Matrices</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>For most systems of the form <span class="math">\(A x = B\)</span> in <code>sympy.physics.mechanics</code>, <span class="math">\(A\)</span> is a symmetric matrix, and <span class="math">\(B\)</span> is a column vector. To do proper benchmarks, I'd need to create random matrices of this form. Looking at some example equations of motion, it can be seen that these mostly consisted of products and sums of terms composed of symbols, trigonometric functions, power functions, <code>sqrt</code>, and <code>inv</code>. After some time, I was able to create a couple functions to create these matrices in a composable way:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [1]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Below are some functions to create random matrices of varying sizes.</span>
<span class="c"># These will be used in the benchmarks.</span>

<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">sample</span><span class="p">,</span> <span class="n">randint</span>
<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Matrix</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="n">sin</span><span class="p">,</span> <span class="n">cos</span><span class="p">,</span> <span class="n">tan</span><span class="p">,</span> <span class="n">sqrt</span><span class="p">,</span> <span class="n">zeros</span><span class="p">,</span> \
    <span class="n">Symbol</span><span class="p">,</span> <span class="n">diag</span><span class="p">,</span> <span class="n">prod</span>

<span class="c"># Define some operations</span>
<span class="n">pow2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">pow3</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">pow4</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">inv</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span><span class="o">/</span><span class="n">x</span>

<span class="c"># Defaults</span>
<span class="c"># OPS is a list of common operations in sympy.physics.mechanics</span>
<span class="n">OPS</span> <span class="o">=</span> <span class="p">[</span><span class="n">sin</span><span class="p">,</span> <span class="n">cos</span><span class="p">,</span> <span class="n">tan</span><span class="p">,</span> <span class="n">pow2</span><span class="p">,</span> <span class="n">pow3</span><span class="p">,</span> <span class="n">pow4</span><span class="p">,</span> <span class="n">sqrt</span><span class="p">,</span> <span class="n">inv</span><span class="p">]</span>
<span class="c"># SYMS is a list of symbols that could be found in a matrix</span>
<span class="n">SYMS</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s">'a, b, c, d, e, f, g, h, i, j'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">sum_or_prod</span><span class="p">(</span><span class="n">vec</span><span class="p">):</span>
    <span class="sd">""" Return either the sum or product of a vector """</span>
    <span class="n">func</span> <span class="o">=</span> <span class="n">sample</span><span class="p">([</span><span class="nb">sum</span><span class="p">,</span> <span class="n">prod</span><span class="p">],</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">vec</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">randterms</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="o">=</span><span class="n">OPS</span><span class="p">,</span> <span class="n">syms</span><span class="o">=</span><span class="n">SYMS</span><span class="p">):</span>
    <span class="sd">""" Creates a list of random terms of size n. Each cell is composed of</span>
<span class="sd">    0 to max_terms, composed of randomly sampled functions from ops, and</span>
<span class="sd">    symbols from syms """</span>
    <span class="n">ntermlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
    <span class="n">pick</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">vec</span><span class="p">,</span> <span class="n">nlist</span><span class="p">:</span> <span class="p">[[</span><span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> 
            <span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">vec</span><span class="p">)),</span> <span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nlist</span><span class="p">]</span>
    <span class="n">rops</span> <span class="o">=</span> <span class="n">pick</span><span class="p">(</span><span class="n">ops</span><span class="p">,</span> <span class="n">ntermlist</span><span class="p">)</span>
    <span class="n">rsyms</span> <span class="o">=</span> <span class="n">pick</span><span class="p">(</span><span class="n">syms</span><span class="p">,</span> <span class="n">ntermlist</span><span class="p">)</span>
    <span class="n">terms</span> <span class="o">=</span> <span class="p">[</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">opsym</span><span class="p">)</span> <span class="k">for</span> <span class="n">opsym</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">rops</span><span class="p">,</span> <span class="n">rsyms</span><span class="p">)]</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">sum_or_prod</span><span class="p">(</span><span class="n">op</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="n">term</span><span class="p">)</span> <span class="k">for</span> <span class="n">term</span> <span class="ow">in</span> <span class="n">terms</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">randmat</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="o">=</span><span class="n">OPS</span><span class="p">,</span> <span class="n">syms</span><span class="o">=</span><span class="n">SYMS</span><span class="p">):</span>
    <span class="sd">""" Creates a random matrix of size (m,n). Each cell is composed of</span>
<span class="sd">    1 to max_terms, composed of randomly sampled functions from ops, and</span>
<span class="sd">    symbols from syms """</span>
    <span class="k">return</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">randterms</span><span class="p">(</span><span class="n">m</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="p">,</span> <span class="n">syms</span><span class="p">))</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">randuppertriag</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="o">=</span><span class="n">OPS</span><span class="p">,</span> <span class="n">syms</span><span class="o">=</span><span class="n">SYMS</span><span class="p">):</span>
    <span class="sd">""" Creates a random upper triangular matrix of size (n, n). Each cell is</span>
<span class="sd">    composed of 1 to max_terms, composed of randomly sampled functions from</span>
<span class="sd">    ops, and symbols from syms """</span>
    <span class="n">nupper</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
    <span class="n">terms</span> <span class="o">=</span> <span class="n">randterms</span><span class="p">(</span><span class="n">nupper</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="p">,</span> <span class="n">syms</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">rows</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="n">rows</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">zeros</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">row_join</span><span class="p">(</span><span class="n">Matrix</span><span class="p">(</span><span class="n">terms</span><span class="p">[</span><span class="n">t</span><span class="p">:</span><span class="n">t</span><span class="o">+</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">T</span><span class="p">))</span>
        <span class="n">t</span> <span class="o">+=</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span>
    <span class="n">rows</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">zeros</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">symrandmat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="o">=</span><span class="n">OPS</span><span class="p">,</span> <span class="n">syms</span><span class="o">=</span><span class="n">SYMS</span><span class="p">):</span>
    <span class="sd">""" Creates a random symmetric matrix of size (n, n). Each cell is</span>
<span class="sd">    composed of 1 to max_terms, composed of randomly sampled functions from</span>
<span class="sd">    ops, and symbols from syms """</span>
    <span class="n">upper</span> <span class="o">=</span> <span class="n">randuppertriag</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="p">,</span> <span class="n">syms</span><span class="p">)</span>
    <span class="n">lower</span> <span class="o">=</span> <span class="n">upper</span><span class="o">.</span><span class="n">T</span>
    <span class="n">D</span> <span class="o">=</span> <span class="n">diag</span><span class="p">(</span><span class="o">*</span><span class="n">randterms</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">max_terms</span><span class="p">,</span> <span class="n">ops</span><span class="p">,</span> <span class="n">syms</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">upper</span> <span class="o">+</span> <span class="n">D</span> <span class="o">+</span> <span class="n">lower</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [2]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># 3x3 Random Upper Triangular Matrix with max number of terms 2</span>
<span class="n">randuppertriag</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[2]:</div>


<div class="output_text output_subarea output_pyout">
<pre>Matrix([
[0, cos(e),      tan(g)],
[0,      0, f**4*cos(j)],
[0,      0,           0]])
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [3]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># 3x3 Random Matrix with max number of terms 2</span>
<span class="n">randmat</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[3]:</div>


<div class="output_text output_subarea output_pyout">
<pre>Matrix([
[   b**4, j**2 + tan(c),           d**4],
[    1/d,        cos(f), c**2 + sqrt(d)],
[sqrt(a),        cos(g),           j**4]])
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [4]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># 3x3 Symmetric matrix with max number of terms 2</span>
<span class="n">symrandmat</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[4]:</div>


<div class="output_text output_subarea output_pyout">
<pre>Matrix([
[          cos(a), sqrt(g) + sin(b),        tan(f)],
[sqrt(g) + sin(b),   sqrt(i)*cos(j),           1/b],
[          tan(f),              1/b, cos(f)*tan(c)]])
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="solution-methods">Solution Methods</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>There are 4 different methods we'll be testing:</p>
<ol style="">
<li><strong><code>LUsolve</code>:</strong> Solve the problem with LU decomposition</li>
<li><strong><code>LDLsolve</code>:</strong> For symmetric matrices, solve with LDL decomposition</li>
<li><strong><code>cholesky_solve</code>:</strong> For symmetric matrices, solve with cholesky decomposition</li>
<li><strong><code>_mat_inv_mul</code>:</strong> Solve using LDL decomposition, and an intermediate substitution dictionary. This is what <code>mechanics</code> is currently using.</li>
</ol>
<p>After doing some reading up on these, <code>LDLsolve</code> and <code>cholesky_solve</code> <a href="http://en.wikipedia.org/wiki/Cholesky_decomposition#Computation">should be the fastest</a>, as the <span class="math">\(A\)</span> matrix is symmetric. <code>_mat_inv_mul</code> also uses LDL decomposition, but it has the overhead of substitution. However, for larger matrices this may yield benefits, as the LDL decomposition is performed only on a matrix of single symbols.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [5]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># This is what sympy.physics.mechanics is currently using.</span>
<span class="c"># Copied into this file, to show what it's doing.</span>
<span class="k">def</span> <span class="nf">_mat_inv_mul</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
    <span class="sd">"""</span>
<span class="sd">    Computes A^-1 * B symbolically w/ substitution, where B is not</span>
<span class="sd">    necessarily a vector, but can be a matrix.</span>

<span class="sd">    """</span>

    <span class="n">r1</span><span class="p">,</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">shape</span>
    <span class="n">r2</span><span class="p">,</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">B</span><span class="o">.</span><span class="n">shape</span>
    <span class="n">temp1</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">r1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'x'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r1</span> <span class="o">*</span> <span class="n">i</span><span class="p">)))</span>
    <span class="n">temp2</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="n">Symbol</span><span class="p">(</span><span class="s">'y'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">r2</span> <span class="o">*</span> <span class="n">i</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">temp1</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">temp1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">temp2</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">temp2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">temp3</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">c2</span><span class="p">):</span>
        <span class="n">temp3</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp1</span><span class="o">.</span><span class="n">LDLsolve</span><span class="p">(</span><span class="n">temp2</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]))</span>
    <span class="n">temp3</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">([</span><span class="n">i</span><span class="o">.</span><span class="n">T</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">temp3</span><span class="p">])</span><span class="o">.</span><span class="n">T</span>
    <span class="k">return</span> <span class="n">temp3</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">temp1</span><span class="p">,</span> <span class="n">A</span><span class="p">))))</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">temp2</span><span class="p">,</span> <span class="n">B</span><span class="p">))))</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="benchmark-constant-matrix-complexity-varying-n">Benchmark: Constant Matrix Complexity, Varying <em>n</em></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Here we check increasing matrix dimensions, with a constant complexity of each cell (<code>max_terms = 3</code>). Only running up to n=6, as computation got excessive after that.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [6]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="c"># Run the benchmark for varying values of n, with max_terms = 3</span>
<span class="n">timestmt</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">stmt</span><span class="p">,</span> <span class="n">setup</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">r</span><span class="p">:</span> <span class="nb">min</span><span class="p">(</span><span class="n">repeat</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="n">setup</span><span class="o">=</span><span class="n">setup</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="n">r</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="n">n</span><span class="p">))</span><span class="o">/</span><span class="n">n</span>
<span class="n">ns</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="n">lu_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">ldl_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">chol_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">matinv_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ns</span><span class="p">:</span>
    <span class="n">A</span> <span class="o">=</span> <span class="n">symrandmat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">randmat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">lu_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LUsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">ldl_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LDLsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">chol_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">matinv_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'_mat_inv_mul(A, B)'</span><span class="p">,</span>
        <span class="s">'from __main__ import A, B, _mat_inv_mul'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [7]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Plot the results</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
<span class="o">%</span> <span class="n">matplotlib</span> <span class="n">inline</span>

<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">lu_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">ldl_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">chol_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">matinv_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'mat_inv_mul(A, B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Dimension'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Timings for Solution to A*x = b, Varying Dimensions'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">lu_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">ldl_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">chol_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Dimension'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Timings for Solution to A*x = b,  Varying Dimensions'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Observing the above plots it can be seen that <code>_mat_inv_mul</code> is several orders of magnitude slower than the other three methods, and increases in time at a faster rate. As the underlying algorithm is the same as <code>LDLsolve</code>, this indicates that the <code>subs</code> operations are slow, and of larger complexity than <code>LDLsolve</code>. While the other three methods are all close, <code>LUsolve</code> is the fastest. This is interesting, because for purely numeric computation (i.e. floating point only), <code>LDLsolve</code> and <code>cholesky_solve</code> should be faster for symmetric matrices.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="benchmark-varying-matrix-complexity-constant-n">Benchmark: Varying Matrix Complexity, Constant <em>n</em></h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Here we vary the complexity of the matrix (how many terms in each cell), but keep the matrix size constant. I picked <em>n</em> = 4, because it was big enough to take some time, but not too big to take forever. I'd expect to see the computation time increase with complexity, but not as rapidly as it did with matrix dimension.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [8]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Run the benchmark for varying values of max_terms, with n = 4</span>
<span class="n">ms</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="n">lu_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">ldl_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">chol_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">matinv_t</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">ms</span><span class="p">:</span>
    <span class="n">A</span> <span class="o">=</span> <span class="n">symrandmat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">randmat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
    <span class="n">lu_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LUsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">ldl_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LDLsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">chol_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
    <span class="n">matinv_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">timestmt</span><span class="p">(</span><span class="s">'_mat_inv_mul(A, B)'</span><span class="p">,</span>
        <span class="s">'from __main__ import A, B, _mat_inv_mul'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [9]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Plot the results</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">lu_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">ldl_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">chol_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">matinv_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'mat_inv_mul(A, B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Complexity'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Timings for Solution to A*x = b, Varying Complexity'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">lu_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">ldl_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ms</span><span class="p">,</span> <span class="n">chol_t</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Complexity'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Time (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Timings for Solution to A*x = b, Varying Complexity'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Interestingly, it seems that <code>LUsolve</code>, <code>LDLsolve</code>, and <code>cholesky_solve</code> don't increase in time with complexity, while <code>_mat_inv_mul</code> does. This must be due to the intermediate substitution step.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="benchmark-turning-matrix-term-complexity-up-to-11">Benchmark: Turning Matrix Term Complexity up to 11</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Using the matrices composed by the above methods, all cells are either a sum of terms, or a product. This is close to how the matrices we need to solve look, but it's not a perfect representation. Let's try with a really ugly matrix. We can use the fact that for any matrix <span class="math">\(A\)</span>, <span class="math">\(A A^T\)</span> is a symmetric matrix.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [10]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">temp</span> <span class="o">=</span> <span class="n">prod</span><span class="p">([</span><span class="n">randmat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)])</span>
<span class="n">A</span> <span class="o">=</span> <span class="n">temp</span><span class="o">*</span><span class="n">temp</span><span class="o">.</span><span class="n">T</span>
<span class="n">B</span> <span class="o">=</span> <span class="n">randmat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [11]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">A</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[11]:</div>


<div class="output_text output_subarea output_pyout">
<pre>Matrix([
[                                                                                                                                                                                                                                                                                                   (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)**2 + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)**2 + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)**2 + (b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c)**2, (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f)) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c) + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c), (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c), (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c)],
[                                                  (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f)) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c) + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                                                                                                                                                                                                                                                                                                                       (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))**2 + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)**2 + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)**2 + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)**2,                                                                                      (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                                                                      (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)],
[                 (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                                     (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                                                                                                                                                                                                                                                                                                                       (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)**2 + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)**2 + (c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c)**2 + (c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c)**2,                                                     (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c) + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c)],
[(h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                    (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                    (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c) + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c),                                                                                                                                                                                                                                                                                                                                       (sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e)**2 + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)**2 + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))**2 + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))**2]])
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [12]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="n">B</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt output_prompt">
    Out[12]:</div>


<div class="output_text output_subarea output_pyout">
<pre>Matrix([
[                 a**3 + d**4 + g**2],
[a**4 + f**2 + sin(g) + tan(e) + 1/d],
[                         f**2 + 1/g],
[                             sin(d)]])
</pre>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Yikes, that's some ugly stuff. Let's see how the various methods fair against that:</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [13]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Run the benchmarks</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Time for LUsolve: "</span><span class="p">,</span> <span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LUsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Time for LDLsolve: "</span><span class="p">,</span> <span class="n">timestmt</span><span class="p">(</span><span class="s">'A.LDLsolve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Time for cholesky_solve: "</span><span class="p">,</span> <span class="n">timestmt</span><span class="p">(</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Time for _mat_inv_mul: "</span><span class="p">,</span> <span class="n">timestmt</span><span class="p">(</span><span class="s">'_mat_inv_mul(A, B)'</span><span class="p">,</span> <span class="s">'from __main__ import A, B, _mat_inv_mul'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>
<div class="output_subarea output_stream output_stdout output_text">
<pre>Time for LUsolve:  0.0034651060013857204
Time for LDLsolve:  0.009068403000128455
Time for cholesky_solve:  0.006806592999055283
Time for _mat_inv_mul:  144.967967898001

</pre>
</div>
</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>From this it can be seen that <code>_mat_inv_mul</code> is <em>far</em> slower than the other three methods, even for extremely complex matrices. There doesn't seem to be any benefit to the intermediate <code>subs</code> step.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="benchmark-expression-size">Benchmark: Expression Size</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>This isn't a time benchmark. Rather, it's a measurment of the resulting expression's readability. If <code>LUsolve</code> is faster, but results in a less compact expression than <code>LDLsolve</code>, then it may be more beneficial to go with the latter. To test this we'll measure the number of operations using the <code>count_ops</code> method. This is a rough metric of the compactness of the solution.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [14]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">count_ops</span>
<span class="c"># Run the benchmark for varying values of n, with max_terms = 2</span>
<span class="n">ns</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">lu_nops</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">ldl_nops</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">chol_nops</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">matinv_nops</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ns</span><span class="p">:</span>
    <span class="n">A</span> <span class="o">=</span> <span class="n">symrandmat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">randmat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="c"># Solve the system</span>
    <span class="n">sol_LU</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">LUsolve</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="n">sol_LDL</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">LDLsolve</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="n">sol_chol</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">cholesky_solve</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="n">sol_matinv</span> <span class="o">=</span> <span class="n">_mat_inv_mul</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
    <span class="c"># Count the number of ops</span>
    <span class="n">lu_nops</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">count_ops</span><span class="p">(</span><span class="n">sol_LU</span><span class="p">))</span>
    <span class="n">ldl_nops</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">count_ops</span><span class="p">(</span><span class="n">sol_LDL</span><span class="p">))</span>
    <span class="n">chol_nops</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">count_ops</span><span class="p">(</span><span class="n">sol_chol</span><span class="p">))</span>
    <span class="n">matinv_nops</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">count_ops</span><span class="p">(</span><span class="n">sol_matinv</span><span class="p">))</span>
</pre></div>

</div>
</div>
</div>

</div>
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">
In [15]:
</div>
<div class="inner_cell">
    <div class="input_area">
<div class="highlight-ipynb"><pre class="ipynb"><span class="c"># Plot the results</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">lu_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">ldl_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">chol_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">matinv_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'mat_inv_mul(A, B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Dimensions'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Operations'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Expression Size for Solution to A*x = b'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">lu_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LUsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">ldl_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.LDLsolve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">chol_nops</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">'A.cholesky_solve(B)'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Matrix Dimensions'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Number of Operations'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Expression Size for Solution to A*x = b'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</pre></div>

</div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

<div class="output_area"><div class="prompt"/>


<div class="output_png output_subarea ">
<img/>
</div>

</div>

</div>
</div>

</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Observing the above plots, once again <code>_mat_inv_mul</code> comes out as the worst (by far). The remaining three barely differ, but <code>LUsolve</code> results in the most compact expression.</p>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h1 id="discussion-of-results">Discussion of Results</h1>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered">
<div class="prompt input_prompt">
</div>
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Overall, <code>_mat_inv_mul</code> comes out the worst for every benchmark, and <code>LUsolve</code> comes out the best. Unless I did something wrong with my benchmarks <code>LUsolve</code> should replace every call to <code>_mat_inv_mul</code> in <code>mechanics</code>. It results in a more compact form, and has several order of magnitude faster running speed.</p>
<p>This surprised me. I would have thought that a more complicated expression would take longer to solve, but as seen in the second benchmark matrix complexity had no effect on running speed for the three solution algorithms (although it did affect the substitution speed for <code>_mat_inv_mul</code>). I suppose that's why you're always told to profile <em>before</em> you optimize. Often your intuition is wrong.</p>
<p>Something else that surprised me was that <code>LDLsolve</code> and <code>cholesky_solve</code> had a slower running time than <code>LUsolve</code>. For numerical symmetric matrices, this shouldn't be the case. I wasn't able to find anything about symbolic calculation of these decompositions, but I assume it should be about the same. Either way, the more general LU decomposition seems to be the fastest.</p>
<hr/>
<p><em>Did I do something wrong? Disagree with these benchmarks? Let me know in the comments below!</em></p>
</div>
</div>
</div><p/></div>
    </summary>
    <updated>2014-06-20T19:00:00Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <category term="pydy"/>
    <category term="dynamics"/>
    <author>
      <name>Jim Crist</name>
    </author>
    <source>
      <id>http://jcrist.github.io/</id>
      <link href="http://jcrist.github.io/" rel="alternate" type="text/html"/>
      <link href="http://jcrist.github.io/feeds/gsoc.atom.xml" rel="self" type="application/atom+xml"/>
      <title>Marginally Stable</title>
      <updated>2014-07-18T20:00:00Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:fa.bianp.net,2014-06-20:blog/2014/surrogate-loss-functions-in-machine-learning/</id>
    <link href="http://fa.bianp.net/blog/2014/surrogate-loss-functions-in-machine-learning/" rel="alternate" type="text/html"/>
    <title>Surrogate Loss Functions in Machine Learning</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">

<p><span class="bold">TL; DR</span> These are some notes on calibration of surrogate loss functions in the context of machine learning. But mostly it is an excuse to post some images I made.</p>
<p>In the binary-class classification setting we are given $n$ training samples $\{(X_1, Y_1), \ldots, (X_n, Y_n)\}$, where $X_i$ belongs to some sample space $\mathcal{X}$, usually $\mathbb{R}^p$ but for the purpose of this post we can keep i abstract, and $y_i \in \{-1, 1\}$ is an integer representing the class label. </p>
<p>We are also given a loss function $\ell: \{-1, 1\} \times \{-1, 1\} \to \mathbb{R}$ that measures the error of a given prediction. The value of the loss function $\ell$ at an arbitrary point $(y, \hat{y})$ is interpreted as the cost incurred by predicting $\hat{y}$ when the true label is $y$. In classification this function is often the zero-one loss, that is, $\ell(y, \hat{y})$ is zero when $y = \hat{y}$  and one otherwise.</p>
<p>The goal is to find a function $h: \mathcal{X} \to [k]$, the classifier, with the smallest expected loss on a new sample. In other words, we seek to find a function $h$ that minimizes the expected $\ell$-risk, given by 
$$
\mathcal{R}_{\ell}(h) = \mathbb{E}_{XY}[\ell(Y, h(X))]
$$</p>
<p>In theory, we could directly minimize the $\ell$-risk and we would have the optimal classifier, also known as <em>Bayes predictor</em>. However, there are several problems associated with this approach. One is that the probability distribution of $XY$ is unknown, thus computing the exact expected value is not feasible. It must be approximated by the empirical risk. Another issue is that this quantity is difficult to optimize because the function $\ell$ is discontinuous. Take for example a problem in which $\mathcal{X} = \mathbb{R}^2, k=2$, and we seek to find the linear function $f(X) = \text{sign}(X w), w \in \mathbb{R}^2$  and that minimizes the $\ell$-risk. As a function of the parameter $w$ this function looks something like</p>
<div style="text-align: center;">
<img alt="loss as function of w" src="http://fa.bianp.net/blog/images/2014/loss_01.png" style="margin-top: 0px;" width="350px"/>
</div>

<p>This function is discontinuous with large, flat regions and is thus extremely hard to optimize using gradient-based methods. For this reason it is usual to consider a proxy to the loss called a <em>surrogate loss function</em>. For computational reasons this is usually convex function $\Psi: \mathbb{R}  \to \mathbb{R}_+$. An example of such surrogate loss functions is the <em>hinge loss</em>, $\Psi(t) = \max(1-t, 0)$, which is the loss used by Support Vector Machines (SVMs). Another example is the logistic loss, $\Psi(t) = 1/(1 + \exp(-t))$, used by the logistic regression model. If we consider the logistic loss, minimizing the $\Psi$-risk, given by $\mathbb{E}_{XY}[\Psi(Y, f(X))]$, of the function $f(X) = X w$ becomes a much more more tractable optimization problem:</p>
<div style="text-align: center;">
<img src="http://fa.bianp.net/blog/images/2014/loss_log.png" style="margin-top: 0px;" width="350px"/>
</div>

<p>In short, we have replaced the $\ell$-risk which is computationally difficult to optimize with the $\Psi$-risk which has more advantageous properties. A natural questions to ask is how much have we lost by this change. The property of whether minimizing the $\Psi$-risk leads to a function that also minimizes the $\ell$-risk is often referred to as <em>consistency</em> or <em>calibration</em>. For a more formal definition see [<sup id="fnref:1"><a class="footnote-ref" href="http://fa.bianp.net/blog/feed/#fn:1" rel="footnote">1</a></sup>] and [<sup id="fnref:2"><a class="footnote-ref" href="http://fa.bianp.net/blog/feed/#fn:2" rel="footnote">2</a></sup>]. This property will depend on the surrogate function $\Psi$: for some functions $\Psi$ it will be verified the consistency property and for some not. One of the most useful characterizations was given in [<sup id="fnref:1"><a class="footnote-ref" href="http://fa.bianp.net/blog/feed/#fn:1" rel="footnote">1</a></sup>] and states that if $\Psi$ is convex then it is consistent if and only if it is differentiable at zero and $\Psi'(0) &lt; 0$. This includes most of the commonly used surrogate loss functions, including hinge, logistic regression and Huber loss functions.</p>
<div style="text-align: center;">
<img src="http://fa.bianp.net/blog/images/2014/loss_functions.png" style="margin-top: 0px;" width="550px"/>
</div>

<div class="footnote">
<hr/>
<ol>
<li id="fn:1">
<p>P. L. Bartlett, M. I. Jordan, and J. D. McAuliffe, “Convexity , Classification , and Risk Bounds,” J. Am. Stat. Assoc., pp. 1–36, 2003. <a class="footnote-backref" href="http://fa.bianp.net/blog/feed/#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:2">
<p>A. Tewari and P. L. Bartlett, “On the Consistency of Multiclass Classification Methods,” J. Mach. Learn. Res., vol. 8, pp. 1007–1025, 2007. <a class="footnote-backref" href="http://fa.bianp.net/blog/feed/#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
</ol>
</div></div>
    </summary>
    <updated>2014-06-19T22:00:00Z</updated>
    <category term="machine learning"/>
    <category term="consistency"/>
    <category term="calibration"/>
    <author>
      <name>Fabian Pedregosa</name>
    </author>
    <source>
      <id>http://fa.bianp.net/blog/</id>
      <link href="http://fa.bianp.net/blog/" rel="alternate" type="text/html"/>
      <link href="http://fa.bianp.net/blog/feed/rss.xml" rel="self" type="application/atom+xml"/>
      <title>I say things</title>
      <updated>2014-06-20T13:40:14Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-283806077182880539.post-821534238345280726</id>
    <link href="http://gsocblog.blogspot.com/feeds/821534238345280726/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/06/in-this-week-i-worked-on-formal-power.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/821534238345280726" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/283806077182880539/posts/default/821534238345280726" rel="self" type="application/atom+xml"/>
    <link href="http://gsocblog.blogspot.com/2014/06/in-this-week-i-worked-on-formal-power.html" rel="alternate" type="text/html"/>
    <title/>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">In this week I worked on Formal Power Series and getting my two PRs merged.<br/><br/>While getting my PRs related to asymptotic expansion merged, I learned about how important documentation is and the little details that matter. I made some very silly mistakes causing delay in getting the PRs merged.<br/><br/>Formal Power Series:<br/>I made some good progress regarding FPS this week. As I said in the earlier post, I decided to go with lazy recursion to implement infinite power series.<br/>In this a series is represented as a tuple of head and tail where head is the first term of the series while tail is rest of the infinite series.<br/>Algorithms to do addition, subtraction, multiplication are very simple if we use recursion.<br/>E.g.:-<br/>series1 = (head1, tail1)<br/>series2 = (head2, tail2)<br/>Then,<br/>- series1 + series2 = (head1+head2, tail1+tail2)<br/>- series1 * series2 = (head1*head2, head1*tail2 + head2*tail1 + tail1*tail2)<br/><br/>Similarly other operations like division, inversion, composition can be written.<br/><br/>Along with this, I also finished implementing simpleDE, DEtoRE and somewhat solveRE methods. These methods are used to find the generator for a given function in x.<br/>- simpleDE() converts function into a simple differential equation. This involved finding the number of rationally independent terms among a set of expressions. I coded a very inefficient solution with repeatedly dividing each term by other and checking if there quotient is a rational function. This is O(n**2) approach. There might be a better approach.<br/>- DEtoRE() converts differential equation to a recurrence equation. This is a straightforward algorithm with simple substitutions.<br/><br/>Next week:<br/>Since the operations on infinite series are a recursive process, I guess there is a problem of memory management with my code. Operations like division, multiplication are highly recursive creating Stream class numerous times. Upon giving high value of "n" while printing terms, it gives a "maximum recursion depth" error.<br/>I will work on this and add more operations to Stream class.</div></div>
    </content>
    <updated>2014-06-19T16:40:24Z</updated>
    <published>2014-06-19T16:40:00Z</published>
    <author>
      <name>Avichal Dayal</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/107026571968093758973</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-283806077182880539</id>
      <author>
        <name>Avichal Dayal</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://gsocblog.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/283806077182880539/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://gsocblog.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>GSoC 2014 with SymPy</title>
      <updated>2014-07-23T14:29:48Z</updated>
    </source>
  </entry>

  <entry xml:lang="en">
    <id>https://hargup.github.io/posts/week-4.html</id>
    <link href="https://hargup.github.io/posts/week-4.html" rel="alternate" type="text/html"/>
    <title>week 4</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><h3>Intersections of Infinitely indexed sets</h3>
<p>This week I implemented a method to do intersection of imagesets using the
solutions of Diophantine equations at <a href="https://github.com/sympy/sympy/pull/7587">PR</a>.</p>
<p>Say you have
to find the intersection of sets <code>2*n| n in Integers</code> and <code>3*m| m in Integers</code>.
The intersection of these sets is the set of the common values in the two sets,
which in this case is equivalent to the values of <code>n</code> for which the equation <code>2*n - 3*m</code> has
some integral solution in <code>m</code>. Or the values of <code>m</code> for which the <code>2*n - 3*m</code>
has some integral solution in <code>n</code>. Diophantine equations are equations for
which only integral solutions are searched for.
The Diophantine module was written by
<a href="https://github.com/thilinarmtb">Thilina</a> as his GSoC project last year.
It gives the parametric solution for such equation.</p>
<pre class="code literal-block"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]</span><span class="o">:</span> <span class="n">diophantine</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
<span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span><span class="o">:</span> <span class="p">{(</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">t</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="n">t</span><span class="p">)}</span>
</pre>


<p>The Solution is sorted according to alphabetic order of the variables involved.
So the value of LHS (<code>2*n</code>) for which the equation is <code>2*(-3*t)</code> that is <code>-6*t</code>
and it is the intersection of the sets described above <code>-6*t| t in Integers</code>.
Since <code>-6*t| t in Integers</code> is same as <code>6*t| t in Integers</code> I also wrote some
simplification rules for the imagesets with Integers as baseset.</p>
<h3>Sets for Invert Function</h3>
<p>The sets module turned out to be better than I expected. I had a perception
that substitutions doesn't work properly with sets and I have even opened an
<a href="https://github.com/sympy/sympy/issues/7483">issue</a> for that but it turned out
I hadn't looked closely enough. It worked well for the free variables and it
didn't worked for the things it shouldn't work i.e., the bound variables in the
imagesets.</p>
<p>Using sets simplified the code. All the list comprehensions like this
<code>[i.subs(symbol, symbol/g) for i in _invert(h, symbol)]</code> were converted to
simple substitutions for sets and other sets operations.  <code>_invert(h,
symbol).subs(symbol, symbol/g)</code></p>
<p>Just by changing the output of invert to sets, then by adding the inverse of
trigonometric function and writing the code to rewrite then as tan I was able
to return all the solutions of the equations like <code>cos(x) + sin(x) == 0</code> it
turned to out to easier than I thought. Using sets as output makes thinking
about the mathematics of the solvers much more easier and the code comes
out to be pretty natural. Now when we can see the results I can surely say
there can be no better output for solvers than sets.</p>
<p>This week I'll study LambertW function and then code additional techniques to
solve real equations. I'll also try to figure out techniques to perform Union
on infinitely indexed sets.</p></div>
    </summary>
    <updated>2014-06-18T05:59:01Z</updated>
    <category term="GSoC"/>
    <category term="sympy"/>
    <author>
      <name>Harsh Gupta</name>
    </author>
    <source>
      <id>https://hargup.github.io/</id>
      <link href="https://hargup.github.io/" rel="alternate" type="text/html"/>
      <link href="http://hargup.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <title>Harsh's blog</title>
      <updated>2014-07-29T19:21:00Z</updated>
    </source>
  </entry>

  <entry xml:lang="en-US">
    <id>http://blog.s-d-b.com/?p=67</id>
    <link href="http://blog.s-d-b.com/gsoc-2014-week-4/" rel="alternate" type="text/html"/>
    <title>GSoC 2014: Week 4</title>
    <summary>Hello Everyone, The majority of work this week was finishing up my previous work and creating the architecture for the First Order Logic module. Consequently, this post is concerned with First Order Logic (FoL)...</summary>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Hello Everyone,</p>
<p>The majority of work this week was finishing up my previous work and creating the architecture for the First Order Logic module. Consequently, this post is concerned with First Order Logic (FoL) and is intended mostly for those who are not familiar with the concepts. If you find yourself comfortable with writing formulas in FoL then you can safely skip this post.</p>
<p>Before we go on to the discussion about First Order Logic, one very interesting topic that came up this week was the idea of an Atom. What is an atom for propositional logic? The classic answer amounts to anything that cannot be broken down further to yield simpler terms. Analogously, let us define a <code>literal</code> to mean any atom or its negation. So, <code>A</code> is a literal (and so is <code>~A</code>). How about <code>A &gt; B</code>. Without bordering on any ideas of higher order logic, let us tweak the definition of atom to mean anything that cannot be broken down <em>using propositional logic</em> to yield simpler terms. So, how does this definition change things? It means we can treat any expression that propositional logic can’t break down as a black box with the assumption that it will yield a boolean value once evaluated. Analogously, a literal is now any expression which cannot be simplified (in propositional logic) or its negation. This definition gives a lot more freedom and power to the idea of formulas. Ofcourse, one needs to keep in mind that it is compulsory for these <em>literals</em> to yield a boolean once evaluated (typically before propositional formula evaluation methods are called on the formula).</p>
<p>Ok, with that, we finish the first part our Propositional Logic post series. The future posts will be associated with First Order Logic before coming back to SAT (in propositional formula). For the remainder of the series the words First Order Logic and Predicate Logic will be used interchangeably (while there is some <a href="http://http://en.wikipedia.org/wiki/Predicate_logic" title="Predicate Logic">difference</a> between the two, we will ignore them. Finally beginning the actual discussion about FoL, let us start with some definitions.</p>
<ul>
<li><strong>Constant:</strong> Any object of the universe whose value remains the same throughout the expression. e.g. john, 1, computer, socrates</li>
<li><strong>Variable:</strong> An object which can take up any value from the domain. e.g. X, Y</li>
<li><strong>Function:</strong> A mapping of n-ary terms (see below) to a term. e.g. F(X, G(a, Y)), teacher(teacher(aristotle))</li>
<li><strong>Term:</strong> Any Constant, Variable or Function is called a Term.</li>
<li><strong>Predicate:</strong> A mapping of n-ary terms to a boolean value. e.g. IsTeacher(Socrates, plato)</li>
<li><strong>Quantifier:</strong> Quantifiers assert a particular property with respect to a bound variable. Q(X, IsTeacher(X, alexander)) Here Q is some quantifier (see below) and X is the bound variable.</li>
<li><strong>ForAll (∀)</strong>: Also known as Universal Quantifier, this asserts that for each value of the bound variable the expression holds True</li>
<li><strong>Exists (∃)</strong>: Also known as Existential Quantifier, this asserts that for atleast one of the values of the bound variable the expression holds True</li>
</ul>
<p>The above description is far from complete. Below are some more examples. For these examples assume that the program is intelligent enough to know the answer.</p>
<p/><pre class="crayon-plain-tag"># All constants are in lowercase
# All variables are in uppercase
# All functions starts with a lowercase but subsequent words start with an uppercase
# All predicates follow camel casing

# teacher(person) is a function which maps a person to his teacher
&gt;&gt;&gt; teacher(alexander)
aristotle
&gt;&gt;&gt; teacher(teacher(aristotle))
'Socrates'

# f(X) = 2X + 3y + 1
&gt;&gt;&gt; f(X, Y)
Add(Mul(2, X), Mul(3, Y), 1)

# IsTeacher(a, b) is a predicate which returns if a is the teacher of b
&gt;&gt;&gt; IsTeacher(alexander, plato)
False

# Assume that the following properties hold for the relationship teacher
# If A is the teacher of B, and B is the teacher of C, then A is the teacher of C (Transitivity)
# A is always the teacher of A (Identity)
&gt;&gt;&gt; domain = [socrates, plato, aristotle, alexander]
&gt;&gt;&gt; ForAll(X, IsTeacher(X, alexander))
True
&gt;&gt;&gt; Exists(X, IsWarrior(X))
True
&gt;&gt;&gt; ForAll(X, IsWarrior(X))
False
&gt;&gt;&gt; Exists(X, InventedCalculus(X))
False

# f(x, y) = x + 2y
# g(x, y) = 2x + y
&gt;&gt;&gt; ForAll(X, ForAll(Y, Greater(f(X, Y), g(X, Y)))
False
&gt;&gt;&gt; Exists(X, Exists(Y, Greater(f(X, Y), g(X, Y)))
True</pre><p> </p>
<p>I hope the above examples make the definitions clearer. However SymPy is a symbolic library (rather than a numeric one). The implication of the same is that we are much less concerned about the value of the expression than the expression itself. For example, we will be predominantly dealing with functions, variables and predicates without being bothered by their (real life) values. What follows next are examples of conversion of natural language sentences to First Order Logic and their representation in SymPy. One would notice that we have only dealt with the new FoL concepts in the examples above and completely ignored the traditional propositional operators. Using the idea of Atom described at the beginning of this post, if we think of every Predicate (and Quantifier) as an Atom, then we can use every idea of propositional logic here. The examples below describe the complete idea.</p>
<p/><pre class="crayon-plain-tag"># All dolphins all mammals
&gt;&gt;&gt; X = symbols('X')
&gt;&gt;&gt; Dolphin = Predicate('Dolphin')
&gt;&gt;&gt; Mammal = Predicate('Mammal')
&gt;&gt;&gt; ForAll(X, Dolphin(X) &gt;&gt; Mammal(X))
ForAll((X), Implies(Dolphin(X), Mammal(X)))


&gt;&gt;&gt; X, T = symbols('X T')
&gt;&gt;&gt; Person = Predicate('Person')
&gt;&gt;&gt; Time = Predicate('Time')
&gt;&gt;&gt; CanFool = Predicate('CanFool')

# You can fool some of the people all of the time
&gt;&gt;&gt; Exists(X, ForAll(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
Exists((X), ForAll(T, Implies(And(Person(X), Time(T)), CanFool(X, T))))

# You can fool all of the people some of the time
&gt;&gt;&gt; ForAll(X, Exists(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
ForAll((X), Exists(T, Implies(And(Person(X), Time(T)), CanFool(X, T))))

# You cannot fool all of the people all of the time
&gt;&gt;&gt; ~ForAll(X, ForAll(T, (Person(X) &amp; Time(T)) &gt;&gt; CanFool(X, T)))
Not(ForAll((X,T), Implies(And(Person(X), Time(T)), CanFool(X, T))))</pre><p> </p>
<p>I hope this should provide you with some basic idea about First Order Logic. I will be updating this post with ideas related to Interpretation/Model. Stay tuned.</p>
<p>Aloha!!!</p></div>
    </content>
    <updated>2014-06-17T20:54:50Z</updated>
    <category term="GSoC"/>
    <category term="GSoC 2014"/>
    <category term="SymPy"/>
    <author>
      <name>SD</name>
    </author>
    <source>
      <id>http://blog.s-d-b.com</id>
      <link href="http://blog.s-d-b.com/category/sympy/feed/" rel="self" type="application/atom+xml"/>
      <link href="http://blog.s-d-b.com" rel="alternate" type="text/html"/>
      <subtitle>CODE | RINSE | REPEAT</subtitle>
      <title>SDB's Blog » SymPy</title>
      <updated>2014-07-29T19:21:02Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-54146973659574488.post-857251037734880412</id>
    <link href="http://geekpy.blogspot.com/feeds/857251037734880412/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc-week-4.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/857251037734880412" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/54146973659574488/posts/default/857251037734880412" rel="self" type="application/atom+xml"/>
    <link href="http://geekpy.blogspot.com/2014/06/gsoc-week-4.html" rel="alternate" type="text/html"/>
    <title>Gsoc Week-4</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;">Week 4 of Gsoc has come to an end this week and I have decided the class structure of Plane which I am going to implement in the following week.<br/><a href="https://github.com/akshayah3/sympy/blob/Plane/sympy/geometry/plane.py">Here</a> is the link to the Plane class I have implemented so far.<br/><br/>A plane can be represented with the help of 3 points or with a point and a normal vector to the desired plane. Regarding which implementation to follow , I had a long discussion with Stefan and decided to go with the latter as 3 points will be redundant in the algorithms I am planning to implement.<br/><br/>Implementation:<br/><span class="sd">&gt;&gt;&gt; a = Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2)</span><br/><span class="sd">&gt;&gt;&gt;a </span><br/><span class="sd">Plane(Point3D(1,  1, 1), [-1, 2, -1])</span><br/><span class="sd">&gt;&gt;&gt; b =Plane(Point3D(1, 1, 1), normal_vector=[1, 3, 5])</span><br/><span class="sd">&gt;&gt;&gt; b </span><br/><span class="sd">Plane(Point3D(1, 1, 1), [1, 3, 5])</span><br/><span class="sd">&gt;&gt;&gt; b.equation()</span><br/><span class="sd"> x + 3*y + 5*z - 9</span><br/><span class="sd"><br/></span>I plan to continue the work on the Plane class this week an will add more methods to it. <br/><br/>Until then cheers!</div></div>
    </content>
    <updated>2014-06-17T13:47:57Z</updated>
    <published>2014-06-17T13:46:00Z</published>
    <author>
      <name>Akshay Narasimha</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/115599165660507030010</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-54146973659574488</id>
      <author>
        <name>Akshay Narasimha</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://geekpy.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/54146973659574488/posts/default" rel="self" type="application/atom+xml"/>
      <link href="http://geekpy.blogspot.com/" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <title>Akshay Narasimha</title>
      <updated>2014-07-22T06:05:07Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://tarzzz.github.io/gsoc14/fourth-week.html</id>
    <link href="http://tarzzz.github.io/gsoc14/fourth-week.html" rel="alternate" type="text/html"/>
    <title>GSoC 14: Fourth Week!</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">{% include JB/setup %}


[ &lt;-Back to posts ](/gsoc14)

Fourth week of GSoC'14 has ended. This week has been no less than an adventure for me. 
A lot of stuff happened in this week, which I will try to elaborate in this post.
Meanwhile, something to be proud about:

<img alt="Screenshot" height="500" src="http://tarzzz.github.io/fourth-week.png" width="800"/>



###Accomplishments:

  - **PyDy Visualizer UI**: I have been working on a refined UI for the visualizer. The critical components
    of the UI are nearly complete, and are working inside the IPython notebook. It is a great accomplishment, as
    I was initially skeptical about binding buttons and events _inside_ the notebook's output cell, all thanks to 
    the new features in IPython2.0. Also apart from the UI, the THREE animations are also working inside the 
    output cell. 

  
###Objectives:
  
For the upcoming week, I am supposed to make the UI elements as well as backend functionality
for changing the visualization objects via GUI itself. The objects changed should be passed
to python side using IPython notebook's Javascript API. 

This implementation will mean a fully functional visualizer in place, which can be plugged 
into the PyDy package for usage.


###Issues:

There are two main issues which need to be addressed right now:

  - The animations are buggy, and are not behaving the way they are expected to behave.
    Probably there is some problem with the object rendering code.

  - The Javascript Libraries(Prototype.js and jQuery) are conflicting with each other, 
    and with those included in native IPython notebook. This is a major issue which needs
    to be addressed, as it leads to unexpected behavior when the visualizations are run 
    inside the notebook, leading to notebook freeze.



Just a week left before the midterm evaluations start, and I have to get a lot before 
the deliverables are met. I really hope that the pending issues are addressed before 
the evaluations, so that I can merge a stable visualizer with the PyDy repository.






[ &lt;-Back to posts ](/gsoc14)</div>
    </summary>
    <updated>2014-06-17T10:00:42Z</updated>
    <source>
      <id>http://tarzzz.github.io/gsoc14</id>
      <author>
        <name>Tarun Gaba</name>
      </author>
      <link href="http://tarzzz.github.io/gsoc14" rel="alternate" type="text/html"/>
      <link href="http://tarzzz.github.io/rss.gsoc.xml" rel="self" type="application/atom+xml"/>
      <subtitle>Posts categorized under GSoC</subtitle>
      <title>Tarun Gaba's blog - GSoC</title>
      <updated>2014-07-01T12:00:50Z</updated>
    </source>
  </entry>

  <entry>
    <id>tag:blogger.com,1999:blog-8847459392628952171.post-2737301790391464158</id>
    <link href="http://blog.sudhanshumishra.in/feeds/2737301790391464158/comments/default" rel="replies" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/06/gsoc14-progress-week-4-finished-medium.html#comment-form" rel="replies" type="text/html"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/2737301790391464158" rel="edit" type="application/atom+xml"/>
    <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/2737301790391464158" rel="self" type="application/atom+xml"/>
    <link href="http://blog.sudhanshumishra.in/2014/06/gsoc14-progress-week-4-finished-medium.html" rel="alternate" type="text/html"/>
    <title>GSoC'14 progress, week 4: finished medium, working on Fermat's principle and Snell's law</title>
    <content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><div dir="ltr" style="text-align: left;"><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">It was a great week! My last to last PR, on enhancing <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">TWave</code>, got merged! I have also finished<code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">Medium</code> and waiting for Sean's comments on it. Here's the link to that PR:</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;"><a href="https://github.com/sympy/sympy/pull/7580" style="color: blue;">https://github.com/sympy/sympy/pull/7580</a></div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">I still have a <em style="">todo</em> in the tests:</div><pre style=""><code style="background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;">m5 = Medium(<span class="hljs-string" style="color: #dd1144;">'m5'</span>, permittivity=<span class="hljs-number" style="color: #009999;">710</span><span class="hljs-variable" style="color: teal;">*10</span><span class="hljs-variable" style="color: teal;">**</span>(-<span class="hljs-number" style="color: #009999;">12</span>)<span class="hljs-variable" style="color: teal;">*s</span><span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">4</span><span class="hljs-variable" style="color: teal;">*A</span><span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">2</span>/(<span class="hljs-keyword" style="color: #333333; font-weight: bold;">m</span><span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">3</span><span class="hljs-variable" style="color: teal;">*kg</span>), n=<span class="hljs-number" style="color: #009999;">1.33</span>)<br/>assert simplify(m5.intrinsic_impedance - <span class="hljs-number" style="color: #009999;">6.24845417765552</span><span class="hljs-variable" style="color: teal;">*kg</span><span class="hljs-variable" style="color: teal;">*m</span><span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">2</span>/(A<span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">2</span><span class="hljs-variable" style="color: teal;">*s</span><span class="hljs-variable" style="color: teal;">**</span><span class="hljs-number" style="color: #009999;">3</span>)) == <span class="hljs-number" style="color: #009999;">0</span><br/><span class="hljs-comment" style="color: #999988; font-style: italic;"># XXX: This is supposed to be zero but it turns out to be</span><br/><span class="hljs-comment" style="color: #999988; font-style: italic;"># very close to zero and not zero.</span><br/><span class="hljs-comment" style="color: #999988; font-style: italic;"># assert simplify(m5.speed - 225407863.157895*m/s) == 0</span><br/></code></pre><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">This <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">m5.speed</code> is equal to <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">225407863.157895*m/s</code> (or maybe very close to it) but, assertion results in a failure.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Similarly in the constructor of the <code style="background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;">Medium</code> inconsistency comes due to slight difference in floating point parameters(permittivity and permeability). I've commented out this part of my code. Maybe Sean will suggest a better way to do it.</div><pre style=""><code style="background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;"><span class="hljs-comment" style="color: #999988; font-style: italic;"># XXX: There's issue with precision. Values may be</span><br/><span class="hljs-comment" style="color: #999988; font-style: italic;"># different slightly.</span><br/><span class="hljs-keyword" style="color: #333333; font-weight: bold;">if</span> permittivity != u<span class="hljs-number" style="color: #009999;">0</span> <span class="hljs-keyword" style="color: #333333; font-weight: bold;">and</span> permittivity != e<span class="hljs-number" style="color: #009999;">0</span>:<br/>    <span class="hljs-keyword" style="color: #333333; font-weight: bold;">if</span> n != c<span class="hljs-variable" style="color: teal;">*sqrt</span>(permittivity<span class="hljs-variable" style="color: teal;">*permeability</span>):<br/>        raise ValueError(<span class="hljs-string" style="color: #dd1144;">"Values are not consistent."</span>)<br/></code></pre><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">As soon as it gets merged, I'll make necessary changes in Fermat's principle and Snell's law part of the code and send a PR to review.</div><div style="color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;">Now I realize that the next two weeks are not going to be a joy ride for me. I must finish major part of geometrical optics as written in my proposal.<br/><br/>That's all for now. Cheers!</div></div></div>
    </content>
    <updated>2014-06-16T19:32:09Z</updated>
    <published>2014-06-16T17:23:00Z</published>
    <category scheme="http://www.blogger.com/atom/ns#" term="gsoc"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="physics"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="sympy"/>
    <author>
      <name>Sudhanshu Mishra</name>
      <email>noreply@blogger.com</email>
      <uri>https://plus.google.com/104813076492254893400</uri>
    </author>
    <source>
      <id>tag:blogger.com,1999:blog-8847459392628952171</id>
      <category term="gsoc"/>
      <category term="sympy"/>
      <category term="physics"/>
      <category term="Android"/>
      <category term="BinPy"/>
      <category term="Ubuntu"/>
      <category term="BIOS"/>
      <category term="CapaStr"/>
      <category term="Circuit Design"/>
      <category term="Cordova"/>
      <category term="Electronics"/>
      <category term="Google"/>
      <category term="JQueryMobile"/>
      <category term="Lenovo"/>
      <category term="Lenovo G580"/>
      <category term="Linux"/>
      <category term="PhoneGap"/>
      <category term="Server"/>
      <category term="Tricks"/>
      <category term="Web"/>
      <category term="git"/>
      <category term="github"/>
      <category term="iOS"/>
      <author>
        <name>Sudhanshu Mishra</name>
        <email>noreply@blogger.com</email>
      </author>
      <link href="http://blog.sudhanshumishra.in/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"/>
      <link href="http://www.blogger.com/feeds/8847459392628952171/posts/default/-/sympy" rel="self" type="application/atom+xml"/>
      <link href="http://blog.sudhanshumishra.in/search/label/sympy" rel="alternate" type="text/html"/>
      <link href="http://pubsubhubbub.appspot.com/" rel="hub" type="text/html"/>
      <subtitle>A blog by Sudhanshu Mishra.</subtitle>
      <title>Shortlog</title>
      <updated>2014-07-28T09:05:46Z</updated>
    </source>
  </entry>

  <entry>
    <id>http://sushant-hiray.in/posts/gsoc/csympy-week4/</id>
    <link href="http://sushant-hiray.in/posts/gsoc/csympy-week4/" rel="alternate" type="text/html"/>
    <title>This Week in CSymPy: #4</title>
    <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml"><p>Week 4 for GSoC just ended and this week I completed implementing the Exponential Module.</p>

<h1 id="progress">Progress</h1>

<p>I started the week by implementing <code>ATan2</code> which was not implemented in the PR of Trignometric Module.
<br/><br/>
<a href="https://github.com/sympy/csympy/pull/189">Pull 189</a> looked into implementing the <code>ATan2</code> functionality. Since to implement <code>ATan2</code> we needed to find whether the signs of numerator and denominators. In case of complex symbolic expressions, we are yet to implement <code>numeric-eval</code> in CSymPy, so in those cases we just
return the object, in cases where we find the <code>arg</code> in lookup table we simplify and give out the result.
<br/>
A more detailed version of the assumptions can be found in this <a href="https://github.com/sympy/csympy/pull/189#issuecomment-45625322">comment</a> in PR. It is also documented in the code.
<br/><br/>
After implementing <code>ATan2</code>, I worked on the Exponential module. <a href="https://github.com/asmeurer">Aaron</a> gave some insights regarding the implementation of the exponential module, specifically he mentioned the fact that </p>

<blockquote>
  <pre><code>It's better to special case E in one place `(pow)` 
than to special case exp everywhere in the code 
that tries to deal with pow objects 
</code></pre>
</blockquote>

<p>So discussing this with <a href="https://github.com/certik">Ondrej</a> we decided to keep <code>exp</code> only as a function which just calls <code>pow(E, x)</code> underneath.
<br/><br/>
The logarithm class was similar to the current implementation of SymPy barring the part involving complex numbers. The exponential module as a whole was implemented in <a href="https://github.com/sympy/csympy/pull/194">pull request</a> which has been merged into master.
<br/><br/>
I have also decided to implement the LambertW function. It wasn’t a part of my original proposal but it seems pretty trivial to implement! Once this is merged into master, the exponential module will cover all major functions implemented by SymPy.</p>

<h1 id="discussions">Discussions</h1>

<p>As usual most of the actual discussions happened on PR, Aaron also gave some insights on gitter! So its good to hangout there as well.</p>

<h1 id="week-highlights">Week Highlights!</h1>

<ul>
  <li>This week <a href="https://github.com/isuruf">@isuruf</a> started helping us out in the Number Theory module which was originally added by Thilina.</li>
  <li>Also I’ve noticed extra traffic in <a href="https://gitter.im/sympy/csympy">CSymPy gitter</a>. A lot of people have started following the conversations there! That is good to see :)</li>
</ul>

<h1 id="the-week-ahead">The Week Ahead</h1>
<ul>
  <li>Add the <code>LambertW</code> class.</li>
  <li>Implement the <code>Hyperbolic Module</code>.</li>
</ul>

<p><br/>
Thats all for now :) Will get back next week!</p></div>
    </summary>
    <updated>2014-06-15T18:20:00Z</updated>
    <source>
      <id>http://sushant-hiray.in</id>
      <author>
        <name>Sushant Hiray</name>
      </author>
      <link href="http://sushant-hiray.in" rel="alternate" type="text/html"/>
      <link href="http://sushant-hiray.in/feed.gsoc.xml" rel="self" type="application/atom+xml"/>
      <title>Sushant Hiray's Blog - Posts tagged sympy/gsoc/csympy</title>
      <updated>2014-07-29T19:20:49Z</updated>
    </source>
  </entry>
</feed>
