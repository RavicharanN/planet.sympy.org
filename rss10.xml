<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planet.sympy.org/">
	<title>Planet SymPy</title>
	<link>http://planet.sympy.org/</link>
	<description>Planet SymPy - http://planet.sympy.org/</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="tag:,2014-06-20:gsoc-week-5.html" />
			<rdf:li rdf:resource="tag:fa.bianp.net,2014-06-20:blog/2014/surrogate-loss-functions-in-machine-learning/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-821534238345280726" />
			<rdf:li rdf:resource="https://hargup.github.io/posts/week-4.html" />
			<rdf:li rdf:resource="http://blog.s-d-b.com/?p=67" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-54146973659574488.post-857251037734880412" />
			<rdf:li rdf:resource="http://tarzzz.github.io/gsoc14/fourth-week.html" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8847459392628952171.post-2737301790391464158" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/gsoc/csympy-week4/" />
			<rdf:li rdf:resource="http://kundankumar185.wordpress.com/?p=57" />
			<rdf:li rdf:resource="http://codesachin.wordpress.com/?p=15" />
			<rdf:li rdf:resource="tag:,2014-06-13:gsoc-week-4.html" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/gsoc/csympy-week3/" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-4292104463720196708" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8847459392628952171.post-1453505657920387618" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-54146973659574488.post-8362916681945518929" />
			<rdf:li rdf:resource="https://hargup.github.io/posts/week-3.html" />
			<rdf:li rdf:resource="http://kundankumar185.wordpress.com/?p=51" />
			<rdf:li rdf:resource="http://blog.s-d-b.com/?p=39" />
			<rdf:li rdf:resource="tag:,2014-06-06:gsoc-week-3.html" />
			<rdf:li rdf:resource="http://codesachin.wordpress.com/?p=13" />
			<rdf:li rdf:resource="http://thilinaatsympy.wordpress.com/?p=326" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-54146973659574488.post-4568350345911213597" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-8460362206940299143" />
			<rdf:li rdf:resource="https://hargup.github.io/posts/week-1-and-week-2.html" />
			<rdf:li rdf:resource="https://hargup.github.io/blog/week-1-and-week-2.html" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8847459392628952171.post-2310284663571326967" />
			<rdf:li rdf:resource="http://blog.s-d-b.com/?p=6" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/gsoc/csympy-week2/" />
			<rdf:li rdf:resource="http://kundankumar185.wordpress.com/?p=11" />
			<rdf:li rdf:resource="http://blog.s-d-b.com/?p=13" />
			<rdf:li rdf:resource="http://codesachin.wordpress.com/?p=11" />
			<rdf:li rdf:resource="tag:,2014-05-30:gsoc-week-2.html" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-54146973659574488.post-8828642408732656832" />
			<rdf:li rdf:resource="http://thilinaatsympy.wordpress.com/?p=302" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-8694557721186369600" />
			<rdf:li rdf:resource="https://hargup.github.io/posts/gsoc-2014-with-sympy.html" />
			<rdf:li rdf:resource="https://hargup.github.io/blog/gsoc-2014-with-sympy.html" />
			<rdf:li rdf:resource="http://codesachin.wordpress.com/?p=6" />
			<rdf:li rdf:resource="http://kundankumar185.wordpress.com/?p=6" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8847459392628952171.post-4814788273799668813" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/gsoc/csympy-week1/" />
			<rdf:li rdf:resource="tag:,2014-05-24:gsoc-week-1.html" />
			<rdf:li rdf:resource="http://tarzzz.github.io/gsoc14/community-bonding.html" />
			<rdf:li rdf:resource="http://tarzzz.github.io/gsoc14/first-post.html" />
			<rdf:li rdf:resource="http://thilinaatsympy.wordpress.com/?p=274" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-501859786358105166" />
			<rdf:li rdf:resource="https://hargup.github.io/blog/blah.html" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-283806077182880539.post-3114660856880190348" />
			<rdf:li rdf:resource="http://kundankumar185.wordpress.com/?p=3" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-8847459392628952171.post-581868626457110552" />
			<rdf:li rdf:resource="tag:blogger.com,1999:blog-54146973659574488.post-8832200362911847122" />
			<rdf:li rdf:resource="tag:fa.bianp.net,2014-04-21:blog/2014/surrogate-loss-functions-in-machine-learning/" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/gsoc/selected-gsoc/" />
			<rdf:li rdf:resource="https://asmeurersympy.wordpress.com/?p=1413" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/getting-started-with-open-source" />
			<rdf:li rdf:resource="http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/y-u-no-use-screen" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/30-days-github-streak" />
			<rdf:li rdf:resource="http://sushant-hiray.in/posts/setting-up-post-receive-hook" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="tag:,2014-06-20:gsoc-week-5.html">
	<title>Jim Crist: GSoC Week 5: Adventures in Profiling</title>
	<link>http://jcrist.github.io/gsoc-week-5.html</link>
	<content:encoded>&lt;p&gt;
&lt;/p&gt;&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This week I've been working on little fixes. Improving the docstrings, a couple interface improvements, finalizing some design decisions. The plan is to finish up this work next week, and then move on to the code generation portion of the project. In it's current state, the linearizer can handle &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt; with ease. I'll probably spend some time hacking away at the &lt;code&gt;matrix_to_linearizer&lt;/code&gt; function as well, but that's not priority.&lt;/p&gt;
&lt;p&gt;The rest of the week was spent profiling and doing some basic optimizations. Being a mechanical engineer, I haven't spent much time learning about numerical methods (although, I am taking this &lt;a href=&quot;http://ocw.mit.edu/courses/mathematics/18-085-computational-science-and-engineering-i-fall-2008/index.htm&quot;&gt;MIT OCW course this summer&lt;/a&gt;). As such, my natural way of solving the system&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
A x = B
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt;, and &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; are matrices, is to take the inverse of &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt;, and multiply it by &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ x = A^{-1} B \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Turns out, this is horribly inefficient. But what is the best way? I had to do some profiling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;creating-benchmark-matrices&quot;&gt;Creating Benchmark Matrices&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For most systems of the form &lt;span class=&quot;math&quot;&gt;\(A x = B\)&lt;/span&gt; in &lt;code&gt;sympy.physics.mechanics&lt;/code&gt;, &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; is a symmetric matrix, and &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt; is a column vector. To do proper benchmarks, I'd need to create random matrices of this form. Looking at some example equations of motion, it can be seen that these mostly consisted of products and sums of terms composed of symbols, trigonometric functions, power functions, &lt;code&gt;sqrt&lt;/code&gt;, and &lt;code&gt;inv&lt;/code&gt;. After some time, I was able to create a couple functions to create these matrices in a composable way:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [1]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Below are some functions to create random matrices of varying sizes.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# These will be used in the benchmarks.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \
    &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define some operations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pow2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pow3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pow4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Defaults&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# OPS is a list of common operations in sympy.physics.mechanics&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pow4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SYMS is a list of symbols that could be found in a matrix&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYMS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a, b, c, d, e, f, g, h, i, j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum_or_prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Return either the sum or product of a vector &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randterms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Creates a list of random terms of size n. Each cell is composed of&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    0 to max_terms, composed of randomly sampled functions from ops, and&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    symbols from syms &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ntermlist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntermlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rsyms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntermlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opsym&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsyms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_or_prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Creates a random matrix of size (m,n). Each cell is composed of&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    1 to max_terms, composed of randomly sampled functions from ops, and&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    symbols from syms &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randterms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;randuppertriag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Creates a random upper triangular matrix of size (n, n). Each cell is&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    composed of 1 to max_terms, composed of randomly sampled functions from&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    ops, and symbols from syms &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nupper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randterms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;symrandmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot; Creates a random symmetric matrix of size (n, n). Each cell is&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    composed of 1 to max_terms, composed of randomly sampled functions from&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    ops, and symbols from syms &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randuppertriag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randterms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_terms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [2]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 3x3 Random Upper Triangular Matrix with max number of terms 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;randuppertriag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[2]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;Matrix([
[0, cos(e),      tan(g)],
[0,      0, f**4*cos(j)],
[0,      0,           0]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [3]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 3x3 Random Matrix with max number of terms 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[3]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;Matrix([
[   b**4, j**2 + tan(c),           d**4],
[    1/d,        cos(f), c**2 + sqrt(d)],
[sqrt(a),        cos(g),           j**4]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [4]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 3x3 Symmetric matrix with max number of terms 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;symrandmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[4]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;Matrix([
[          cos(a), sqrt(g) + sin(b),        tan(f)],
[sqrt(g) + sin(b),   sqrt(i)*cos(j),           1/b],
[          tan(f),              1/b, cos(f)*tan(c)]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;solution-methods&quot;&gt;Solution Methods&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;There are 4 different methods we'll be testing:&lt;/p&gt;
&lt;ol style=&quot;&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LUsolve&lt;/code&gt;:&lt;/strong&gt; Solve the problem with LU decomposition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;LDLsolve&lt;/code&gt;:&lt;/strong&gt; For symmetric matrices, solve with LDL decomposition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;cholesky_solve&lt;/code&gt;:&lt;/strong&gt; For symmetric matrices, solve with cholesky decomposition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;_mat_inv_mul&lt;/code&gt;:&lt;/strong&gt; Solve using LDL decomposition, and an intermediate substitution dictionary. This is what &lt;code&gt;mechanics&lt;/code&gt; is currently using.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After doing some reading up on these, &lt;code&gt;LDLsolve&lt;/code&gt; and &lt;code&gt;cholesky_solve&lt;/code&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Cholesky_decomposition#Computation&quot;&gt;should be the fastest&lt;/a&gt;, as the &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; matrix is symmetric. &lt;code&gt;_mat_inv_mul&lt;/code&gt; also uses LDL decomposition, but it has the overhead of substitution. However, for larger matrices this may yield benefits, as the LDL decomposition is performed only on a matrix of single symbols.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [5]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# This is what sympy.physics.mechanics is currently using.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Copied into this file, to show what it's doing.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_mat_inv_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    Computes A^-1 * B symbolically w/ substitution, where B is not&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    necessarily a vector, but can be a matrix.&lt;/span&gt;

&lt;span class=&quot;sd&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LDLsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;benchmark-constant-matrix-complexity-varying-n&quot;&gt;Benchmark: Constant Matrix Complexity, Varying &lt;em&gt;n&lt;/em&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Here we check increasing matrix dimensions, with a constant complexity of each cell (&lt;code&gt;max_terms = 3&lt;/code&gt;). Only running up to n=6, as computation got excessive after that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [6]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;timeit&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run the benchmark for varying values of n, with max_terms = 3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symrandmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B, _mat_inv_mul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [7]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Plot the results&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Dimension'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Timings for Solution to A*x = b, Varying Dimensions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Dimension'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Timings for Solution to A*x = b,  Varying Dimensions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Observing the above plots it can be seen that &lt;code&gt;_mat_inv_mul&lt;/code&gt; is several orders of magnitude slower than the other three methods, and increases in time at a faster rate. As the underlying algorithm is the same as &lt;code&gt;LDLsolve&lt;/code&gt;, this indicates that the &lt;code&gt;subs&lt;/code&gt; operations are slow, and of larger complexity than &lt;code&gt;LDLsolve&lt;/code&gt;. While the other three methods are all close, &lt;code&gt;LUsolve&lt;/code&gt; is the fastest. This is interesting, because for purely numeric computation (i.e. floating point only), &lt;code&gt;LDLsolve&lt;/code&gt; and &lt;code&gt;cholesky_solve&lt;/code&gt; should be faster for symmetric matrices.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;benchmark-varying-matrix-complexity-constant-n&quot;&gt;Benchmark: Varying Matrix Complexity, Constant &lt;em&gt;n&lt;/em&gt;&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Here we vary the complexity of the matrix (how many terms in each cell), but keep the matrix size constant. I picked &lt;em&gt;n&lt;/em&gt; = 4, because it was big enough to take some time, but not too big to take forever. I'd expect to see the computation time increase with complexity, but not as rapidly as it did with matrix dimension.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [8]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run the benchmark for varying values of max_terms, with n = 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symrandmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B, _mat_inv_mul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [9]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Plot the results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matinv_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Complexity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Timings for Solution to A*x = b, Varying Complexity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Complexity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Timings for Solution to A*x = b, Varying Complexity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Interestingly, it seems that &lt;code&gt;LUsolve&lt;/code&gt;, &lt;code&gt;LDLsolve&lt;/code&gt;, and &lt;code&gt;cholesky_solve&lt;/code&gt; don't increase in time with complexity, while &lt;code&gt;_mat_inv_mul&lt;/code&gt; does. This must be due to the intermediate substitution step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;benchmark-turning-matrix-term-complexity-up-to-11&quot;&gt;Benchmark: Turning Matrix Term Complexity up to 11&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Using the matrices composed by the above methods, all cells are either a sum of terms, or a product. This is close to how the matrices we need to solve look, but it's not a perfect representation. Let's try with a really ugly matrix. We can use the fact that for any matrix &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(A A^T\)&lt;/span&gt; is a symmetric matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [10]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [11]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[11]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;Matrix([
[                                                                                                                                                                                                                                                                                                   (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)**2 + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)**2 + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)**2 + (b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c)**2, (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f)) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c) + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c), (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c), (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c)],
[                                                  (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f)) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c) + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                                                                                                                                                                                                                                                                                                                       (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))**2 + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)**2 + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)**2 + (b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)**2,                                                                                      (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                                                                      (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f)],
[                 (h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                                     (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                                                                                                                                                                                                                                                                                                                       (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)**2 + (b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c)**2 + (c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c)**2 + (c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c)**2,                                                     (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c) + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c)],
[(h**(9/2) + (sqrt(a) + cos(i))*(c**4 + tan(f)) + sin(i)*cos(c) + sin(f)*sin(g)/c)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (c*sin(g) + (sqrt(a) + cos(i))*tan(g) + sin(i)*cos(c) + sqrt(h)*tan(a)/e)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(h)*(b**4 + sqrt(h)) + sqrt(i)*(sqrt(a) + cos(i)) + sin(a)*cos(c) + i**2*sin(g)*sin(j)/c)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4*cos(c) + d**3*(sqrt(a) + cos(i)) + g**2*sqrt(h) + (g**4 + cos(f))*sin(g)/c),                                    (c**2*j**3 + d**3*sin(i) + h**2*tan(g)/f + tan(a)/(e*f))*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (d**3*sin(a) + i**2*j**3*sin(j) + h**2*sqrt(i)/f + (b**4 + sqrt(h))/f)*(sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i)) + (d**3*sin(i) + j**3*sin(f) + h**4/f + h**2*(c**4 + tan(f))/f)*(sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i)) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*d**3*e**4 + d**3*h**2/f + j**3*(g**4 + cos(f)) + g**2/f),                                    (c**4/h + (sin(a) + cos(b))*tan(a)/e + sin(i)/c + tan(g)/c)*(sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e) + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)*(b**2*e**4/c + c**2*(g**4 + cos(f))/h + g**2*(sin(a) + cos(b)) + d**3/c) + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))*(c**2*sin(f)/h + h**4*(sin(a) + cos(b)) + (c**4 + tan(f))/c + sin(i)/c) + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))*(c**2*i**2*sin(j)/h + (b**4 + sqrt(h))*(sin(a) + cos(b)) + sqrt(i)/c + sin(a)/c),                                                                                                                                                                                                                                                                                                                                       (sqrt(b)*c**2*g**2 + sqrt(e)*sin(i) + tan(g)*tan(i) + f**2*tan(a)/e)**2 + (sqrt(b)*g**2*(g**4 + cos(f)) + b**2*e**(9/2) + d**3*tan(i) + f**2*g**2)**2 + (sqrt(b)*g**2*sin(f) + sqrt(e)*sin(i) + f**2*h**4 + (c**4 + tan(f))*tan(i))**2 + (sqrt(b)*g**2*i**2*sin(j) + sqrt(e)*sin(a) + f**2*(b**4 + sqrt(h)) + sqrt(i)*tan(i))**2]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [12]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[12]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;Matrix([
[                 a**3 + d**4 + g**2],
[a**4 + f**2 + sin(g) + tan(e) + 1/d],
[                         f**2 + 1/g],
[                             sin(d)]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Yikes, that's some ugly stuff. Let's see how the various methods fair against that:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [13]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run the benchmarks&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time for LUsolve: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time for LDLsolve: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time for cholesky_solve: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Time for _mat_inv_mul: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'from __main__ import A, B, _mat_inv_mul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Time for LUsolve:  0.0034651060013857204
Time for LDLsolve:  0.009068403000128455
Time for cholesky_solve:  0.006806592999055283
Time for _mat_inv_mul:  144.967967898001

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;From this it can be seen that &lt;code&gt;_mat_inv_mul&lt;/code&gt; is &lt;em&gt;far&lt;/em&gt; slower than the other three methods, even for extremely complex matrices. There doesn't seem to be any benefit to the intermediate &lt;code&gt;subs&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;benchmark-expression-size&quot;&gt;Benchmark: Expression Size&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This isn't a time benchmark. Rather, it's a measurment of the resulting expression's readability. If &lt;code&gt;LUsolve&lt;/code&gt; is faster, but results in a less compact expression than &lt;code&gt;LDLsolve&lt;/code&gt;, then it may be more beneficial to go with the latter. To test this we'll measure the number of operations using the &lt;code&gt;count_ops&lt;/code&gt; method. This is a rough metric of the compactness of the solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [14]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_ops&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Run the benchmark for varying values of n, with max_terms = 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lu_nops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ldl_nops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chol_nops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;matinv_nops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symrandmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randmat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Solve the system&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sol_LU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LUsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sol_LDL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LDLsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sol_chol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cholesky_solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sol_matinv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mat_inv_mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Count the number of ops&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lu_nops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol_LU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ldl_nops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol_LDL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chol_nops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol_chol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;matinv_nops&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_ops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sol_matinv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [15]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Plot the results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matinv_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mat_inv_mul(A, B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Dimensions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Number of Operations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Expression Size for Solution to A*x = b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lu_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LUsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldl_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.LDLsolve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chol_nops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A.cholesky_solve(B)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Matrix Dimensions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Number of Operations'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Expression Size for Solution to A*x = b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Observing the above plots, once again &lt;code&gt;_mat_inv_mul&lt;/code&gt; comes out as the worst (by far). The remaining three barely differ, but &lt;code&gt;LUsolve&lt;/code&gt; results in the most compact expression.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;discussion-of-results&quot;&gt;Discussion of Results&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Overall, &lt;code&gt;_mat_inv_mul&lt;/code&gt; comes out the worst for every benchmark, and &lt;code&gt;LUsolve&lt;/code&gt; comes out the best. Unless I did something wrong with my benchmarks &lt;code&gt;LUsolve&lt;/code&gt; should replace every call to &lt;code&gt;_mat_inv_mul&lt;/code&gt; in &lt;code&gt;mechanics&lt;/code&gt;. It results in a more compact form, and has several order of magnitude faster running speed.&lt;/p&gt;
&lt;p&gt;This surprised me. I would have thought that a more complicated expression would take longer to solve, but as seen in the second benchmark matrix complexity had no effect on running speed for the three solution algorithms (although it did affect the substitution speed for &lt;code&gt;_mat_inv_mul&lt;/code&gt;). I suppose that's why you're always told to profile &lt;em&gt;before&lt;/em&gt; you optimize. Often your intuition is wrong.&lt;/p&gt;
&lt;p&gt;Something else that surprised me was that &lt;code&gt;LDLsolve&lt;/code&gt; and &lt;code&gt;cholesky_solve&lt;/code&gt; had a slower running time than &lt;code&gt;LUsolve&lt;/code&gt;. For numerical symmetric matrices, this shouldn't be the case. I wasn't able to find anything about symbolic calculation of these decompositions, but I assume it should be about the same. Either way, the more general LU decomposition seems to be the fastest.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Did I do something wrong? Disagree with these benchmarks? Let me know in the comments below!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-20T19:00:00+00:00</dc:date>
	<dc:creator>Jim Crist</dc:creator>
</item>
<item rdf:about="tag:fa.bianp.net,2014-06-20:blog/2014/surrogate-loss-functions-in-machine-learning/">
	<title>Fabian Pedregosa: Surrogate Loss Functions in Machine Learning</title>
	<link>http://fa.bianp.net/blog/2014/surrogate-loss-functions-in-machine-learning/</link>
	<content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL; DR&lt;/span&gt; These are some notes on calibration of surrogate loss functions in the context of machine learning. But mostly it is an excuse to post some images I made.&lt;/p&gt;
&lt;p&gt;In the binary-class classification setting we are given $n$ training samples $\{(X_1, Y_1), \ldots, (X_n, Y_n)\}$, where $X_i$ belongs to some sample space $\mathcal{X}$, usually $\mathbb{R}^p$ but for the purpose of this post we can keep i abstract, and $y_i \in \{-1, 1\}$ is an integer representing the class label. &lt;/p&gt;
&lt;p&gt;We are also given a loss function $\ell: \{-1, 1\} \times \{-1, 1\} \to \mathbb{R}$ that measures the error of a given prediction. The value of the loss function $\ell$ at an arbitrary point $(y, \hat{y})$ is interpreted as the cost incurred by predicting $\hat{y}$ when the true label is $y$. In classification this function is often the zero-one loss, that is, $\ell(y, \hat{y})$ is zero when $y = \hat{y}$  and one otherwise.&lt;/p&gt;
&lt;p&gt;The goal is to find a function $h: \mathcal{X} \to [k]$, the classifier, with the smallest expected loss on a new sample. In other words, we seek to find a function $h$ that minimizes the expected $\ell$-risk, given by 
$$
\mathcal{R}_{\ell}(h) = \mathbb{E}_{XY}[\ell(Y, h(X))]
$$&lt;/p&gt;
&lt;p&gt;In theory, we could directly minimize the $\ell$-risk and we would have the optimal classifier, also known as &lt;em&gt;Bayes predictor&lt;/em&gt;. However, there are several problems associated with this approach. One is that the probability distribution of $XY$ is unknown, thus computing the exact expected value is not feasible. It must be approximated by the empirical risk. Another issue is that this quantity is difficult to optimize because the function $\ell$ is discontinuous. Take for example a problem in which $\mathcal{X} = \mathbb{R}^2, k=2$, and we seek to find the linear function $f(X) = \text{sign}(X w), w \in \mathbb{R}^2$  and that minimizes the $\ell$-risk. As a function of the parameter $w$ this function looks something like&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img width=&quot;350px&quot; alt=&quot;loss as function of w&quot; style=&quot;margin-top: 0px;&quot; src=&quot;http://fa.bianp.net/blog/images/2014/loss_01.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This function is discontinuous with large, flat regions and is thus extremely hard to optimize using gradient-based methods. For this reason it is usual to consider a proxy to the loss called a &lt;em&gt;surrogate loss function&lt;/em&gt;. For computational reasons this is usually convex function $\Psi: \mathbb{R}  \to \mathbb{R}_+$. An example of such surrogate loss functions is the &lt;em&gt;hinge loss&lt;/em&gt;, $\Psi(t) = \max(1-t, 0)$, which is the loss used by Support Vector Machines (SVMs). Another example is the logistic loss, $\Psi(t) = 1/(1 + \exp(-t))$, used by the logistic regression model. If we consider the logistic loss, minimizing the $\Psi$-risk, given by $\mathbb{E}_{XY}[\Psi(Y, f(X))]$, of the function $f(X) = X w$ becomes a much more more tractable optimization problem:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;http://fa.bianp.net/blog/images/2014/loss_log.png&quot; style=&quot;margin-top: 0px;&quot; width=&quot;350px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In short, we have replaced the $\ell$-risk which is computationally difficult to optimize with the $\Psi$-risk which has more advantageous properties. A natural questions to ask is how much have we lost by this change. The property of whether minimizing the $\Psi$-risk leads to a function that also minimizes the $\ell$-risk is often referred to as &lt;em&gt;consistency&lt;/em&gt; or &lt;em&gt;calibration&lt;/em&gt;. For a more formal definition see [&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;] and [&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:2&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;]. This property will depend on the surrogate function $\Psi$: for some functions $\Psi$ it will be verified the consistency property and for some not. One of the most useful characterizations was given in [&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;] and states that if $\Psi$ is convex then it is consistent if and only if it is differentiable at zero and $\Psi'(0) &amp;lt; 0$. This includes most of the commonly used surrogate loss functions, including hinge, logistic regression and Huber loss functions.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;http://fa.bianp.net/blog/images/2014/loss_functions.png&quot; style=&quot;margin-top: 0px;&quot; width=&quot;550px&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;P. L. Bartlett, M. I. Jordan, and J. D. McAuliffe, âConvexity , Classification , and Risk Bounds,â J. Am. Stat. Assoc., pp. 1â36, 2003.Â &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:1&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;A. Tewari and P. L. Bartlett, âOn the Consistency of Multiclass Classification Methods,â J. Mach. Learn. Res., vol. 8, pp. 1007â1025, 2007.Â &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:2&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-19T22:00:00+00:00</dc:date>
	<dc:creator>Fabian Pedregosa</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-821534238345280726">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/06/in-this-week-i-worked-on-formal-power.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;In this week I worked on Formal Power Series and getting my two PRs merged.&lt;br /&gt;&lt;br /&gt;While getting my PRs related to asymptotic expansion merged, I learned about how important documentation is and the little details that matter. I made some very silly mistakes causing delay in getting the PRs merged.&lt;br /&gt;&lt;br /&gt;Formal Power Series:&lt;br /&gt;I made some good progress regarding FPS this week. As I said in the earlier post, I decided to go with lazy recursion to implement infinite power series.&lt;br /&gt;In this a series is represented as a tuple of head and tail where head is the first term of the series while tail is rest of the infinite series.&lt;br /&gt;Algorithms to do addition, subtraction, multiplication are very simple if we use recursion.&lt;br /&gt;E.g.:-&lt;br /&gt;series1 = (head1, tail1)&lt;br /&gt;series2 = (head2, tail2)&lt;br /&gt;Then,&lt;br /&gt;- series1 + series2 = (head1+head2, tail1+tail2)&lt;br /&gt;- series1 * series2 = (head1*head2, head1*tail2 + head2*tail1 + tail1*tail2)&lt;br /&gt;&lt;br /&gt;Similarly other operations like division, inversion, composition can be written.&lt;br /&gt;&lt;br /&gt;Along with this, I also finished implementing simpleDE, DEtoRE and somewhat solveRE methods. These methods are used to find the generator for a given function in x.&lt;br /&gt;- simpleDE() converts function into a simple differential equation. This involved finding the number of rationally independent terms among a set of expressions. I coded a very inefficient solution with repeatedly dividing each term by other and checking if there quotient is a rational function. This is O(n**2) approach. There might be a better approach.&lt;br /&gt;- DEtoRE() converts differential equation to a recurrence equation. This is a straightforward algorithm with simple substitutions.&lt;br /&gt;&lt;br /&gt;Next week:&lt;br /&gt;Since the operations on infinite series are a recursive process, I guess there is a problem of memory management with my code. Operations like division, multiplication are highly recursive creating Stream class numerous times. Upon giving high value of &quot;n&quot; while printing terms, it gives a &quot;maximum recursion depth&quot; error.&lt;br /&gt;I will work on this and add more operations to Stream class.&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-19T16:40:24+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="https://hargup.github.io/posts/week-4.html">
	<title>Harsh Gupta: week 4</title>
	<link>https://hargup.github.io/posts/week-4.html</link>
	<content:encoded>&lt;div&gt;&lt;h3&gt;Intersections of Infinitely indexed sets&lt;/h3&gt;
&lt;p&gt;This week I implemented a method to do intersection of imagesets using the
solutions of Diophantine equations at &lt;a href=&quot;https://github.com/sympy/sympy/pull/7587&quot;&gt;PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Say you have
to find the intersection of sets &lt;code&gt;2*n| n in Integers&lt;/code&gt; and &lt;code&gt;3*m| m in Integers&lt;/code&gt;.
The intersection of these sets is the set of the common values in the two sets,
which in this case is equivalent to the values of &lt;code&gt;n&lt;/code&gt; for which the equation &lt;code&gt;2*n - 3*m&lt;/code&gt; has
some integral solution in &lt;code&gt;m&lt;/code&gt;. Or the values of &lt;code&gt;m&lt;/code&gt; for which the &lt;code&gt;2*n - 3*m&lt;/code&gt;
has some integral solution in &lt;code&gt;n&lt;/code&gt;. Diophantine equations are equations for
which only integral solutions are searched for.
The Diophantine module was written by
&lt;a href=&quot;https://github.com/thilinarmtb&quot;&gt;Thilina&lt;/a&gt; as his GSoC project last year.
It gives the parametric solution for such equation.&lt;/p&gt;
&lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diophantine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Solution is sorted according to alphabetic order of the variables involved.
So the value of LHS (&lt;code&gt;2*n&lt;/code&gt;) for which the equation is &lt;code&gt;2*(-3*t)&lt;/code&gt; that is &lt;code&gt;-6*t&lt;/code&gt;
and it is the intersection of the sets described above &lt;code&gt;-6*t| t in Integers&lt;/code&gt;.
Since &lt;code&gt;-6*t| t in Integers&lt;/code&gt; is same as &lt;code&gt;6*t| t in Integers&lt;/code&gt; I also wrote some
simplification rules for the imagesets with Integers as baseset.&lt;/p&gt;
&lt;h3&gt;Sets for Invert Function&lt;/h3&gt;
&lt;p&gt;The sets module turned out to be better than I expected. I had a perception
that substitutions doesn't work properly with sets and I have even opened an
&lt;a href=&quot;https://github.com/sympy/sympy/issues/7483&quot;&gt;issue&lt;/a&gt; for that but it turned out
I hadn't looked closely enough. It worked well for the free variables and it
didn't worked for the things it shouldn't work i.e., the bound variables in the
imagesets.&lt;/p&gt;
&lt;p&gt;Using sets simplified the code. All the list comprehensions like this
&lt;code&gt;[i.subs(symbol, symbol/g) for i in _invert(h, symbol)]&lt;/code&gt; were converted to
simple substitutions for sets and other sets operations.  &lt;code&gt;_invert(h,
symbol).subs(symbol, symbol/g)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just by changing the output of invert to sets, then by adding the inverse of
trigonometric function and writing the code to rewrite then as tan I was able
to return all the solutions of the equations like &lt;code&gt;cos(x) + sin(x) == 0&lt;/code&gt; it
turned to out to easier than I thought. Using sets as output makes thinking
about the mathematics of the solvers much more easier and the code comes
out to be pretty natural. Now when we can see the results I can surely say
there can be no better output for solvers than sets.&lt;/p&gt;
&lt;p&gt;This week I'll study LambertW function and then code additional techniques to
solve real equations. I'll also try to figure out techniques to perform Union
on infinitely indexed sets.&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-18T05:59:01+00:00</dc:date>
</item>
<item rdf:about="http://blog.s-d-b.com/?p=67">
	<title>Soumya Dipta Biswas: GSoC 2014: Week 4</title>
	<link>http://blog.s-d-b.com/gsoc-2014-week-4/</link>
	<content:encoded>&lt;p&gt;Hello Everyone,&lt;/p&gt;
&lt;p&gt;The majority of work this week was finishing up my previous work and creating the architecture for the First Order Logic module. Consequently, this post is concerned with First Order Logic (FoL) and is intended mostly for those who are not familiar with the concepts. If you find yourself comfortable with writing formulas in FoL then you can safely skip this post.&lt;/p&gt;
&lt;p&gt;Before we go on to the discussion about First Order Logic, one very interesting topic that came up this week was the idea of an Atom. What is an atom for propositional logic? The classic answer amounts to anything that cannot be broken down further to yield simpler terms. Analogously, let us define a &lt;code&gt;literal&lt;/code&gt; to mean any atom or its negation. So, &lt;code&gt;A&lt;/code&gt; is a literal (and so is &lt;code&gt;~A&lt;/code&gt;). How about &lt;code&gt;A &amp;gt; B&lt;/code&gt;. Without bordering on any ideas of higher order logic, let us tweak the definition of atom to mean anything that cannot be broken down &lt;em&gt;using propositional logic&lt;/em&gt; to yield simpler terms. So, how does this definition change things? It means we can treat any expression that propositional logic canât break down as a black box with the assumption that it will yield a boolean value once evaluated. Analogously, a literal is now any expression which cannot be simplified (in propositional logic) or its negation. This definition gives a lot more freedom and power to the idea of formulas. Ofcourse, one needs to keep in mind that it is compulsory for these &lt;em&gt;literals&lt;/em&gt; to yield a boolean once evaluated (typically before propositional formula evaluation methods are called on the formula).&lt;/p&gt;
&lt;p&gt;Ok, with that, we finish the first part our Propositional Logic post series. The future posts will be associated with First Order Logic before coming back to SAT (in propositional formula). For the remainder of the series the words First Order Logic and Predicate Logic will be used interchangeably (while there is some &lt;a href=&quot;http://http://en.wikipedia.org/wiki/Predicate_logic&quot; title=&quot;Predicate Logic&quot;&gt;difference&lt;/a&gt; between the two, we will ignore them. Finally beginning the actual discussion about FoL, let us start with some definitions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Constant:&lt;/strong&gt; Any object of the universe whose value remains the same throughout the expression. e.g. john, 1, computer, socrates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variable:&lt;/strong&gt; An object which can take up any value from the domain. e.g. X, Y&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function:&lt;/strong&gt; A mapping of n-ary terms (see below) to a term. e.g. F(X, G(a, Y)), teacher(teacher(aristotle))&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Term:&lt;/strong&gt; Any Constant, Variable or Function is called a Term.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predicate:&lt;/strong&gt; A mapping of n-ary terms to a boolean value. e.g. IsTeacher(Socrates, plato)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quantifier:&lt;/strong&gt; Quantifiers assert a particular property with respect to a bound variable. Q(X, IsTeacher(X, alexander)) Here Q is some quantifier (see below) and X is the bound variable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ForAll (â)&lt;/strong&gt;: Also known as Universal Quantifier, this asserts that for each value of the bound variable the expression holds True&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exists (â)&lt;/strong&gt;: Also known as Existential Quantifier, this asserts that for atleast one of the values of the bound variable the expression holds True&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above description is far from complete. Below are some more examples. For these examples assume that the program is intelligent enough to know the answer.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;# All constants are in lowercase
# All variables are in uppercase
# All functions starts with a lowercase but subsequent words start with an uppercase
# All predicates follow camel casing

# teacher(person) is a function which maps a person to his teacher
&amp;gt;&amp;gt;&amp;gt; teacher(alexander)
aristotle
&amp;gt;&amp;gt;&amp;gt; teacher(teacher(aristotle))
'Socrates'

# f(X) = 2X + 3y + 1
&amp;gt;&amp;gt;&amp;gt; f(X, Y)
Add(Mul(2, X), Mul(3, Y), 1)

# IsTeacher(a, b) is a predicate which returns if a is the teacher of b
&amp;gt;&amp;gt;&amp;gt; IsTeacher(alexander, plato)
False

# Assume that the following properties hold for the relationship teacher
# If A is the teacher of B, and B is the teacher of C, then A is the teacher of C (Transitivity)
# A is always the teacher of A (Identity)
&amp;gt;&amp;gt;&amp;gt; domain = [socrates, plato, aristotle, alexander]
&amp;gt;&amp;gt;&amp;gt; ForAll(X, IsTeacher(X, alexander))
True
&amp;gt;&amp;gt;&amp;gt; Exists(X, IsWarrior(X))
True
&amp;gt;&amp;gt;&amp;gt; ForAll(X, IsWarrior(X))
False
&amp;gt;&amp;gt;&amp;gt; Exists(X, InventedCalculus(X))
False

# f(x, y) = x + 2y
# g(x, y) = 2x + y
&amp;gt;&amp;gt;&amp;gt; ForAll(X, ForAll(Y, Greater(f(X, Y), g(X, Y)))
False
&amp;gt;&amp;gt;&amp;gt; Exists(X, Exists(Y, Greater(f(X, Y), g(X, Y)))
True&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I hope the above examples make the definitions clearer. However SymPy is a symbolic library (rather than a numeric one). The implication of the same is that we are much less concerned about the value of the expression than the expression itself. For example, we will be predominantly dealing with functions, variables and predicates without being bothered by their (real life) values. What follows next are examples of conversion of natural language sentences to First Order Logic and their representation in SymPy. One would notice that we have only dealt with the new FoL concepts in the examples above and completely ignored the traditional propositional operators. Using the idea of Atom described at the beginning of this post, if we think of every Predicate (and Quantifier) as an Atom, then we can use every idea of propositional logic here. The examples below describe the complete idea.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;# All dolphins all mammals
&amp;gt;&amp;gt;&amp;gt; X = symbols('X')
&amp;gt;&amp;gt;&amp;gt; Dolphin = Predicate('Dolphin')
&amp;gt;&amp;gt;&amp;gt; Mammal = Predicate('Mammal')
&amp;gt;&amp;gt;&amp;gt; ForAll(X, Dolphin(X) &amp;gt;&amp;gt; Mammal(X))
ForAll((X), Implies(Dolphin(X), Mammal(X)))


&amp;gt;&amp;gt;&amp;gt; X, T = symbols('X T')
&amp;gt;&amp;gt;&amp;gt; Person = Predicate('Person')
&amp;gt;&amp;gt;&amp;gt; Time = Predicate('Time')
&amp;gt;&amp;gt;&amp;gt; CanFool = Predicate('CanFool')

# You can fool some of the people all of the time
&amp;gt;&amp;gt;&amp;gt; Exists(X, ForAll(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
Exists((X), ForAll(T, Implies(And(Person(X), Time(T)), CanFool(X, T))))

# You can fool all of the people some of the time
&amp;gt;&amp;gt;&amp;gt; ForAll(X, Exists(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
ForAll((X), Exists(T, Implies(And(Person(X), Time(T)), CanFool(X, T))))

# You cannot fool all of the people all of the time
&amp;gt;&amp;gt;&amp;gt; ~ForAll(X, ForAll(T, (Person(X) &amp;amp; Time(T)) &amp;gt;&amp;gt; CanFool(X, T)))
Not(ForAll((X,T), Implies(And(Person(X), Time(T)), CanFool(X, T))))&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I hope this should provide you with some basic idea about First Order Logic. I will be updating this post with ideas related to Interpretation/Model. Stay tuned.&lt;/p&gt;
&lt;p&gt;Aloha!!!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-17T20:54:50+00:00</dc:date>
	<dc:creator>SD</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-54146973659574488.post-857251037734880412">
	<title>Akshay Narasimha: Gsoc Week-4</title>
	<link>http://geekpy.blogspot.com/2014/06/gsoc-week-4.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Week 4 of Gsoc has come to an end this week and I have decided the class structure of Plane which I am going to implement in the following week.&lt;br /&gt;&lt;a href=&quot;https://github.com/akshayah3/sympy/blob/Plane/sympy/geometry/plane.py&quot;&gt;Here&lt;/a&gt; is the link to the Plane class I have implemented so far.&lt;br /&gt;&lt;br /&gt;A plane can be represented with the help of 3 points or with a point and a normal vector to the desired plane. Regarding which implementation to follow , I had a long discussion with Stefan and decided to go with the latter as 3 points will be redundant in the algorithms I am planning to implement.&lt;br /&gt;&lt;br /&gt;Implementation:&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a = Plane(Point3D(1, 1, 1), Point3D(2, 3, 4), Point3D(2, 2, 2)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;gt;&amp;gt;&amp;gt;a &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;Plane(Point3D(1,Â  1, 1), [-1, 2, -1])&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b =Plane(Point3D(1, 1, 1), normal_vector=[1, 3, 5])&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;Plane(Point3D(1, 1, 1), [1, 3, 5])&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;gt;&amp;gt;&amp;gt; b.equation()&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;Â x + 3*y + 5*z - 9&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&lt;br /&gt;&lt;/span&gt;I plan to continue the work on the Plane class this week an will add more methods to it. &lt;br /&gt;&lt;br /&gt;Until then cheers!&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-17T13:47:57+00:00</dc:date>
	<dc:creator>Akshay Narasimha</dc:creator>
</item>
<item rdf:about="http://tarzzz.github.io/gsoc14/fourth-week.html">
	<title>Tarun Gaba: GSoC 14: Fourth Week!</title>
	<link>http://tarzzz.github.io/gsoc14/fourth-week.html</link>
	<content:encoded>{% include JB/setup %}


[ &amp;lt;-Back to posts ](/gsoc14)

Fourth week of GSoC'14 has ended. This week has been no less than an adventure for me. 
A lot of stuff happened in this week, which I will try to elaborate in this post.
Meanwhile, something to be proud about:

&lt;img src=&quot;http://tarzzz.github.io/fourth-week.png&quot; alt=&quot;Screenshot&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;



###Accomplishments:

  - **PyDy Visualizer UI**: I have been working on a refined UI for the visualizer. The critical components
    of the UI are nearly complete, and are working inside the IPython notebook. It is a great accomplishment, as
    I was initially skeptical about binding buttons and events _inside_ the notebook's output cell, all thanks to 
    the new features in IPython2.0. Also apart from the UI, the THREE animations are also working inside the 
    output cell. 

  
###Objectives:
  
For the upcoming week, I am supposed to make the UI elements as well as backend functionality
for changing the visualization objects via GUI itself. The objects changed should be passed
to python side using IPython notebook's Javascript API. 

This implementation will mean a fully functional visualizer in place, which can be plugged 
into the PyDy package for usage.


###Issues:

There are two main issues which need to be addressed right now:

  - The animations are buggy, and are not behaving the way they are expected to behave.
    Probably there is some problem with the object rendering code.

  - The Javascript Libraries(Prototype.js and jQuery) are conflicting with each other, 
    and with those included in native IPython notebook. This is a major issue which needs
    to be addressed, as it leads to unexpected behavior when the visualizations are run 
    inside the notebook, leading to notebook freeze.



Just a week left before the midterm evaluations start, and I have to get a lot before 
the deliverables are met. I really hope that the pending issues are addressed before 
the evaluations, so that I can merge a stable visualizer with the PyDy repository.






[ &amp;lt;-Back to posts ](/gsoc14)</content:encoded>
	<dc:date>2014-06-17T10:00:42+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8847459392628952171.post-2737301790391464158">
	<title>Sudhanshu Mishra: GSoC'14 progress, week 4: finished medium, working on Fermat's principle and Snell's law</title>
	<link>http://lifelesscode.blogspot.com/2014/06/gsoc14-progress-week-4-finished-medium.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;It was a great week! My last to last PR, on enhancingÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;TWave&lt;/code&gt;, got merged! I have also finished&lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Medium&lt;/code&gt;Â and waiting for Sean's comments on it. Here's the link to that PR:&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7580&quot;&gt;https://github.com/sympy/sympy/pull/7580&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I still have aÂ &lt;em style=&quot;&quot;&gt;todo&lt;/em&gt;Â in the tests:&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;&quot;&gt;m5 = Medium(&lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;'m5'&lt;/span&gt;, permittivity=&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;710&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*10&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;(-&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;)&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*s&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*A&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/(&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;m&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*kg&lt;/span&gt;), n=&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;1.33&lt;/span&gt;)&lt;br /&gt;assert simplify(m5.intrinsic_impedance - &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;6.24845417765552&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*kg&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*m&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;/(A&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*s&lt;/span&gt;&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;)) == &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #999988; font-style: italic;&quot; class=&quot;hljs-comment&quot;&gt;# XXX: This is supposed to be zero but it turns out to be&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #999988; font-style: italic;&quot; class=&quot;hljs-comment&quot;&gt;# very close to zero and not zero.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #999988; font-style: italic;&quot; class=&quot;hljs-comment&quot;&gt;# assert simplify(m5.speed - 225407863.157895*m/s) == 0&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;ThisÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;m5.speed&lt;/code&gt;Â is equal toÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;225407863.157895*m/s&lt;/code&gt;Â (or maybe very close to it) but, assertion results in a failure.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Similarly in the constructor of theÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Medium&lt;/code&gt;Â inconsistency comes due to slight difference in floating point parameters(permittivity and permeability). I've commented out this part of my code. Maybe Sean will suggest a better way to do it.&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #999988; font-style: italic;&quot; class=&quot;hljs-comment&quot;&gt;# XXX: There's issue with precision. Values may be&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #999988; font-style: italic;&quot; class=&quot;hljs-comment&quot;&gt;# different slightly.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; permittivity != u&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; permittivity != e&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; n != c&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*sqrt&lt;/span&gt;(permittivity&lt;span style=&quot;color: teal;&quot; class=&quot;hljs-variable&quot;&gt;*permeability&lt;/span&gt;):&lt;br /&gt;        raise ValueError(&lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;&quot;Values are not consistent.&quot;&lt;/span&gt;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;As soon as it gets merged, I'll make necessary changes in Fermat's principle and Snell's law part of the code and send a PR to review.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Now I realize that the next two weeks are not going to be a joy ride for me. I must finish major part of geometrical optics as written in my proposal.&lt;br /&gt;&lt;br /&gt;That's all for now. Cheers!&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-16T19:32:09+00:00</dc:date>
	<dc:creator>Sudhanshu Mishra</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/gsoc/csympy-week4/">
	<title>Sushant Hiray: This Week in CSymPy: #4</title>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week4/</link>
	<content:encoded>&lt;p&gt;Week 4 for GSoC just ended and this week I completed implementing the Exponential Module.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started the week by implementing &lt;code&gt;ATan2&lt;/code&gt; which was not implemented in the PR of Trignometric Module.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/sympy/csympy/pull/189&quot;&gt;Pull 189&lt;/a&gt; looked into implementing the &lt;code&gt;ATan2&lt;/code&gt; functionality. Since to implement &lt;code&gt;ATan2&lt;/code&gt; we needed to find whether the signs of numerator and denominators. In case of complex symbolic expressions, we are yet to implement &lt;code&gt;numeric-eval&lt;/code&gt; in CSymPy, so in those cases we just
return the object, in cases where we find the &lt;code&gt;arg&lt;/code&gt; in lookup table we simplify and give out the result.
&lt;br /&gt;
A more detailed version of the assumptions can be found in this &lt;a href=&quot;https://github.com/sympy/csympy/pull/189#issuecomment-45625322&quot;&gt;comment&lt;/a&gt; in PR. It is also documented in the code.
&lt;br /&gt;&lt;br /&gt;
After implementing &lt;code&gt;ATan2&lt;/code&gt;, I worked on the Exponential module. &lt;a href=&quot;https://github.com/asmeurer&quot;&gt;Aaron&lt;/a&gt; gave some insights regarding the implementation of the exponential module, specifically he mentioned the fact that &lt;/p&gt;

&lt;blockquote&gt;
  &lt;pre&gt;&lt;code&gt;It's better to special case E in one place `(pow)` 
than to special case exp everywhere in the code 
that tries to deal with pow objects 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;So discussing this with &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt; we decided to keep &lt;code&gt;exp&lt;/code&gt; only as a function which just calls &lt;code&gt;pow(E, x)&lt;/code&gt; underneath.
&lt;br /&gt;&lt;br /&gt;
The logarithm class was similar to the current implementation of SymPy barring the part involving complex numbers. The exponential module as a whole was implemented in &lt;a href=&quot;https://github.com/sympy/csympy/pull/194&quot;&gt;pull request&lt;/a&gt; which has been merged into master.
&lt;br /&gt;&lt;br /&gt;
I have also decided to implement the LambertW function. It wasnât a part of my original proposal but it seems pretty trivial to implement! Once this is merged into master, the exponential module will cover all major functions implemented by SymPy.&lt;/p&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;As usual most of the actual discussions happened on PR, Aaron also gave some insights on gitter! So its good to hangout there as well.&lt;/p&gt;

&lt;h1 id=&quot;week-highlights&quot;&gt;Week Highlights!&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;This week &lt;a href=&quot;https://github.com/isuruf&quot;&gt;@isuruf&lt;/a&gt; started helping us out in the Number Theory module which was originally added by Thilina.&lt;/li&gt;
  &lt;li&gt;Also Iâve noticed extra traffic in &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;CSymPy gitter&lt;/a&gt;. A lot of people have started following the conversations there! That is good to see :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Add the &lt;code&gt;LambertW&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;Implement the &lt;code&gt;Hyperbolic Module&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-15T18:20:00+00:00</dc:date>
</item>
<item rdf:about="http://kundankumar185.wordpress.com/?p=57">
	<title>Kundan Kumar: GSoC week 4: Implemented system of three linear equation of first order</title>
	<link>http://kundankumar185.wordpress.com/2014/06/15/gsoc-week-4-implemented-system-of-three-linear-equation-of-first-order/</link>
	<content:encoded>&lt;p&gt;I will summarize the work completed until now since beginning of first week. These included&lt;/p&gt;
&lt;p&gt;&amp;gt; Implementing classify_sysode to classify all type of equations on the basis of linearity, number of equations, order of equations.&lt;/p&gt;
&lt;p&gt;&amp;gt; Implementing system of two linear equations of first order which includes seven type of equation of various forms.&lt;/p&gt;
&lt;p&gt;&amp;gt; Implementing system of two linear equations of second order which has eleven type of equation.&lt;/p&gt;
&lt;p&gt;&amp;gt; Implementing system of three linear equations of third order which has five type of equation both of constant coefficient and variable coefficients.&lt;/p&gt;
&lt;p&gt;&amp;gt; Implementing homogeneous system of n linear equations of first order of constant coefficients.&lt;/p&gt;
&lt;p&gt;Those were the work completed till now of which last week work was on implemention of system of three linear equations of 1st order and homogeneous system of n equations. I am currently working on implementing system of two and three nonlinear system of equations of first order and aiming to complete it by next week. Its been a good progress till now and hope to work likely in coming weeks &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:)&quot;&gt;:)&lt;/span&gt; .&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/57/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/57/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=57&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-15T09:26:39+00:00</dc:date>
	<dc:creator>Kundan</dc:creator>
</item>
<item rdf:about="http://codesachin.wordpress.com/?p=15">
	<title>Sachin Joglekar: GSoC Week 4: Vector framework done</title>
	<link>http://codesachin.wordpress.com/2014/06/15/gsoc-week-4-vector-framework-done/</link>
	<content:encoded>&lt;p&gt;This has been a tricky week. Not hectic, but rather tricky. Most of it was spent fixing the innumerable bugs that I encountered while polishing and âpackagingâ the basic version of the new vector module â itâs in a PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/7566&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I cannot stress how helpful the pre-written unit and example tests were, in making things clearer and pointing out the many bugs in the first version of my code. In some cases, I spent quite some (read: &lt;em&gt;a lot&lt;/em&gt;) of time fixing the issues, while in some, I just redid the code/API to work around the intricacies of the SymPy core. Its quite easy to get lost in there.&lt;/p&gt;
&lt;p&gt;Currently, the following functionalities are supported &lt;em&gt;stably&lt;/em&gt; by my code(with appropriate error handling wherever required)-&lt;/p&gt;
&lt;p&gt;1. All basic vector operations-&lt;/p&gt;
&lt;p&gt;a) Addition/Subtraction&lt;/p&gt;
&lt;p&gt;b) Multiplication/Division by scalars&lt;/p&gt;
&lt;p&gt;c) Dot/Cross product&lt;/p&gt;
&lt;p&gt;2. Including coordinate variables (spatial variables) in vectorial expressions.&lt;/p&gt;
&lt;p&gt;3. All basic use cases of the Del operator in vector/scalar expressions, including-&lt;/p&gt;
&lt;p&gt;a) Gradient&lt;/p&gt;
&lt;p&gt;b) Divergence&lt;/p&gt;
&lt;p&gt;c) Curl&lt;/p&gt;
&lt;p&gt;d) Directional derivative&lt;/p&gt;
&lt;p&gt;I know it seems a little low for something thatâs based on code which is already a part of SymPy, but the whole point was to base it directly upon the SymPy core â for users not acquainted with the physics module. Moreover, with some rudimentary timing techniques, I found that on an average, the new module was able to do a set of most-basic vector operations (add, sub, dot, cross) approximately 3-4 times &lt;em&gt;faster &lt;/em&gt;than sympy.physics.vector. But I guess itâs too early to judge now, since the new module has no overhead of coordinate systems.&lt;/p&gt;
&lt;p&gt;I can say I am successful (hopefully all the tests on the PR should pass soon) in supporting all the functionality mentioned above, in a stable implementation â though I am still waiting for Jason and the SymPy people to review the PR. I hope it gets in soon.&lt;/p&gt;
&lt;p&gt;The next step would be to start working on a new branch that would include the classes for coordinate systems and stationary points in 3D space (cartesian system). This is going to be tricky â the code for these classes in &lt;em&gt;sympy.physics.vector&lt;/em&gt; is enough to prove that. As usual, the first step would be to write out the âexpected-to-succeedâ unit and example tests. Hopefully, by that time, I would get sufficient feedback on the current PR too. But since the underlying vector framework is working well, I wouldnât have to worry about bugs in that area â I can focus purely on the one-level-up code for multiple coordinate systems.&lt;/p&gt;
&lt;p&gt;Cheers to a fun week! Hopefully I will be reporting just as much of progress next week too. Have a great week ahead &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Â &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/15/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/15/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=15&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-14T20:15:58+00:00</dc:date>
	<dc:creator>srjoglekar246</dc:creator>
</item>
<item rdf:about="tag:,2014-06-13:gsoc-week-4.html">
	<title>Jim Crist: GSoC Week 4: Linearizing Lagranges Equations</title>
	<link>http://jcrist.github.io/gsoc-week-4.html</link>
	<content:encoded>&lt;p&gt;As of last week the &lt;code&gt;Linearizer&lt;/code&gt; class implementing the general form discussed
in Luke and Gilbert's paper was completed. The methods contained for
linearization work for any system that can be expressed by any combination of
the following:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
f_{c}(q, t) &amp;amp;= 0_{l \times 1} \\
f_{v}(q, u, t) &amp;amp;= 0_{m \times 1} \\
f_{a}(q, \dot{q}, u, \dot{u}, t) &amp;amp;= 0_{m \times 1} \\
f_{0}(q, \dot{q}, t) + f_{1}(q, u, t) &amp;amp;= 0_{n \times 1} \\
f_{2}(q, \dot{u}, t) + f_{3}(q, \dot{q}, u, r, t) &amp;amp;= 0_{(o-m) \times 1}
\end{aligned}&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;\begin{aligned}
q, \dot{q} &amp;amp; \in \mathbb{R}^n \\
u, \dot{u} &amp;amp; \in \mathbb{R}^o \\
r &amp;amp; \in \mathbb{R}^s 
\end{aligned}&lt;/p&gt;
&lt;p&gt;This works for most systems (it was derived with kanes method in mind
specifically). However, systems expressed using lagranges method can't
be brought into this form.&lt;/p&gt;
&lt;p&gt;This week I spent some time rederiving the general form to make it fit
lagranges method, as well as kanes method. I plan to write up a formal
paper expressing the derivation as a reference and documentation of the
class; here I'll just give a brief overview.&lt;/p&gt;
&lt;p&gt;In general, Lagrange's Method expresses the system using 3 equations:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
m_{c}(q, t) \dot{q} + f_{c}(q, t) &amp;amp;= 0_{m \times 1}\\
m_{dc}(\dot{q}, q, t) \ddot{q} + f_{dc}(\dot{q}, q, t) &amp;amp;= 0_{m \times 1}\\
m_{d}(\dot{q}, q, t) \ddot{q} + \Lambda_c(q, t)
\lambda + f_{d}(\dot{q}, q, r, t) &amp;amp;= 0_{n \times 1}\\
\end{aligned}&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;\begin{aligned}
q, \dot{q}, \ddot{q} &amp;amp; \in \mathbb{R}^n \\
r &amp;amp; \in \mathbb{R}^s \\
\lambda &amp;amp; \in \mathbb{R}^m
\end{aligned}&lt;/p&gt;
&lt;p&gt;In this case, the first equation encompass the time differentiated holonomic
constraints, as well as the nonholonomic constraints. The second equation
is then the time derivative of the first equation. The third equation
represents the dynamics of the system, as formed by the lagrangian. The
lagrange multipliers ($\lambda$) enforce these constraints.&lt;/p&gt;
&lt;p&gt;With some rearranging of the above, they can be merged with the previous
general form for Kane's Method, forming a set of equations that &lt;em&gt;should&lt;/em&gt; be
able to contain most equations of motion:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
f_{c}(q, t) &amp;amp;= 0_{l \times 1} \\
f_{v}(q, u, t) &amp;amp;= 0_{m \times 1} \\
f_{a}(q, \dot{q}, u, \dot{u}, t) &amp;amp;= 0_{m \times 1} \\
f_{0}(q, \dot{q}, t) + f_{1}(q, u, t) &amp;amp;= 0_{n \times 1} \\
f_{2}(q, u, \dot{u}, t) + f_{3}(q, \dot{q}, u, r, t) + 
f_{4}(q, \lambda, t) &amp;amp;= 0_{(o-m+k) \times 1}
\end{aligned}&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;\begin{aligned}
q, \dot{q} &amp;amp; \in \mathbb{R}^n \\
u, \dot{u} &amp;amp; \in \mathbb{R}^o \\
r &amp;amp; \in \mathbb{R}^s \\
\lambda &amp;amp; \in \mathbb{R}^k
\end{aligned}&lt;/p&gt;
&lt;p&gt;Note that the only changes are the addition of a $u$ term in $f_2$, and the
$f_{4}$ term holding the lagrange multipliers. For Lagrange's method,
$\dot{q} = u$, and $k = m$; for Kanes method $k = 0$, and everything
looks the same as it did before.&lt;/p&gt;
&lt;p&gt;The returned $M$, $A$, and $B$ linearized form then is:&lt;/p&gt;
&lt;p&gt;$$
M \begin{bmatrix} \delta \dot{q} \\ \delta \dot{u} \\ \delta \lambda \end{bmatrix} =
A \begin{bmatrix} \delta q_i \\ \delta u_i \end{bmatrix} + B \begin{bmatrix} \delta r \end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;\begin{aligned}
M &amp;amp;\in \mathbb{R}^{(n+o+k) \times (n+o+k)} \\
A &amp;amp;\in \mathbb{R}^{(n+o+k) \times (n-l+o-m)} \\
B &amp;amp;\in \mathbb{R}^{(n+o+k) \times s}
\end{aligned}&lt;/p&gt;
&lt;p&gt;As before, the $M$ matrix can be inverted, and the square state space matrices
$A$ and $B$ calculated.&lt;/p&gt;
&lt;p&gt;The functionality described above has been implemented in the
&lt;a href=&quot;https://github.com/jcrist/sympy/tree/LinearizeLagrange&quot;&gt;LinearizeLagrange branch&lt;/a&gt;
of sympy on my github. As this is a superset of the functionality I implemented
last week, I'm going to hold off on submitting this to master until my 
&lt;a href=&quot;https://github.com/sympy/sympy/pull/7581&quot;&gt;current pull request&lt;/a&gt; is merged. For
now I made a local PR &lt;a href=&quot;https://github.com/jcrist/sympy/pull/3&quot;&gt;here&lt;/a&gt;. Please
take a look through, I need all the code review I can get.&lt;/p&gt;
&lt;p&gt;Two tests have been implemented linearizing a system generated with Lagrange's
Method. I plan on adding more next week, as well as improving the documentation.&lt;/p&gt;
&lt;h2&gt;Linearizing a Non-minimal Pendulum with Lagrange's Method&lt;/h2&gt;
&lt;p&gt;A demonstration of the current functionality for a non-minimal realization
of a pendulum is below. The pendulum has two generalized coordinates, $q1$ and
$q2$. As this is Lagrange's method, the generalized speeds are just the time
derivatives of the coordinates (i.e. $u = \dot{q}$).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jcrist.github.io/feeds/images/Pendulum_NonMin_Coord.svg&quot; alt=&quot;Pendulum system&quot; title=&quot;Pendulum System&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# Create the required symbols&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q1,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;dynamicsymbols(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'q1:3'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q1d,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2d&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;dynamicsymbols(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'q1:3'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;level&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;L,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;m,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;t&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;symbols(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'L, m, t'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;g&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;9.8&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Compose World Frame&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;ReferenceFrame(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'N'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;pN&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Point(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'N*'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;pN&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;set_vel(N,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# A.x is along the pendulum&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;theta1&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;atan(q2&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q1)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;A&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;orientnew(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'A'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #e6db74;&quot;&gt;'axis'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;[theta1,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;z])&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Create point P, the pendulum mass&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;P&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;pN&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;locatenew(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'P1'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q1&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;y)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;P&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;set_vel(N,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;P&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;pos_from(pN)&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;dt(N))&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;pP&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Particle(&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;'pP'&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;P,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;m)&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Constraint Equations&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;f_c&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([q1&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;L&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;**&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;])&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Calculate the lagrangian, and form the equations of motion&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;Lag&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Lagrangian(N,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;pP)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;LagrangesMethod(Lag,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;[q1,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2],&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;hol_coneqs&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;f_c,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;forcelist&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;[(P,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;m&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;g&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;N&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;x)],&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;frame&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;N)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;form_lagranges_equations()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point the equations of motion have been formed, but not linearized.
Linearization requires that dependent and independent coordinates be chosen. In
this case we'll chose $q2$ as independent, and $q1$ as dependent.&lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# Choose the independent and dependent coordinates&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q_i&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([q2])&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q_d&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([q1])&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_i&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([q2d])&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_d&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([q1d])&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearizer&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;to_linearizer(q_i,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_i,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q_d,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_d)&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Compose operating point&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q_op&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;{q1:&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;L,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_op&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;{q1d:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2d:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;ud_op&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;{q1d&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;diff(t):&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2d&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;diff(t):&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Perform the linearization&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;A,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;B&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearizer&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearize(q_op&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;q_op,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_op&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;u_op,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;ud_op&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;ud_op,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;A_and_B&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;True)&lt;/span&gt;
&lt;span style=&quot;color: #66d9ef;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(A)&lt;/span&gt;
&lt;span style=&quot;color: #66d9ef;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(B)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:  &lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;[&lt;/span&gt;           &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;],&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam1(t)&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;m,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;]])&lt;/span&gt;

&lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix(&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the lagrange multiplier apppears in the linearization. However, for 
a given operating point, each multiplier has a specific value (i.e. they're
not free choices). Using the structure of the system of equations, the values
can be solved for, and substituted in:&lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# Take advantage of problem structure to solve for lams&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;mass_matrix&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;mass_matrix&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;col_join((&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_coeffs&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;row_join(zeros(&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;))))&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;force_matrix&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;forcing&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;col_join(LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;_f_cd)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_op_vec&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix((mass_matrix&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;inv()&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;force_matrix))[&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;:])&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_op_vec&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_op_vec&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;subs(ud_op)&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;subs(u_op)&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;subs(q_op)&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_op&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;dict(zip(LM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_vec,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;lam_op_vec))&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Substitute the value for the multipliers at this operating point&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;A&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;subs(lam_op)&lt;/span&gt;
&lt;span style=&quot;color: #66d9ef;&quot;&gt;print&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;(A)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;Matrix([&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;[&lt;/span&gt;     &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;],&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;9.8&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;L,&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the correct linearization for a pendulum linearized about hanging
at rest operating point. You can try out the added functionality demonstrated
above by cloning my &lt;code&gt;LinearizeLagrange&lt;/code&gt; branch of sympy
&lt;a href=&quot;https://github.com/jcrist/sympy/tree/LinearizeLagrange&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While functional, it still isn't finished. I still need to add documentation,
more tests, and finalize the interface. I plan on working on this next week.&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</content:encoded>
	<dc:date>2014-06-13T23:00:00+00:00</dc:date>
	<dc:creator>Jim Crist</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/gsoc/csympy-week3/">
	<title>Sushant Hiray: This Week in CSymPy: #3</title>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week3/</link>
	<content:encoded>&lt;p&gt;Week 3 for GSoC just ended and we decided to work on fixing bugs which were high priority.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started off the week and decided that Iâll work on the exponential module. 
&lt;br /&gt;&lt;br /&gt;
However last week we had discovered a &lt;a href=&quot;https://github.com/sympy/csympy/issues/179&quot;&gt;bug&lt;/a&gt; in the way CSymPy was handling powers, so we decided to fix it first before moving on to the exponential Module.
&lt;br /&gt;&lt;br /&gt;
The main issue in the bug was the way we were handling the &lt;code&gt;dict&lt;/code&gt;. There was no uniformity so we needed up inserting &lt;code&gt;2&lt;/code&gt; as well as &lt;code&gt;1/2&lt;/code&gt; into the &lt;code&gt;dict&lt;/code&gt;. We discussed with Aaron and the way SymPy handled the issue of powers was to make sure that the power was always positive. If not the 
reciprocal was added in the dict.
&lt;br /&gt;&lt;br /&gt;
I used the convention SymPy was using and sent a &lt;a href=&quot;https://github.com/sympy/csympy/pull/182&quot;&gt;pull request&lt;/a&gt;. However, there wasnât much of help usin this convention as we were ending up with both &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;1/2&lt;/code&gt; in some corner cases. To avoid this, I searched the dict first if the reciprocal existed, if it existed, then I added the reciprocal or else added the number to the dict.
&lt;br /&gt;&lt;br /&gt;
However as was expected using a &lt;code&gt;find&lt;/code&gt; operation degraded the benchmarks heavily. So after a lot of discussion with Ondrej over the PR as well as on gitter, we figured out a way to solve the problem. The convention was to always enter the number in the form &lt;code&gt;num/den&lt;/code&gt; such that &lt;code&gt;num &amp;gt;= den&lt;/code&gt;. We updated the PR according to this convention and the issue was fixed. Consuming almost a weeks time!&lt;/p&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;Most of the discussions with Ondrej and Thilina happened over the pull requests and the issues itself. We finalized the convention over gitter.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Add the &lt;code&gt;ATan2&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;Implement the &lt;code&gt;Exponential Module&lt;/code&gt;. After this module we shoule be able to do things like &lt;code&gt;rewrite__as_cos&lt;/code&gt; for the exponential class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-11T07:30:00+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-4292104463720196708">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/06/in-third-week-i-started-with-second.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;In the third week I started with the second phase of my project which is to implement formal power series. I spent some time in designing the class structure. Another important part is to figure out a way to represent infinite power series.&lt;br /&gt;Literature mentions two ways to represent infinite series - one is to have function to compute the kth coefficient while other is lazy evaluation. Many series operations seem to have very simple on-line algorithms if we use lazy evaluation, &lt;br /&gt;&lt;br /&gt;To work with lazy evaluation, FPS(formal power series) will be represented as a stream object consisting of head and tail. Head will be the first term of the series while tail is the rest of the series but in an unevaluated form. &lt;br /&gt;So FPS of exp(x) will have its generator as x**n/n!. Head will be 1 and tail will be FPS with generator as 1/(n+1)!. Tail will remain unevaluated. This way any number of terms can be found.&lt;br /&gt;&lt;br /&gt;To find generator of any function, Gruntz and Koepf give an algorithm.&lt;br /&gt;It consists of three steps:-&lt;br /&gt;- Finding a simple differential equation for the given function whose coefficients are rational functions.&lt;br /&gt;- Converting the differential equation to a recurrence relation.&lt;br /&gt;- Solving the recurrence relation to get a closed form.&lt;br /&gt;If the original function was a rational fraction, it can split using partial fraction decomposition (already implemented in SymPy as apart) and apply the binomial series to get closed form.&lt;br /&gt;For e.g.:- 1/(1-x) can be expanded as 1 + x + x**2 + x**3 + ... So the generator in this case is x**n.&lt;br /&gt;&lt;br /&gt;Some initial results are:-&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;margin-left: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-Jy1g1QYVVYQ/U5dHvo3VuII/AAAAAAAAAco/LxOUVFI7wJI/s1600/FPS.png&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-Jy1g1QYVVYQ/U5dHvo3VuII/AAAAAAAAAco/LxOUVFI7wJI/s1600/FPS.png&quot; border=&quot;0&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;After completing the algorithm to compute generating function, next step will be to implement series operations like multiplication (cauchy product), inversion, convolution etc.&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-10T18:03:32+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8847459392628952171.post-1453505657920387618">
	<title>Sudhanshu Mishra: GSoC'14: Third week</title>
	<link>http://lifelesscode.blogspot.com/2014/06/gsoc14-third-week.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;It was another not so productive week but I learnt a lot regarding how to write new classes by extending classes likeÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Basic&lt;/code&gt;,Â &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Symbol&lt;/code&gt;Â andÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Expr&lt;/code&gt;.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Last week I got stuck with the rewrite expression mechanism which turned out to be a bug in theÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;core&lt;/code&gt;. Thanks toÂ &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/flacjacket&quot;&gt;Sean&lt;/a&gt;Â for the fix! I need to do some more cleanup to get my last PR merged.&lt;/div&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7546&quot;&gt;https://github.com/sympy/sympy/pull/7546&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;I also tried to fix an issue related to assumptions inÂ &lt;/span&gt;&lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;&quot;&gt;Function&lt;/code&gt;&lt;span style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;Â but the complex behaviour ofÂ &lt;/span&gt;&lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;&quot;&gt;__new__&lt;/code&gt;&lt;span style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;Â constructor makes it difficult to follow the inheritance. I also need to understand the working of SymPy's Â &lt;/span&gt;&lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; line-height: 18px; padding: 3px 4px;&quot;&gt;@cacheit&lt;/code&gt;&lt;span style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;Â  decorator.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Lately I've been working on the implementation of optical medium. The motivation behind defining a&lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Medium&lt;/code&gt;Â came from the laziness of passing constants like electric permittivity and magnetic permeabhility of the medium everywhere. It will help carry out operations(events) very easily in optics.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;With the merger ofÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Point3D&lt;/code&gt;Â byÂ &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/akshayah3&quot;&gt;Akshay&lt;/a&gt;Â I planned to implement Fermat's principle and thus felt the need ofÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Medium&lt;/code&gt;Â first.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I've already sent a WIP pull request forÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;Medium&lt;/code&gt;. Here's the link:&lt;/div&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7580&quot;&gt;https://github.com/sympy/sympy/pull/7580&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I also took a quick glance at variational calculus to solve the problem involving Fermat's principle. I'm planning to start this as following:&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;&quot;&gt;&lt;span style=&quot;&quot; class=&quot;hljs-class&quot;&gt;&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #445588; font-weight: bold;&quot; class=&quot;hljs-title&quot;&gt;FermatsPrinciple&lt;/span&gt;&lt;span style=&quot;&quot; class=&quot;hljs-params&quot;&gt;(Expr)&lt;/span&gt;:&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;&quot; class=&quot;hljs-function&quot;&gt;&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #990000; font-weight: bold;&quot; class=&quot;hljs-title&quot;&gt;__init__&lt;/span&gt;&lt;span style=&quot;&quot; class=&quot;hljs-params&quot;&gt;(self, p1, p2, v=Symbol&lt;span style=&quot;&quot; class=&quot;hljs-params&quot;&gt;(&lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;'c'&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isinstance(p1, type(())) &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; isinstance(p2, type(())):&lt;br /&gt;            &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; len(p1) == &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; len(p2) == &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;:&lt;br /&gt;                self.p1 = Point(*p1)&lt;br /&gt;                self.p2 = Point(*p2)&lt;br /&gt;            &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; len(p1) == &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; len(p2) == &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;:&lt;br /&gt;                self.p1 = Point3D(*p1)&lt;br /&gt;                self.p2 = Point3D(*p2)&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; isinstance(p1, Point) &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; isinstance(p2, Point):&lt;br /&gt;            self.p1 = Point3D(p1.x, p1.y, &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;            self.p2 = Point3D(p2.x, p2.y, &lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;elif&lt;/span&gt; isinstance(p1, Point3D) &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; isinstance(p2, Point3D):&lt;br /&gt;            self.p1 = p1&lt;br /&gt;            self.p2 = p2&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br /&gt;            &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;raise&lt;/span&gt; TypeError(&lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;&quot;p1 and p2 can only be tuple, Point or Point3D&quot;&lt;/span&gt;)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;It's not a very good API and needs more refining which I'll discuss with Sean once I get it working.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;My work in this week(&lt;em style=&quot;&quot;&gt;fourth week as I am writing this post very late&lt;/em&gt;) will be to complete the above discussed things.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;On a lighter note, the temperature here is 46 degrees and no sign of rains yet. :(&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;em style=&quot;&quot;&gt;That's all for now. Cheers!&lt;/em&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;If you have some feedback or questions regarding this post, please add comments. I would be happy to get some feedback.&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-10T10:08:30+00:00</dc:date>
	<dc:creator>Sudhanshu Mishra</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-54146973659574488.post-8362916681945518929">
	<title>Akshay Narasimha: Gsoc14 Week-3</title>
	<link>http://geekpy.blogspot.com/2014/06/gsoc14-week-3.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Time is actually flying as the third week of Gsoc has come to an end. This week I have completed the implementation of the line class in 3D which includes geometric entities like Line, Ray and Segment. The link to the PR is &lt;a href=&quot;https://github.com/sympy/sympy/pull/7554&quot;&gt;Here&lt;/a&gt;.&lt;br /&gt;It hasn't been merged yet butÂ  I will get it merged soon.&lt;br /&gt;&lt;br /&gt;Implementation:&lt;br /&gt;&lt;br /&gt;Line3D:&lt;br /&gt; &lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L = Line3D(Point3D(2, 3, 4), Point3D(3, 5, 1))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Line3D(Point3D(2, 3, 4), Point3D(3, 5, 1))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L.points&lt;/div&gt;&lt;div style=&quot;&quot;&gt;(Point3D(2, 3, 4), Point3D(3, 5, 1))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; l = Line3D(Point3D(1, 2, 3), direction_ratio=[1, 2, 3]) &lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; l&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Line3D(Point3D(1, 2, 3), Point3D(2, 4, 6))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Ray3D:&lt;/div&gt;&lt;div style=&quot;&quot;&gt;r = Ray3D(Point3D(2, 3, 4), Point3D(3, 5, 0))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Ray3D(Point3D(2, 3, 4), Point3D(3, 5, 0))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.points&lt;/div&gt;&lt;div style=&quot;&quot;&gt;(Point3D(2, 3, 4), Point3D(3, 5, 0))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.source&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Point3D(2, 3, 4)&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.xdirection&lt;/div&gt;&lt;div style=&quot;&quot;&gt;oo&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.ydirection&lt;/div&gt;&lt;div style=&quot;&quot;&gt;oo&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.zdirection&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Â -oo&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; r.direction_ratio&lt;/div&gt;&lt;div style=&quot;&quot;&gt;[1, 2, -4]&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Segment3D:&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s = Segment3D(Point3D(4, 3, 9), Point3D(1, 1, 7))&lt;/div&gt;&amp;gt;&amp;gt;&amp;gt; s&lt;br /&gt;Segment3D(Point3D(1, 1, 7), Point3D(4, 3, 9)) &lt;br /&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s.points&lt;/div&gt;&lt;div style=&quot;&quot;&gt;(Point3D(1, 1, 7), Point3D(4, 3, 9))&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s.length&lt;/div&gt;&lt;div style=&quot;&quot;&gt;sqrt(17)&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s.midpoint&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Point3D(5/2, 2, 8)&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;Each of the above classes inherit methods from the LinearEntity3D class(Base class).These include:&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul class=&quot;task-list&quot;&gt;&lt;li&gt;is_concurrent&lt;/li&gt;&lt;li&gt;is_parallel&lt;/li&gt;&lt;li&gt;is_perpendicular&lt;/li&gt;&lt;li&gt;angle_between&lt;/li&gt;&lt;li&gt;parallel_line&lt;/li&gt;&lt;li&gt;perpendicular_line&lt;/li&gt;&lt;li&gt;projection&lt;/li&gt;&lt;li&gt;intersection&lt;/li&gt;&lt;li&gt;arbitrary_point &lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;This week I will start working on the Plane class which as mentioned in the previous post will bridge the gap for the interactions between 2D and 3D entities. Until then cheers!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-10T09:57:15+00:00</dc:date>
	<dc:creator>Akshay Narasimha</dc:creator>
</item>
<item rdf:about="https://hargup.github.io/posts/week-3.html">
	<title>Harsh Gupta: week 3</title>
	<link>https://hargup.github.io/posts/week-3.html</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;Hi,
At the start of this week I wrote a method to check if a given solution
lies in the domain of the equation or not. The problem it targeted was equations like &lt;code&gt;(x
- 1)/(1 + 1/(x - 1))&lt;/code&gt; though at &lt;code&gt;x = 1&lt;/code&gt; the eqution has value zero the point is
not present in the domain of the given equation. Though there is some
disagreement on the implementation, the idea was to traverse the expression
tree and check if any of the subexpression goes unbounded for the given
value.  Later I observed that caching was messing with the tests. Sometimes
the tests passed and sometimes the same test suit run without any
modification in the code failed. To do the check on the subexpressions I need
to have a copy of the original equation before the solver performs any
simplification on it. Being not sure of the mutability of the equations
I used deepcopy to copy the original equation to a variable. Later in a
meeting we figured out that deepcopy was messing with caching. Aaron told me
that every expression in sympy is immutable so don't need to perform deepcopy
on anything.&lt;/p&gt;
&lt;p&gt;This week we will restart working on the sets to represent infinite solutions,
Almost every equation in complex domain other than polynomials and rationals
has infinitly many solutions. For example even the simple equation &lt;code&gt;exp(x) ==
1&lt;/code&gt; has infinitely many solutions that is &lt;code&gt;i*2*n*pi&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is an integer.
To return these solutions we first need to have infrastructure to handle them.
The old(current) solvers does it wrong, it implicity mixes up the complex and real
domains, the answer it returns to &lt;code&gt;exp(x) == 1&lt;/code&gt; is only &lt;code&gt;[0]&lt;/code&gt;. Earlier I was also doing it wrong
so I decided that I should have two seperate solvers for reals and complex
instead of one. This also simplifed the code for the reals solvers to a large
extent.&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-09T14:50:06+00:00</dc:date>
	<dc:creator>Harsh Gupta</dc:creator>
</item>
<item rdf:about="http://kundankumar185.wordpress.com/?p=51">
	<title>Kundan Kumar: Third week of GSoC</title>
	<link>http://kundankumar185.wordpress.com/2014/06/09/third-week-of-gsoc/</link>
	<content:encoded>&lt;p&gt;Time runs fast, I have spent three weeks enjoying the work of GSoC and things I am learning meanwhile. I just dont have idea how it passed so fast. Well, it has been good week. I completed my previous work and the best thing is that I have first &lt;a href=&quot;https://github.com/sympy/sympy/pull/7489&quot;&gt;PR&lt;/a&gt; merged and second is also complete and hope to be merged soon.&lt;/p&gt;
&lt;p&gt;First &lt;a href=&quot;https://github.com/sympy/sympy/pull/7489&quot;&gt;PR&lt;/a&gt; merged included classification of system of ordinary differential equations and implementation of linear system of 2 equations of first order. Second &lt;a href=&quot;https://github.com/sympy/sympy/pull/7527&quot;&gt;PR&lt;/a&gt; contains some modification of first PR and implementation of linear system of 2 equations of second order. The recent &lt;a href=&quot;https://github.com/sympy/sympy/pull/7577&quot;&gt;PR&lt;/a&gt; contain the method for solving linear system of three or more equations of first order.&lt;/p&gt;
&lt;p&gt;The work of next week will be a to implement non-linear system of 2 equations of 1st order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/51/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/51/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=51&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-09T05:06:11+00:00</dc:date>
	<dc:creator>Kundan</dc:creator>
</item>
<item rdf:about="http://blog.s-d-b.com/?p=39">
	<title>Soumya Dipta Biswas: GSoC 2014: Week 3</title>
	<link>http://blog.s-d-b.com/gsoc-2014-week-3/</link>
	<content:encoded>&lt;p&gt;Week 3 involved some majority writing to substitute the automatic evaluation I removed the previous week. I mentioned previously that automatic evaluation may not always be very intuitive. The reason for this is that the conventional conversion to And/Or is not always the most efficient one. Hence this post is mainly centered around conversion to And/Or.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logic Simplification&lt;/strong&gt;&lt;br /&gt;
Before I move on, I need to define simplification. For the remainder of this post simplification means conversion towards the normal forms (CNF/DNF/NNF). Hence the simplification of &lt;code&gt;Implies(a, b)&lt;/code&gt; is &lt;code&gt;Or(Not(a), b)&lt;/code&gt;. One may (quite reasonably) argue that the former is much &lt;em&gt;simpler&lt;/em&gt;, but the convention followed here is that a formula containing And/Or/Not is simpler than a formula containing Implies or Xor. One last thing before I begin with the content; while most people are quite familiar with the Conjunctive/Disjunctive Normal Form, very few are so with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Negation_normal_form&quot; target=&quot;_blank&quot; title=&quot;NNF&quot;&gt;Negation Normal Form&lt;/a&gt; (NNF). NNF basically is a precursor to both CNF/DNF where in the formula contains only And/Or and all the negations are applied to the literals. Basically every CNF/DNF is an NNF, with some extra constraints. &lt;code&gt;Not(Or(And(a, Not(b)), And(Not(c), d)))&lt;/code&gt; is not in NNF, but applying De Morganâs Laws gives us the equivalent formula &lt;code&gt;And(Or(Not(a), b), Or(c, Not(d)))&lt;/code&gt; is in NNF (and incidentally also in CNF). The discussion below is concerned with simplification of formulas to (CNF/DNF like) NNF. Now, what does that mean? It basically means that the converted expressions are definitely in NNF and very close to CNF/DNF and can be converted to it quite easily. At most places I have used the names of the function but occasionally I have switched to a symbol based system wherein the symbols and their corresponding functions are: &lt;code&gt;&amp;amp;&lt;/code&gt; (And), &lt;code&gt;|&lt;/code&gt; (Or), &lt;code&gt;~&lt;/code&gt; (Not), &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (Implies), &lt;code&gt;^&lt;/code&gt; (Xor).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And/Or&lt;/strong&gt;&lt;br /&gt;
Since all of the other functions are going to be converted to And/Or, no work is to be done in this case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implication&lt;/strong&gt;&lt;br /&gt;
The conventional simplification of implication is simple and in both CNF and DNF. Hence &lt;code&gt;Implies(a, b) = Or(Not(a), b)&lt;/code&gt; is sufficient.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Equivalence&lt;/strong&gt;&lt;br /&gt;
This marks the starting point of optimizations. Traditionally, all Equivalences are defined in the form of a bi-implication &lt;code&gt;Equivalent(a, b) = And(Implies(a, b), Implies(b, a)) = And(Or(Not(a), b), (a, Not(b)))&lt;/code&gt;. Well, that seems simple enough, whatâs the big deal? Letâs try and define &lt;code&gt;Equivalent(a, b, c)&lt;/code&gt;. The definition is quite non-trivial. Let say we now how to compute &lt;code&gt;And(a, b)&lt;/code&gt; and we need to compute &lt;code&gt;And(x, y, z)&lt;/code&gt;. So, &lt;code&gt;a &amp;amp; b &amp;amp; c = (a &amp;amp; b) &amp;amp; c = And(And(a, b), c)&lt;/code&gt;. Naively applying the same idea (replacing And with Equivalent) gives &lt;code&gt;Equivalent(Equivalent(a, b), c)&lt;/code&gt;. For &lt;code&gt;{a: False, b: False, c: True}&lt;/code&gt; the latter formula is satisfied (is True) while the original formula is clearly not. For the remainder of this section I have written Equivalent as Eq and Implies as Im.&lt;br /&gt;
Letâs use some intuition. We know that the result must be such that all the arguments must be equal (and we know how to find if any 2 arguments are equal). So &lt;code&gt;Eq(a, b, c) = And(Eq(a, b), Eq(b, c), Eq(c, a))&lt;/code&gt;. How about 4 elements? &lt;code&gt;Eq(a, b, c, d) = And(Eq(a, b), Eq(a, c), Eq(a, d), Eq(b, c), Eq(b, d), Eq(c, d))&lt;/code&gt;. Quite clearly, some of the terms are completely redundant, for e.g. if a == b and b == c then automatically a == c. Using this logic, Equivalence for 3 and 4 arguments respectively become &lt;code&gt;And(Eq(a, b), Eq(b, c))&lt;/code&gt; and &lt;code&gt;And(Eq(a, b), Eq(b, c), Eq(c, d))&lt;/code&gt;. Simplifying &lt;code&gt;And(Eq(a, b), Eq(b, c))&lt;/code&gt; we get &lt;code&gt;And(Im(a, b), Im(b, a), Im(b, c), Im(c, b))&lt;/code&gt;.&lt;br /&gt;
Before simplifying it further letâs try to see if we really need two implications for each pair of literals. If we include the (clearly redundant) Eq(c, a) and re-arrange the simplified formula a little bit we get &lt;code&gt;And(Im(a, b), Im(b, c), Im(c, a), Im(b, a), Im(c, b), Im(a, c))&lt;/code&gt;. Turns out, the first 3 (or last 3) implications are independently capable of representing the original equivalence. Hence &lt;code&gt;Eq(a, b, c) = And(Im(a, b), Im(b, c), Im(c, a)) = And(Im(b, a), Im(c, b), Im(a, c))&lt;/code&gt;. We can further simplify the implication to obtain &lt;code&gt;And(Or(Not(a), b), Or(Not(b), c), Or(Not(c), a))&lt;/code&gt; which is in NNF and also in CNF.&lt;br /&gt;
So, why does this work? It works because in an implication, if the implicant is True, then the implied cannot be False. Let us take the general case &lt;code&gt;Eq(a0, a1, a2, ... an) = And(Im(a0, a1), Im(a1, a2), ... Im(an, a0))&lt;/code&gt;. Now if one or more (but not all) of the literals are True (or False), then there will be atleast one occurrence of &lt;code&gt;True &amp;gt;&amp;gt; False&lt;/code&gt;. It is quite easy to verify that this will not happen if the literals are either all True or all False. Hence if all the literals are the same (equivalent) then the conjunction of implication will be True else it will be False, which is essentially the Equivalent function.&lt;/p&gt;
&lt;p&gt;Ok, so till now we have been really conjunctive in our approach. Letâs think more disjunctive. The aim is to ensure that all the literals have the same value. Lets divide that into 2 parts: Either all the literals are True or all the literals are False. It is very easy to ensure that all literals are True, namely Andâing them together. How do we check then if all are False? Simply negating each literal and Andâing them together suffices. So, combining both the ideas we get: &lt;code&gt;Equivalent(a, b, c, ...) = Or(And(a, b, c, ...), And(Not(a), Not(b), Not(c), ...)&lt;/code&gt; which is both in NNF and DNF.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exclusive Or&lt;/strong&gt;&lt;br /&gt;
Xor creates one of the most complex NNF formula after simplification. Let look at the traditional simplification &lt;code&gt;Xor(a, b) = Or(And(a, Not(b)), And(Not(a), b)) = And(Or(a,b), Or(Not(a), Not(b)))&lt;/code&gt;. How about 3 literals? Luckily the intuition of &lt;code&gt;Xor(a, b, c) = Xor(Xor(a, b), c)&lt;/code&gt; holds here. Not so luckily, the simplified expression is &lt;code&gt;Or(And(Not(c), Or(And(Not(a), b), And(Not(b), a))), And(Or(Not(a), b), Or(Not(b), a), c))&lt;/code&gt;. So, is there a better solution. Turns out, there is a very elegant way to compute this expression. Let us first take the disjunctive case. If ânâ is the number of arguments to Xor then the expression can be given by the following algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select all odd numbers from 0 to n, inclusive {1, 3}&lt;/li&gt;
&lt;li&gt;For each of these odd number âkâ create all possible combinations of k arguments. The are nCk such combinations
&lt;ul&gt;
&lt;li&gt;k = 1: &lt;code&gt;{{a}, {b}, {c}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;k = 3: &lt;code&gt;{{a, b, c}}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In each of these combinations, we keep the k selected arguments as is and negate the rest of the arguments
&lt;ul&gt;
&lt;li&gt;k = 1: &lt;code&gt;{{a, ~b, ~c}, {~a, b, ~c}, {~a, ~b, c}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;k = 3: &lt;code&gt;{{a, b, c}}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take the union of all these combinations (there are nC1 + nC3 + nC5 â¦ such combinations) and this gives the result &lt;code&gt;{{a, ~b, ~c}, {~a, b, ~c}, {~a, ~b, c}, {a, b, c}}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is quite easy to understand why the method works. By definition, Xor is True if it contains an odd number of True arguments. Now that is precisely what the aim of the above algorithm is. For each possible combination we keep an odd number of literals unnegated. So, why is this method So, why is this clearly exponential method &lt;em&gt;simpler&lt;/em&gt;? Well, it is not. But the simplified expression is already in DNF, and we have short-circuited the very hard problem of conversion to DNF. For conversion to CNF the same algorithm (as above can be applied), however consider all even numbers (instead of odd) and negate the selected arguments (instead of negating the unselected).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;k = {0, 2}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{}, {a, b}, {b, c}, {c, a}}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{a, b, c}, {~a, ~b, c}, {a, ~b, ~c}, {~a, b, ~c}}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;If, Then, Else&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;ITE(a, b, c)&lt;/code&gt; as the name suggests returns &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;a == True&lt;/code&gt; else &lt;code&gt;c&lt;/code&gt;. To derive a simplification for ITE is quite easy as it can always take exactly 3 arguments. Now, &lt;code&gt;ITE(a, b, c) = (a &amp;gt;&amp;gt; b) &amp;amp; (~a &amp;gt;&amp;gt; c)&lt;/code&gt;. Simplifying that, we get &lt;code&gt;(~a | b) &amp;amp; (a | c)&lt;/code&gt; which is already in CNF. The DNF version is equally simple to derive.&lt;/p&gt;
&lt;p&gt;Alright, so that sums up most of the work that I have put in during Week 3. I have additionally been working on an iterative version of the same code and hope that it will provide some good results.&lt;/p&gt;
&lt;p&gt;Ciao!!!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-08T20:56:49+00:00</dc:date>
	<dc:creator>SD</dc:creator>
</item>
<item rdf:about="tag:,2014-06-06:gsoc-week-3.html">
	<title>Jim Crist: GSoC Week 3: Generalized Linearizer Class</title>
	<link>http://jcrist.github.io/gsoc-week-3.html</link>
	<content:encoded>&lt;p&gt;
&lt;/p&gt;&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This week I refactored the &lt;code&gt;Linearizer&lt;/code&gt; class to fit a general system of equations. This means that any of the following can be absent, and the linearization still is valid:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
\begin{array}[rl]
\\f_{c}(q, t) &amp;amp;= 0_{lx1} \\
f_{v}(q, u, t) &amp;amp;= 0_{mx1} \\
f_{a}(q, \dot{q}, u, \dot{u}, t) &amp;amp;= 0_{mx1} \\
f_{0}(q, \dot{q}, t) + f_{1}(q, u, t) &amp;amp;= 0_{nx1} \\
f_{2}(q, \dot{u}, t) + f_{3}(q, \dot{q}, u, r, t) &amp;amp;= 0_{(o-m)x1} \\
\end{array}
\]&lt;/span&gt; with&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[
\begin{array}[rl]
\\q, \dot{q} &amp;amp; \in \mathbb{R}^n \\
u, \dot{u} &amp;amp; \in \mathbb{R}^o \\
r &amp;amp; \in \mathbb{R}^s 
\end{array}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Note that vectors can be absent too. This means the system can be entirely &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt; or &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt; components. More on this later.&lt;/p&gt;
&lt;p&gt;Much of the rest of the week was spent finishing up all methods related to the &lt;code&gt;KanesMethod&lt;/code&gt; class. This was mostly cleaning up the code base, and fixing all the tests in place for the previous &lt;code&gt;linearize&lt;/code&gt; method. As of this point, the linearization routines accomplish everything that was in place before, but in a more general and extensible way. This is all included in the &lt;code&gt;LinearizerClass&lt;/code&gt; branch on my GitHub repo. There is a pull request on my own master branch open right now for code review &lt;a href=&quot;https://github.com/jcrist/sympy/pull/1&quot;&gt;here&lt;/a&gt;. I'll leave this up for another day or two before closing it and making all pull request to &lt;code&gt;Sympy/master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also started work on linearizing a system of equations presented in matrix form. This still needs lots of code improvements (it's inefficient), but it currently works. Below is a demo.&lt;/p&gt;
&lt;p&gt;The system is the same system I use for my research - a dual solenoid actuator. There are two dependent variables: &lt;code&gt;lam1&lt;/code&gt; and &lt;code&gt;lam2&lt;/code&gt;. The dynamics are thus expressed by 3 dynamic differential equations, and two constraint equations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [1]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.physics.mechanics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.physics.mechanics.linearize&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Linearizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix_to_linearizer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create constant symbols&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B1, B2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d1, d2, D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'R1, R2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create dynamicsymbols&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i1, i2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;V1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'V1, V2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xdot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lam1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lam1, lam2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lam1dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam2dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lam1, lam2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define vectors. Because all speeds are derivatives of the coordinates,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the system is best represented as just a vector of u. The dependent&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# states are lam1 and lam2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;udep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define system of equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;B2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lam2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lam1dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lam2dot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xdot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Perform the linearization&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;linearizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix_to_linearizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;udep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;udep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linearizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linearize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A_and_B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [2]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Matrix([
[(B1*x&amp;amp;apos - R1*(d1 + x)**2)/(B1*(d1 + x)),                                               0,                        ((d1 + x)*i1&amp;amp;apos - 2*i1*x&amp;amp;apos)/(d1 + x)**2,      2*i1/(d1 + x)],
[                                     0, -(B2*x&amp;amp;apos + R2*(D + d2 - x)**2)/(B2*(D + d2 - x)),               -((D + d2 - x)*i2&amp;amp;apos + 2*i2*x&amp;amp;apos)/(D + d2 - x)**2, -2*i2/(D + d2 - x)],
[                                     0,                                               0,                                                           0,                  1],
[              -2*B1*i1/(m*(d1 + x)**2),                     2*B2*i2/(m*(D + d2 - x)**2), 2*B1*i1**2/(m*(d1 + x)**3) + 2*B2*i2**2/(m*(D + d2 - x)**3),                  0]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [3]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Matrix([
[(d1 + x)/B1,               0],
[          0, (D + d2 - x)/B2],
[          0,               0],
[          0,               0]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;You'll have to trust me that the above representations are the same ones that I derived for my research project. This is really exciting progress! If everything works out (and it looks like it will), it will be possible to derive a system of dynamic equations anywhere in sympy, and then linearize it using the functionality I implement in the &lt;code&gt;linearize&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Currently the system of equations is must formed as a matrix, and then passed to &lt;code&gt;matrix_to_linearizer&lt;/code&gt; to return a &lt;code&gt;Linearizer&lt;/code&gt; object. Once this code is cleaned up, it will be used internally by the general &lt;code&gt;linearize&lt;/code&gt; function to convert the system to a &lt;code&gt;Linearizer&lt;/code&gt;, perform the linearization, and return the results. I plan on implementing this functionality next week.&lt;/p&gt;
&lt;p&gt;The code used above is found in my &lt;code&gt;matrix2linearizer&lt;/code&gt; branch on GitHub &lt;a href=&quot;https://github.com/jcrist/sympy/tree/matrix2linearizer&quot;&gt;here&lt;/a&gt;. As before, I made a pull request on my own rep, so people may review the code before i submit it to Sympy proper. The PR is &lt;a href=&quot;https://github.com/jcrist/sympy/pull/2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</content:encoded>
	<dc:date>2014-06-07T01:00:00+00:00</dc:date>
	<dc:creator>Jim Crist</dc:creator>
</item>
<item rdf:about="http://codesachin.wordpress.com/?p=13">
	<title>Sachin Joglekar: GSoC Week 3: Formalizing design, polishing code</title>
	<link>http://codesachin.wordpress.com/2014/06/07/gsoc-week-3-formalizing-design-polishing-code/</link>
	<content:encoded>&lt;p&gt;This week was mostly spent in polishing the design, writing mock sessions and adding tests to the code I wrote last week. Thanks to Jasonâs constant encouragement towards objective- and test- driven code development, I now have a good idea of what I need to do in the coming week. If the meeting with Jason goes well and we are on the same page, I will soon complete the current WIP PR that is at &lt;a href=&quot;https://github.com/sympy/sympy/pull/7566&quot;&gt;this link&lt;/a&gt;, and then move on to implementing CoordSysRect class (just written the API for now).&lt;/p&gt;
&lt;p&gt;What I learnt this week-&lt;/p&gt;
&lt;p&gt;Before coding,&lt;/p&gt;
&lt;p&gt;1. First write out as many example use cases of the software, as possible. In this case, the quality is more important than the quantity. The use cases should sufficiently touch upon all aspects of working required from the software that you are about to code. The interactions, on a conceptual and UI-level, should be as crytal-clear as needed.&lt;/p&gt;
&lt;p&gt;2. Draw out the high-level API -&amp;gt; user-visible attributes(or better, âpropertyâs in Python) and methods/functions. These will help you in defining all the âinternalâ matter and algorithms succinctly.&lt;/p&gt;
&lt;p&gt;3. While you are finalizing the API design, start drawing up a set of incremental objectives you would need to complete for building the overall software. Make sure that the objectives make sense chronologically, and reflect the priority and complexity level of the objectives correctly. This is basically to acknowledge that it is not possible to build and entire software together, but rather its better to code it module-by-module â with sufficuent testing at regular intervals, ofcourse.&lt;/p&gt;
&lt;p&gt;The follow the timeline you have decided, and start coding.&lt;/p&gt;
&lt;p&gt;Respecting this, I will start working on the code full-time next week onwards, so hope to give more detailed reports then. Have a great week &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/13/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/13/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=13&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-06T23:46:48+00:00</dc:date>
	<dc:creator>srjoglekar246</dc:creator>
</item>
<item rdf:about="http://thilinaatsympy.wordpress.com/?p=326">
	<title>Thilina Rathnayake: Gaussian Elimination</title>
	<link>http://thilinaatsympy.wordpress.com/2014/06/03/gaussian-elimination/</link>
	<content:encoded>&lt;p&gt;Hi All, sorry for a late blog post. During the past week I worked on implementing&lt;br /&gt;gaussian elimination and correcting some bugs. I had a very slow progress during&lt;br /&gt;the past week due to the time spent on correcting the bugs and because of the busy&lt;br /&gt;schedule I had during the week. I wish to cover up for that during this week.&lt;/p&gt;
&lt;h1&gt;Row Reduction&lt;/h1&gt;
&lt;p&gt;Gaussian Elimination is a method for solving matrix equations of the form &lt;br /&gt;&lt;img src=&quot;http://s0.wp.com/latex.php?latex=Ax+%3D+b&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;Ax = b&quot; class=&quot;latex&quot; title=&quot;Ax = b&quot; /&gt;. It is done by perfroming a sequence of operations on the matrix&lt;br /&gt;entries. This method can be used to find the &lt;a href=&quot;http://en.wikipedia.org/wiki/Determinant),%20[rank](http://en.wikipedia.org/wiki/Rank_%28linear_algebra%29&quot;&gt;determinant&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Invertible_matrix&quot;&gt;inverse&lt;/a&gt; of a matrix. The &lt;br /&gt;method is named after great mathematician &lt;a href=&quot;http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss&quot;&gt;Carl Friedrich Gauss&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The set of operations allowed on the matrix entries are called elementary row &lt;br /&gt;operations. Below are the three operations that are allowed.&lt;/p&gt;
&lt;p&gt;1. Add &lt;img src=&quot;http://s0.wp.com/latex.php?latex=a.%28row%7Ej%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;a.(row~j)&quot; class=&quot;latex&quot; title=&quot;a.(row~j)&quot; /&gt; to &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28row%7Ei%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(row~i)&quot; class=&quot;latex&quot; title=&quot;(row~i)&quot; /&gt; of the matrix.&lt;br /&gt;2. Interchange &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28row%7Ei%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(row~i)&quot; class=&quot;latex&quot; title=&quot;(row~i)&quot; /&gt; and &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28row%7Ej%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(row~j)&quot; class=&quot;latex&quot; title=&quot;(row~j)&quot; /&gt;.&lt;br /&gt;3. Multiply &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%28row%7Ei%29&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;(row~i)&quot; class=&quot;latex&quot; title=&quot;(row~i)&quot; /&gt; by a constant &lt;img src=&quot;http://s0.wp.com/latex.php?latex=c&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;c&quot; class=&quot;latex&quot; title=&quot;c&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;The simplest non-zero matrices are called &lt;strong&gt;matrix units&lt;/strong&gt; and they are denoted&lt;br /&gt;by &lt;img src=&quot;http://s0.wp.com/latex.php?latex=e_%7Bij%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;e_{ij}&quot; class=&quot;latex&quot; title=&quot;e_{ij}&quot; /&gt;. This denotes the matrix where only the &lt;img src=&quot;http://s0.wp.com/latex.php?latex=%7Bij%7D%5E%7Bth%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;{ij}^{th}&quot; class=&quot;latex&quot; title=&quot;{ij}^{th}&quot; /&gt; entry is&lt;br /&gt;one and every other entry is zero. With this definition, above three row &lt;br /&gt;operations are equal to the left multiplying a given matrix by the following &lt;br /&gt;matrices respectively. These matrices are called **elementary matrices**.&lt;/p&gt;
&lt;p&gt;1. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=I%7E%2B%7Eae_%7Bij%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;I~+~ae_{ij}&quot; class=&quot;latex&quot; title=&quot;I~+~ae_{ij}&quot; /&gt;&lt;br /&gt;2. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=I%7E%2B%7Ee_%7Bij%7D%7E%2B%7Ee_%7Bji%7D%7E-%7Ee_%7Bii%7D%7E-%7Ee_%7Bjj%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;I~+~e_{ij}~+~e_{ji}~-~e_{ii}~-~e_{jj}&quot; class=&quot;latex&quot; title=&quot;I~+~e_{ij}~+~e_{ji}~-~e_{ii}~-~e_{jj}&quot; /&gt;&lt;br /&gt;3. &lt;img src=&quot;http://s0.wp.com/latex.php?latex=I%7E%2B%28c-1%29e_%7Bii%7D&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;I~+(c-1)e_{ii}&quot; class=&quot;latex&quot; title=&quot;I~+(c-1)e_{ii}&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;img src=&quot;http://s0.wp.com/latex.php?latex=I&amp;amp;bg=eff1f5&amp;amp;fg=444444&amp;amp;s=0&quot; alt=&quot;I&quot; class=&quot;latex&quot; title=&quot;I&quot; /&gt; is the identity matrix of appropriate size.&lt;/p&gt;
&lt;h2&gt;Row reduction algorithm&lt;/h2&gt;
&lt;p&gt;I implemented the algorithm in &lt;strong&gt;SymPy&lt;/strong&gt; that gives the reduced row echelon form&lt;br /&gt;of the given matrix. It is a very naive algorithm not suited for symbolic matrices.&lt;br /&gt;I wish to implement an elimination algorithm thatâs more suited for symbolic &lt;br /&gt;matrices during upcoming weeks.&lt;/p&gt;
&lt;h1&gt;Bugs in CSymPy&lt;/h1&gt;
&lt;p&gt;We found some bugs with `div` which were mainly originated in the constructor &lt;br /&gt;for `Rational`. Currently, for performance reasons, there is an assertion in the&lt;br /&gt;constructor for `Rational` that the input should actually be a rational number with&lt;br /&gt;denominator greater than one. If the denominator is one, the assertion fails and&lt;br /&gt;we get an error. We had to make sure that we are calling `Rational` with actual &lt;br /&gt;rationals, not Integers.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/326/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/326/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=326&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-03T16:56:29+00:00</dc:date>
	<dc:creator>Thilina Rathnayake</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-54146973659574488.post-4568350345911213597">
	<title>Akshay Narasimha: Gsoc Week #2</title>
	<link>http://geekpy.blogspot.com/2014/06/gsoc-week-2.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;The second week of Gsoc has come to an end and I made some good progress this last week. Firstly my &lt;a href=&quot;https://github.com/sympy/sympy/pull/7522&quot;&gt;PR&lt;/a&gt; on Point3D has been merged and I started implementing the line class(contains lines, rays and segments) in 3D using the Point3D class.&lt;br /&gt;&lt;br /&gt;This is the class structure for the Line class in 3D:&lt;br /&gt;* Base class(all the below classes inherit from this class)&lt;br /&gt;* Line3D&lt;br /&gt;* Ray3D&lt;br /&gt;* Segment3D&lt;br /&gt;&lt;br /&gt;I have implemented a part of each of these classes and have submitted a PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/7554&quot;&gt;here&lt;/a&gt;. I intend to implement the remaining methods and tests this following week and will hopefully merge the PR.&lt;br /&gt;&lt;br /&gt;Regarding the interaction between the Lines in 2D and 3D , it would be similar to the interaction between Points in 2D and 3D as discussed in the previous post.&lt;br /&gt;&lt;br /&gt;For example to find the distance between a 2D and 3D line instead of solving their equations we could find the intersection of the 3D line in the plane(to be implemented) contained by the 2D line and find the distance between the resulting point and the 2D line.As a result we get to keep the Line and Line3D classes seperate.&lt;br /&gt;&lt;br /&gt;That's it for this week.&lt;br /&gt;Cheers.&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-02T18:46:40+00:00</dc:date>
	<dc:creator>Akshay Narasimha</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-8460362206940299143">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/06/two-weeks-into-gsoc-and-im-almost.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;Two weeks into GSoC and I'm almost finished with the first part of my project. First part of my project involved asymptotic expansion. This included implementing the MrvAsympt algorithm and writing the series expansion of special functions.&lt;br /&gt;&lt;br /&gt;MrvAsympt algorithm:&lt;br /&gt;As discussed in the previous post, if the most rapidly varying subexpression of function f is same as f, we need to find a canonical representation of the mrv set. This is done by taking the leading term of the asymptotic expansion of argument of the function f.&lt;br /&gt;After getting the representative r, f is rewritten in terms of r and expanded around it. Now the problem is that this can keep on going forever i.e. the coefficients will keep on being rewritten infinitely times.&lt;br /&gt;Â For this ``bound`` parameter was added that keeps a limit on the number of times the coefficient is rewritten.&lt;br /&gt;With this, function can also be written as an infinite asymptotic product. If ``bound=3`` then first 3 terms of this product is computed and rest are kept in closed form&lt;br /&gt;Here is an example&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; e = exp(exp(x)/(1-1/x))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x)  &lt;br /&gt; exp(exp(x)/(1 - 1/x))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x, bound=2)  &lt;br /&gt; exp(exp(x)/x)*exp(-exp(x) + exp(x)/(1 - 1/x) - exp(x)/x)*exp(exp(x))Â  &lt;/code&gt;&lt;/pre&gt;Here the canonical representation as we go further into recursion is exp(x), exp(x)/x, exp(x)/x**2 and so on. So it never ends. Keeping bound=2 terminates it in the second phase.&lt;br /&gt;&lt;br /&gt;Special functions series expansion:&lt;br /&gt;It includes the following functions-&lt;br /&gt;  &lt;ul class=&quot;task-list&quot;&gt;&lt;li&gt;erf: gauss error function&lt;/li&gt;&lt;li&gt;erfc: complementary error function&lt;/li&gt;&lt;li&gt;erfi: imaginary error function&lt;/li&gt;&lt;li&gt;Ei: exponential integral&lt;/li&gt;&lt;li&gt;expint: generalised exponential integral&lt;/li&gt;&lt;li&gt;li: logarithmic integral&lt;/li&gt;&lt;li&gt;Li: offset logarithmic integral&lt;/li&gt;&lt;li&gt;Si: sine integral&lt;/li&gt;&lt;li&gt;Ci: cosine integral&lt;/li&gt;&lt;li&gt;bessely&lt;/li&gt;&lt;li&gt;besselj&lt;/li&gt;&lt;li&gt;lerchphi function&lt;/li&gt;&lt;li&gt;Riemann zeta function&lt;/li&gt;&lt;/ul&gt;Most of the expansion I could find from wolfram mathworld and Wikipedia websites. However there were a few bugs that troubled me and wasted a lot of time. Since the expansions were in a bit complicated form, the current Order implementation could not properly perform operations like removeO, adding order terms and getO leading to such problems.&lt;br /&gt;I hope I can merge the two pending PR soon without much trouble and start with the next phase of my project.&lt;br /&gt;&lt;br /&gt;Next phase of my project includes Formal Power Series. That is the major part of my project and I'm excited to get started with it.&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-02T12:04:38+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="https://hargup.github.io/posts/week-1-and-week-2.html">
	<title>Harsh Gupta: Week 1 and Week 2</title>
	<link>https://hargup.github.io/posts/week-1-and-week-2.html</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;Hi, As I told you about in the previous post, My work for this summer will be
improving the current equation solvers of sympy. There are basically three
thing I'll have to do.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a basic set infrastructure for solvers to return sets.&lt;/li&gt;
&lt;li&gt;Rewrite the current solvers to be clean and robust.&lt;/li&gt;
&lt;li&gt;On the top of 1 and 2 write new solvers and function, they will returning
   and handling all the solutions of equations like &lt;code&gt;sin(x) == 0&lt;/code&gt; and a general
   singularity finder.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can look at the details in my
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers&quot;&gt;proposal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A started working on the sets module in the community bonding period, basically
writing a set difference class at &lt;a href=&quot;https://github.com/sympy/sympy/pull/7462&quot;&gt;this
PR&lt;/a&gt; , I try to get it merged by the
end of this week.&lt;/p&gt;
&lt;p&gt;Set are a pretty general mathematical constructs, and you can solve a lot of
hard problems if you could compute general set operations. The whole number
theory can be defined in terms of sets. So, computing general set operations,
e.g, intersection, unions is pretty hard problem too and we should not aim to
do all them.  In a meeting with Matthew and Sergey we discussed that it would
    be better if complete the part 2 first. It will give a general idea about
    what capabilities of sets we need.  Also some sets problems can be reduced
    to equations and vice versa.  &lt;/p&gt;
&lt;p&gt;I've started working on the univariate solvers &lt;a href=&quot;https://github.com/sympy/sympy/pull/7523&quot;&gt;at
PR&lt;/a&gt;.  My aim for this
week will be.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Completing the rational solvers&lt;/li&gt;
&lt;li&gt;Getting the open PR for the sets merged.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-02T11:45:54+00:00</dc:date>
</item>
<item rdf:about="https://hargup.github.io/blog/week-1-and-week-2.html">
	<title>Harsh Gupta: Week 1 and Week 2</title>
	<link>https://hargup.github.io/blog/week-1-and-week-2.html</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;Hi, As I told you about in the previous post, My work for this summer will be
improving the current equation solvers of sympy. There are basically three
thing I'll have to do.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a basic set infrastructure for solvers to return sets.&lt;/li&gt;
&lt;li&gt;Rewrite the current solvers to be clean and robust.&lt;/li&gt;
&lt;li&gt;On the top of 1 and 2 write new solvers and function, they will returning
   and handling all the solutions of equations like &lt;code&gt;sin(x) == 0&lt;/code&gt; and a general
   singularity finder.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can look at the details in my
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers&quot;&gt;proposal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A started working on the sets module in the community bonding period, basically
writing a set difference class at &lt;a href=&quot;https://github.com/sympy/sympy/pull/7462&quot;&gt;this
PR&lt;/a&gt; , I try to get it merged by the
end of this week.&lt;/p&gt;
&lt;p&gt;Set are a pretty general mathematical constructs, and you can solve a lot of
hard problems if you could compute general set operations. The whole number
theory can be defined in terms of sets. So, computing general set operations,
e.g, intersection, unions is pretty hard problem too and we should not aim to
do all them.  In a meeting with Matthew and Sergey we discussed that it would
    be better if complete the part 2 first. It will give a general idea about
    what capabilities of sets we need.  Also some sets problems can be reduced
    to equations and vice versa.  &lt;/p&gt;
&lt;p&gt;I've started working on the univariate solvers &lt;a href=&quot;https://github.com/sympy/sympy/pull/7523&quot;&gt;at
PR&lt;/a&gt;.  My aim for this
week will be.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Completing the rational solvers&lt;/li&gt;
&lt;li&gt;Getting the open PR for the sets merged.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-02T11:45:54+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8847459392628952171.post-2310284663571326967">
	<title>Sudhanshu Mishra: GSoC'14 Progress: Finishing TWave</title>
	<link>http://lifelesscode.blogspot.com/2014/06/gsoc14-progress-finishing-twave.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;margin-bottom: 9px;&quot;&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;This last week most of the coding I did was only related to transverse wave. It has already been merged into the master.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7518&quot;&gt;https://github.com/sympy/sympy/pull/7518&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Here is the class structure of theÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;TWave&lt;/code&gt;:&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;&quot;&gt;&lt;span style=&quot;&quot; class=&quot;hljs-header&quot;&gt;Inherits&lt;br /&gt;========&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Expr&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-header&quot;&gt;Arguments&lt;br /&gt;=========&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;amplitude : Sympifyable&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-code&quot;&gt;    Amplitude of the wave.&lt;/span&gt;&lt;br /&gt;frequency : Sympifyable&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-code&quot;&gt;    Frequency of the wave.&lt;/span&gt;&lt;br /&gt;phase : Sympifyable&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-code&quot;&gt;    Phase angle of the wave.&lt;/span&gt;&lt;br /&gt;time&lt;span style=&quot;&quot; class=&quot;hljs-emphasis&quot;&gt;_period : Sympifyable&lt;br /&gt;    Time period of the wave.&lt;br /&gt;n : Sympifyable&lt;br /&gt;    Refractive index of the medium.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;&quot; class=&quot;hljs-header&quot;&gt;Raises&lt;br /&gt;=======&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;ValueError : When niether frequency nor time period is provided.&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-code&quot;&gt;    or they are not consistent.&lt;/span&gt;&lt;br /&gt;TypeError : When anyting other than TWave objects is added.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;&quot; class=&quot;hljs-header&quot;&gt;Methods&lt;br /&gt;=======&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;frequency&lt;br /&gt;time&lt;span style=&quot;&quot; class=&quot;hljs-emphasis&quot;&gt;_period&lt;br /&gt;wavelength&lt;br /&gt;amplitude&lt;br /&gt;phase&lt;br /&gt;speed&lt;br /&gt;angular_&lt;/span&gt;velocity&lt;br /&gt;wavenumber&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;Till now it has been very easy to implement this but these days I'm stuck on writing functions to rewrite an expression using different functions. This is supposed to work like this as I feel from the code:&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;When you callÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;expr.rewrite('sin')&lt;/code&gt;, the following code written inÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;sympy.core.basic&lt;/code&gt;should make a call to functionÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;_eval_rewrite_as_sin(self, *args)&lt;/code&gt;Â defined in the object class.&lt;/div&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;background-color: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; color: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; padding: 0px;&quot;&gt;&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; not args:&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br /&gt;    pattern = args[:-&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; isinstance(args[-&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;], string_types):&lt;br /&gt;        rule = &lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;'_eval_rewrite_as_'&lt;/span&gt; + args[-&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br /&gt;        rule = &lt;span style=&quot;color: #dd1144;&quot; class=&quot;hljs-string&quot;&gt;'_eval_rewrite_as_'&lt;/span&gt; + args[-&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;].__name__&lt;br /&gt;&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; not pattern:&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;._eval_rewrite(None, rule, **hints)&lt;br /&gt;    &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; iterable(pattern[&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]):&lt;br /&gt;            pattern = pattern[&lt;span style=&quot;color: #009999;&quot; class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]&lt;br /&gt;&lt;br /&gt;        pattern = [ p.&lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;__class__&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; p in pattern &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;.has(p) ]&lt;br /&gt;&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; pattern:&lt;br /&gt;            &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;._eval_rewrite(tuple(pattern), rule, **hints)&lt;br /&gt;        &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:&lt;br /&gt;            &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #333333; font-weight: bold;&quot; class=&quot;hljs-keyword&quot;&gt;self&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;But this is not the case with me. It always ends up callingÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;__str__&lt;/code&gt;Â method. This is the PR for the same.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7546&quot;&gt;https://github.com/sympy/sympy/pull/7546&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;By the way, I had never used any debugger for Python before and now I feel it makes your life much easier.Â &lt;a style=&quot;color: blue;&quot; href=&quot;http://winpdb.org/&quot;&gt;Winpdb&lt;/a&gt;Â is a great Python debugger which is platform independent.&lt;/div&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;I've also been working on SHM and will submit a PR soon for that. Besides my project, I also closed two issues this week related to printing inÂ &lt;code style=&quot;background-color: #f7f7f9; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 1px solid rgb(225, 225, 232); color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace !important; font-size: 12px; padding: 3px 4px;&quot;&gt;sympy.logic&lt;/code&gt;Â and helped to review few PRs.&lt;/div&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/issues/7179&quot;&gt;https://github.com/sympy/sympy/issues/7179&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;&quot;&gt;&lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/issues/7180&quot;&gt;https://github.com/sympy/sympy/issues/7180&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;&quot;&gt;PR:Â &lt;a style=&quot;color: blue;&quot; href=&quot;https://github.com/sympy/sympy/pull/7541&quot;&gt;https://github.com/sympy/sympy/pull/7541&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;We have a public channel(&lt;a style=&quot;color: blue;&quot; href=&quot;https://gitter.im/sympy/sympy/optics&quot;&gt;https://gitter.im/sympy/sympy/optics&lt;/a&gt;) to discuss about my project. You are welcome to join us, we would be more than happy to get feedback about the work. It'll help us refine it and cover a wider range of use cases.&lt;/div&gt;&lt;h4 style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 18px; margin: 0px;&quot; id=&quot;weeklog&quot;&gt;Weeklog&lt;/h4&gt;&lt;h6 style=&quot;color: #999999; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 11px; line-height: 18px; margin: 0px;&quot; id=&quot;merged&quot;&gt;MERGED&lt;/h6&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;Add tests for pretty printer&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Remove unnecessary if block&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Add IPython Notebook Checkpoints to .gitignore&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Remove double wrapping with u&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Add tests for printing Equivalent. fixes #7180&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Wrap unicode chars with u and fix a bug in latex printer&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Fix a typo in manipulation.rst [skip ci]&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Make equivalence symbol same for pretty printer and * latex printer and change not equivalent symbol to u+2262 [skip ci]&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Fix latex printing for Not(Equivalent) and Not(Implies).&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Fix pretty printing for Not(Equivalent) and Not(Implies). fixes #7179&lt;/li&gt;&lt;/ul&gt;&lt;h6 style=&quot;color: #999999; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 11px; line-height: 18px; margin: 0px;&quot; id=&quot;pending&quot;&gt;PENDING&lt;/h6&gt;&lt;ul style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li style=&quot;&quot;&gt;Change arg to *args [skip ci]&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Add rewrite expression methods [skip ci]&lt;/li&gt;&lt;li style=&quot;&quot;&gt;Add wavenumber property&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;color: #444444; font-family: Arvo, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 13px; line-height: 18px; margin-bottom: 9px;&quot;&gt;This is all for now. Cheers!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-06-02T02:02:05+00:00</dc:date>
	<dc:creator>Sudhanshu Mishra</dc:creator>
</item>
<item rdf:about="http://blog.s-d-b.com/?p=6">
	<title>Soumya Dipta Biswas: GSoC 2014: Week 1 and 2</title>
	<link>http://blog.s-d-b.com/gsoc-2014-week-1-and-2/</link>
	<content:encoded>&lt;p&gt;My last post was basically an introduction to myself, the program and the community. So, this will be my first post describing my work and the theories surrounding my work. For the remainder of this post and all future posts I will assume that the reader is familiar with the basics of Logic. If you have done any course associated with (mathematical) logic like Logic in Computer Science or Artificial Intelligence, or are familiar with the terms Conjunctive/Disjunctive Normal Form (CNF/DNF), Satisfiability (SAT), Validity, Consequence/Entailment etc. then you are good to go. It goes without saying that you need to know (atleast) the basics of python so as to understand the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Faster Conversion to CNF/DNF&lt;/strong&gt;&lt;br /&gt;
I started off working on converting to Normal Forms more efficiently. The original implementation was a recursive one. While this method was quite elegant, the performance took a major hit whenever the number of arguments went above 2 (which is quite a common scenario). My implementation is an iterative one whose performance remains almost the same regardless of the number of arguments. Iâll put up graphs detailing the difference in performance soon. In the meantime, I would like to discuss the theoretical base behind the algorithm, which I call iterative manipulation of sets. We start with 1 stack &lt;code&gt;S = [set(expr)]&lt;/code&gt; (here expr is the initial expression to be converted) and an empty list &lt;code&gt;T = []&lt;/code&gt;. The algorithm involves poping elements from the stack manipulating them and pushing back to the stack till we donât have a set containing all literals. Iâll outline the algorithm for conversion to CNF.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pop a set (say E) from the top of the stack. E is a set of literal and non-literals (functions like And, Or).&lt;/li&gt;
&lt;li&gt;Retrieve (and remove) the first function from E (say F). While this is an linear time operation, a small bookkeeping trick (described below) can make this a constant time operation.&lt;/li&gt;
&lt;li&gt;If no functions are available in E (i.e. E is a set of literals), then append E to T&lt;/li&gt;
&lt;li&gt;If a function is available then select the action to perform depending upon the class of F.
&lt;ul&gt;
&lt;li&gt;Function is Or: Simply add the arguments of F to E&lt;/li&gt;
&lt;li&gt;Function is And: For every argument of F, create a copy of E and add the argument to the corresponding copy of E. Push all these modified copies of E back to S.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat steps 1 â 4 until S is empty and T is a list of sets of literals. To get the expression simply return &lt;code&gt;And(*[Or(*clause) for clause in T])&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the reason why this algorithm works. The set of literals in T are Andâed together while the individual literals inside a set are Orâed with each other. In step 4, if two expressions have an Or relationship, they are placed into the same set. If however the have an And relationship, they are separated and put into 2 different sets. The running of the algorithm for &lt;code&gt;Or(And(a, b), c, d)&lt;/code&gt; is shown below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;S = [{Or(And(a, b), c, d)}], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {Or(And(a, b), c, d)}, S = [], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F = Or(And(a, b), c, d), E = {}, S = [], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F = Or(And(a, b), c, d), E = {And(a, b), c, d}, S = [{And(a, b), c, d}], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {And(a, b), c, d}, S = [], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F = And(a, b), E = {c, d}, S = [], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F = And(a, b), E1 = {a, c, d}, E2={b, c, d}, S = [{a, c, d}, {b, c, d}], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {a, c, d}, S = [{b, c, d}], T = []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {a, c, d}, S = [{b, c, d}], T = [{a, c, d}]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {b, c, d}, S = [], T = [{a, c, d}]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E = {b, c, d}, S = [], T = [{a, c, d}, {b, c, d}]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;S = [], T = [{a, c, d}, {b, c, d}]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return And(Or(a, c, d), Or(b, c, d))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For conversion to DNF, follow the exact same procedure replacing And with Or and vice versa.&lt;/p&gt;
&lt;p&gt;As mentioned above, retrieving a function from a mixture of functions and literals (as well as determining whether E contains any functions or not) is an O(n) operation. To perform this is O(1), use two different sets, one for functions and the other for literals. S now becomes a stack (list) of tuples, with each tuple containing 2 sets. &lt;code&gt;{And(a, b), c, d}&lt;/code&gt; will now become &lt;code&gt;({And(a, b)}, {c, d})&lt;/code&gt;. The set operations are performed as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add: &lt;code&gt;({And(a, b)}, {c, d}) + {x, y, And(x, z), Or(y, z)} = ({And(a, b), And(x, z), Or(y, z)}, {c, d, x, y})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Retrieve Function: &lt;code&gt;X = ({And(a, b)}, {c, d}); return X[0].pop() if X[0] else None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Remove Automatic Evaluation&lt;/strong&gt;&lt;br /&gt;
Currently SymPy has a lot of (automatic) evaluation of formulas that happens without user intent. While this makes life easier for us programmers, this isnât always very intuitive for the user. Hence, there has been a decision to remove this and instead shift to a need based simplification (evaluation). There is however a need to differentiate between evaluation and short-circuiting, and leave all of the latter in place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And/Or&lt;/strong&gt;&lt;br /&gt;
Almost no automatic evaluation takes place here, except short-circuiting i.e. &lt;code&gt;And(False, a, b, ...) = False&lt;/code&gt; and &lt;code&gt;Or(True, a, b, ...) = True&lt;/code&gt; and converting &lt;code&gt;And(And(a, b), And(c, d))&lt;/code&gt; to &lt;code&gt;And(a, b, c, d)&lt;/code&gt;. Except this no other evaluation takes place like reducing &lt;code&gt;A &amp;amp; ~A&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;A | ~A&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;br /&gt;
Previously, De-Morganâs Laws were automatically applied to the arguments, however this has now been removed. So &lt;code&gt;Not(A | B)&lt;/code&gt; will stay so instead of automatically evaluating to &lt;code&gt;~A &amp;amp; ~B&lt;/code&gt;. Now, the only evaluation that takes place is &lt;code&gt;Not(Not(A)) = A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implies&lt;/strong&gt;&lt;br /&gt;
Implication evaluates its arguments if either of the arguments are boolean. So, that gives rise to 4 cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True &amp;gt;&amp;gt; X = X&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;False &amp;gt;&amp;gt; X = True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X &amp;gt;&amp;gt; True = True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X &amp;gt;&amp;gt; False = ~X&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Equivalence&lt;/strong&gt;&lt;br /&gt;
SymPy doesnât automatically convert equivalence into bi-implications or into And/Or. However it does perform the following 3 simplifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Equivalent(True, a, b, ...) = And(a, b, ...)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equivalent(False, a, b, ...) = Not(Or(a, b, ...))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equivalent(True, False, a, b, ...) = False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Exclusive-Or&lt;/strong&gt;&lt;br /&gt;
Previously Xor did not have an independent existence in SymPy and all Xor expressions were automatically converted into And/Or sequences. Now one can create and use expressions using Xor subject to the following transformations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Xor(True, True, a, b, ...) = Xor(a, b, ...)&lt;/code&gt; (Even number of &lt;code&gt;True&lt;/code&gt; arguments)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Xor(True, True, True, a, b, ...) = Not(Xor(a, b, ...))&lt;/code&gt; (Odd number of &lt;code&gt;True&lt;/code&gt; arguments)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Xor(Xor(a, b), Xor(c, d)) = Xor(a, b, c, d)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ITE&lt;/strong&gt;&lt;br /&gt;
Similar to Xor above, even ITE had no independant class and all expressions were automatically converted. This has been removed and one can create objects of type ITE subject to the following evaluations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ITE(True, a, b) = a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ITE(False, a, b) = b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ITE(a, b, b) = b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That pretty much covers the major tasks I did, in the first 2 weeks. See you next week.&lt;/p&gt;
&lt;p&gt;Au Revoir!!!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-01T21:15:13+00:00</dc:date>
	<dc:creator>SD</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/gsoc/csympy-week2/">
	<title>Sushant Hiray: This Week in CSymPy: #2</title>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week2/</link>
	<content:encoded>&lt;p&gt;Week 2 for GSoC just ended and Iâve managed to complete the plans for this week.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;I started off the week with analysing the inverse trignometric module in SymPy.
In SymPy particularly when &lt;code&gt;eval&lt;/code&gt; is called it generates a lookup table and then searches for the argument in the table.
Since the table was made separately for each class it had the exact values needed. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
To avoid creating a lookup table each time an object is created, I created 2 global lookup tables.
&lt;code&gt;inverse_cst&lt;/code&gt; (used by &lt;code&gt;asin&lt;/code&gt;,&lt;code&gt;acos&lt;/code&gt;,&lt;code&gt;asec&lt;/code&gt;,&lt;code&gt;acsc&lt;/code&gt;) and &lt;code&gt;inverse_tct&lt;/code&gt; (used by &lt;code&gt;atan&lt;/code&gt; and &lt;code&gt;acot&lt;/code&gt;)
Since a common lookup table was created I had to tweak the return value according to the class which called it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
All the progress is in &lt;a href=&quot;https://github.com/sympy/csympy/pull/176&quot;&gt;pull 176&lt;/a&gt;. It is almost good to merge. Once the Travis build results show up we will merge this into master.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
In the midst of this week, myself and Thilina almost together  got stuck on a &lt;a href=&quot;https://github.com/sympy/csympy/issues/174&quot;&gt;bug&lt;/a&gt;. When I posted the bug, Thilina acknowledged it failed on his system too and he shipped a fix.
Thankfully we have &lt;code&gt;CSYMPY_ASSERT()&lt;/code&gt; written everywhere to catch such bugs!
A couple of days back I figured out yet another &lt;a href=&quot;https://github.com/sympy/csympy/issues/179&quot;&gt;bug&lt;/a&gt; because of which one of test cases was failing. We are yet to fix this one.&lt;/p&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;Most of the discussions with Ondrej and Thilina happened over the pull requests and the issues itself. Myself and Thilina did confirm the bugs on gitter just to be sure, before reporting them.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;Firstly merge the current PR into master. Fix &lt;a href=&quot;https://github.com/sympy/csympy/issues/179&quot;&gt;#179&lt;/a&gt;.
We will also try to implement the &lt;code&gt;Exponential Module&lt;/code&gt;. After this module we shoule be able to do things like &lt;code&gt;rewrite__as_cos&lt;/code&gt; for the exponential class.
Also if Ondrej is free, he will be writing the python wrappers for &lt;code&gt;Trignometric Module&lt;/code&gt; now that it is complete on the base level.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-01T18:30:00+00:00</dc:date>
</item>
<item rdf:about="http://kundankumar185.wordpress.com/?p=11">
	<title>Kundan Kumar: As Journey goes On</title>
	<link>http://kundankumar185.wordpress.com/2014/06/01/as-journey-goes-on/</link>
	<content:encoded>&lt;p&gt;Second week of Gsoc has been finished and I must say it has been one of most fruitful week for me. Lots and lots of work and enjoyment with learning new things thats what one want. Though this week work has not been finished but what I learned this is incomparable to what has I learned till now and in such a short period of time. I sometime imagined how can a novice like me can complete such tasks in GSoC and now I feel we have great mentors with us who are always available to help us teach us. I am thankful to my mentors Tim and Sean and aha Smith he also helped a lot.&lt;/p&gt;
&lt;p&gt;The work of this week passed correcting and modifying things I have done till now so little time was left to do this week work. So the new &lt;a href=&quot;https://github.com/sympy/sympy/pull/7527&quot;&gt;PR&lt;/a&gt; sent is incomplete but will complete soon. The next week I aim to complete the remaining job and implement linear system of 3 equations of 1st order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/11/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/11/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=11&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-01T16:15:39+00:00</dc:date>
	<dc:creator>Kundan</dc:creator>
</item>
<item rdf:about="http://blog.s-d-b.com/?p=13">
	<title>Soumya Dipta Biswas: GSoC 2014: Introduction</title>
	<link>http://blog.s-d-b.com/gsoc-2014-introduction/</link>
	<content:encoded>&lt;p&gt;Hello Everyone,&lt;/p&gt;
&lt;p&gt;So, I got into the Google Summer of Code 2014 under SymPy. Let me introduce myself â My name is Soumya Dipta Biswas (but almost everyone calls me SD). I am currently pursuing M.Sc. (Tech.) Information Systems from Birla Institute of Technology and Science â Pilani, Goa Campus. I just completed my 3rd year and will be graduating in June 2015.&lt;/p&gt;
&lt;p&gt;Ok, so enough about me. Moving on to the program, I believe most of you would have heard of the GSoC (it has been around for 10 years now). However if you havenât and are (or will be) in college and are interested in giving back to the open source community, you should definitely have a look at the &lt;a href=&quot;http://www.google-melange.com/&quot; target=&quot;_blank&quot; title=&quot;GSoC&quot;&gt;Google Summer of Code&lt;/a&gt; page and give it a shot next year.&lt;/p&gt;
&lt;p&gt;The open-source organization I will be contributing to is SymPy. If you have been using Python, then you have most likely used or atleast heard of SymPy. SymPy is a great Python tool for symbolic mathematics and has support for most of the commonly used areas: Calculus, Geometry, Matrices, Logic and even Physics. You can find out more about it at the &lt;a href=&quot;http://sympy.org/en/index.html&quot; target=&quot;_blank&quot; title=&quot;SymPy&quot;&gt;SymPy homepage&lt;/a&gt; or if you want to give it a try online, use the &lt;a href=&quot;http://live.sympy.org/&quot; target=&quot;_blank&quot; title=&quot;SymPy Live Shell&quot;&gt;SymPy Live Shell&lt;/a&gt;. If you have been using it and would like to contribute, visit &lt;a href=&quot;https://github.com/sympy/sympy/&quot; target=&quot;_blank&quot; title=&quot;SymPy on GitHub&quot;&gt;SymPy on GitHub&lt;/a&gt; (&lt;a href=&quot;https://github.com/sympy/sympy/wiki&quot; target=&quot;_blank&quot; title=&quot;wiki&quot;&gt;wiki&lt;/a&gt;). SymPy has a very supportive and really great community, so feel free to contact us in case you need any help.&lt;/p&gt;
&lt;p&gt;Now letâs move on to the focus of the program, the project. I will primarily be contributing to the Logic module already existing in SymPy. Currently, there exists a fully functional propositional logic module and I propose to improve it by making the entire system faster and more efficient. On the other hand, SymPy has almost no support for First Order Logic. So, I propose to build the architecture for First Order Logic module which will finally culminate into a full fledged Inference System. You can find more details about my project in my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Soumya-Dipta-Biswas:-Propositional-and-First-Order-Logic&quot; target=&quot;_blank&quot; title=&quot;GSoC Proposal&quot;&gt;GSoC Proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I guess thatâs all for the introductions. Before signing off, I must mention that I am really exicted to be a part of SymPy and am looking forward to a great summer ahead.&lt;/p&gt;
&lt;p&gt;Cheers!!!&lt;/p&gt;</content:encoded>
	<dc:date>2014-06-01T14:24:15+00:00</dc:date>
	<dc:creator>SD</dc:creator>
</item>
<item rdf:about="http://codesachin.wordpress.com/?p=11">
	<title>Sachin Joglekar: GSoC 2014 Second Week: Basics of Vector, and Del operator</title>
	<link>http://codesachin.wordpress.com/2014/06/01/gsoc-2014-second-week-basics-of-vector-and-del-operator/</link>
	<content:encoded>&lt;p&gt;In my previous blog post, I had mentioned that I had begun working somewhat on a new branch for the vector module. This week was spent in polishing that work. But more importantly, I spent time confirming that my last weekâs idea â of implementing the Vector framework, BaseScalar class, and the Del operator &lt;em&gt;before&lt;/em&gt; implementing coordinate systems â does make sense. What this essentially means is that all the operations will occur in one frame &lt;strong&gt;onlyÂ &lt;/strong&gt;(for now).&lt;/p&gt;
&lt;p&gt;I have implemented the Vector framework to a great extent by now, the BaseScalar class is done, and so is the Del operator. I have tried keeping the API of the Del class as âeasyâ as possible, mainly so that the expressions typed out in code, would be very simple to read even for a non-fluent programmer.&lt;/p&gt;
&lt;p&gt;To confirm that the one-system-framework does work, I tried proving all of the product rules of vector differential calculus (using the constructed API).&lt;/p&gt;
&lt;p&gt;HereÂ  is a snippet of (actual) Python-Shell session proving the last product rule-&lt;/p&gt;
&lt;p&gt;Rule says :&lt;/p&gt;
&lt;dl&gt;
&lt;dd&gt;&lt;img src=&quot;http://upload.wikimedia.org/math/d/5/b/d5b8119de472d7a6d75c1672e93ccd34.png&quot; alt=&quot;\nabla \times (\vec u \times \vec v) = \vec u \, (\nabla \cdot \vec v) - \vec v \, (\nabla \cdot \vec u) + (\vec v \cdot \nabla) \, \vec u - (\vec u \cdot \nabla) \, \vec v&quot; class=&quot;mwe-math-fallback-png-inline tex&quot; /&gt;&lt;/dd&gt;
&lt;dd&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;Shell session (i, j and k denote base vectors, while x, y and z denote base scalars)-&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; u = x**2 * i + 4 * j - y**2*z * k&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; v = 4 * i + x*y*z * k&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; lhs = delop ^ (u ^ v)&lt;br /&gt;
&amp;gt;&amp;gt; rhs = u * (delop &amp;amp; v) - v * (delop &amp;amp; u) + (v &amp;amp; delop) * u - (u &amp;amp; delop) * v&lt;br /&gt;
&amp;gt;&amp;gt;&amp;gt; simplify(lhs) == simplify(rhs)&lt;br /&gt;
True&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I guess intensive coding will begin this week onwards. The first priority would be to ensure that the Vector framework is foolproof, by writing unit tests and some long ones. I would also like SymPy functions like the &lt;em&gt;solve &lt;/em&gt;one, to work with vector too (To solve problems like â given 3 vectors, prove that they can be used as a valid basis for 3D space). Then, I will most likely send a PRÂ  with the work done till now. On a different branch, Iâll start working on the CoordSys class. Thats all for now! Have a great wek!&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/11/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/11/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=11&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-06-01T09:46:47+00:00</dc:date>
	<dc:creator>srjoglekar246</dc:creator>
</item>
<item rdf:about="tag:,2014-05-30:gsoc-week-2.html">
	<title>Jim Crist: GSoC Week 2: Started Work on Linearizer Class</title>
	<link>http://jcrist.github.io/gsoc-week-2.html</link>
	<content:encoded>&lt;p&gt;This week I started work on implementing a general linearization method in 
&lt;code&gt;Sympy&lt;/code&gt;. The current plan is to implement this in three parts:&lt;/p&gt;
&lt;h3&gt;1. &lt;strong&gt;A &lt;code&gt;Linearizer&lt;/code&gt; class&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This will hold the general form described by Luke and Gilbert's paper. The form
is:&lt;/p&gt;
&lt;p&gt;\begin{aligned}
f_{c}(q, t) &amp;amp;= 0_{l \times 1} \\
f_{v}(q, u, t) &amp;amp;= 0_{m \times 1} \\
f_{a}(q, \dot{q}, u, \dot{u}, t) &amp;amp;= 0_{m \times 1} \\
f_{0}(q, \dot{q}, t) + f_{1}(q, u, t) &amp;amp;= 0_{n \times 1} \\
f_{2}(q, \dot{u}, t) + f_{3}(q, \dot{q}, u, r, t) &amp;amp;= 0_{(o-m) \times 1}
\end{aligned}&lt;/p&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;p&gt;\begin{aligned}
q, \dot{q} &amp;amp; \in \mathbb{R}^n \\
u, \dot{u} &amp;amp; \in \mathbb{R}^o \\
r &amp;amp; \in \mathbb{R}^s 
\end{aligned}&lt;/p&gt;
&lt;p&gt;Once in this general form, the algorithm devised by Luke and Gilbert is able to
linearize the system properly (not messing up due to constraints, as shown
&lt;a href=&quot;http://jcrist.github.io/gsoc-week-1.html&quot;&gt;last week&lt;/a&gt;). The resulting linearized
form is:&lt;/p&gt;
&lt;p&gt;$$ M \begin{bmatrix} \delta \dot{q} \\ \delta\dot{u} \end{bmatrix} = 
A \begin{bmatrix} \delta q_{i} \\ \delta u_{i} \end{bmatrix} + B \begin{bmatrix}\delta r \end{bmatrix}$$&lt;/p&gt;
&lt;p&gt;where $M$, $A$, and $B$ are matrices. A class method &lt;code&gt;linearize&lt;/code&gt; is used to
perform this step.&lt;/p&gt;
&lt;h3&gt;2. &lt;strong&gt;A &lt;code&gt;linearize&lt;/code&gt; function&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This will take input systems of various forms (formed by &lt;code&gt;KanesMethod&lt;/code&gt;,
&lt;code&gt;LagrangesMethod&lt;/code&gt;, or ideally a general matrix of equations). The function
will then turn the system into the general form described above, create
an instance of &lt;code&gt;Linearizer&lt;/code&gt;, call the &lt;code&gt;linearize&lt;/code&gt; method, and return the
result.&lt;/p&gt;
&lt;p&gt;To make this conversion easy and general, any class that implements a
&lt;code&gt;to_linearizer&lt;/code&gt; method can be linearized. One has been written for
&lt;code&gt;KanesMethod&lt;/code&gt; already. Originally I thought I could get equations formed
with Lagranges Method into this general form as well, but now I'm not sure.
The multipliers could be treated as dependent speeds (eliminating them from
the state vector), but for the linearization to be valid a trim point for
each multiplier will still need to be chosen. I'm going to think about this for
a while, and finish the remaining functionality for the &lt;code&gt;KanesMethod&lt;/code&gt; class
first. If it turns out this can't be generalized for Lagrange's method, then a
seperate control flow path will need to be added.&lt;/p&gt;
&lt;h3&gt;3. &lt;strong&gt;&lt;code&gt;linearize&lt;/code&gt; class methods for &lt;code&gt;KanesMethod&lt;/code&gt; and &lt;code&gt;LagrangesMethod&lt;/code&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;These will be nice wrappers for the linearize function, making the linearization
process as easy as creating the Method object, and then calling 
&lt;code&gt;Method.linearize()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What's done so far&lt;/h2&gt;
&lt;p&gt;This week I implemented the beginnings of the &lt;code&gt;Linearizer&lt;/code&gt; class. So far it can
only handle systems with &lt;em&gt;both&lt;/em&gt; motion and configuration constraints. I plan on
finishing up the remaining control paths for just motion, just
configuration, and no constraint systems next week. For testing this
functionality, I used the rolling disk example used in Luke and Gilbert's paper.
With the current functionality, linearization works as:&lt;/p&gt;
&lt;div style=&quot;background: #272822;&quot; class=&quot;codehilite&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span style=&quot;color: #75715e;&quot;&gt;# Equations for the disk are derived above, KM is a KanesMethod object&lt;/span&gt;
&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearizer&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;KM&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;to_linearizer()&lt;/span&gt;
&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;A,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;B&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearizer&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;linearize(eq_q,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;eq_u,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;eq_qd,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;eq_ud,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;A_and_B&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;True)&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;# Evaluating in an upright configuration at critical speed:&lt;/span&gt;
&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;upright_critical_speed&lt;/span&gt; &lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;{q1d:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q2:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;q3d:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;sqrt(&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;),&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;m:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;r:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;g:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #75715e;&quot;&gt;#Calculating the critical speed eigenvalues, they should all be zero&lt;/span&gt;
&lt;span style=&quot;color: #f92672;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #f8f8f2;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;subs(upright_critical_speed)&lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;eigenvals()&lt;/span&gt;
&lt;span style=&quot;color: #f8f8f2;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #ae81ff;&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also added a &lt;code&gt;to_linearizer&lt;/code&gt; method to the &lt;code&gt;KanesMethod&lt;/code&gt; class. This finds all
the needed information in the &lt;code&gt;KanesMethod&lt;/code&gt; object, and returns a &lt;code&gt;Linearizer&lt;/code&gt;
object. I'd say this is done as well, and is also tested in the
&lt;code&gt;test_linearize_rolling_disc&lt;/code&gt; test.&lt;/p&gt;
&lt;p&gt;Two other tests were also written, but not finished. They build off the example
I wrote up &lt;a href=&quot;http://jcrist.github.io/gsoc-week-1.html&quot;&gt;last week&lt;/a&gt; with a minimal 
and nonminimal pendulum system. I also have this same system worked out in
minimal and nonminimal coordinates using &lt;code&gt;LagrangesMethod&lt;/code&gt;. Because it is so
quick to compute, and intuitive to know if it's correct or not I think this
will be an excellent way to test the functionality of the linearization
routines.&lt;/p&gt;
&lt;p&gt;All of this work can be seen (and hopefully commented on, I need code review!) 
in &lt;a href=&quot;https://github.com/jcrist/sympy/pull/1&quot;&gt;this pull request&lt;/a&gt;. As it's still
very much a work in progress, I made a pull request on my own master branch, 
so that others can review it before I submit it to Sympy proper.&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</content:encoded>
	<dc:date>2014-05-30T23:00:00+00:00</dc:date>
	<dc:creator>Jim Crist</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-54146973659574488.post-8828642408732656832">
	<title>Akshay Narasimha: Gsoc Week 1</title>
	<link>http://geekpy.blogspot.com/2014/05/gsoc-week-1.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;The first week of Gsoc has come to an end. Most of the time was spent on trying to decide the class structure for the new Point3D class.&lt;br /&gt;&lt;br /&gt;The initial class structure which I proposed was to letÂ  the Point class inherit from the Point3D class as they have a lot of methods in common and also to allow interaction between these two classes.&lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;Point(1,2).distance(Point3D(1,2,3))&lt;br /&gt;3&lt;br /&gt;But after having a long discussion with Stefan and the mailing list we decided to keep both the classes seperate and raise an error for interactions like the one above.&lt;br /&gt;&lt;br /&gt;So what if the user wants the above interaction? For that we decided to have a method in the Plane class( to be implemented) which converts a 2D point to 3D allowing the user to choose any plane he wants, after that he could compute the distance in the above example.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/hqHC-9cA9UM&quot;&gt;Here&lt;/a&gt; is the link to the discussion on the mailing list.&lt;br /&gt;And I have implemented the Point3D class and the link to the PR is &lt;a href=&quot;https://github.com/sympy/sympy/pull/7522&quot;&gt;here.&lt;/a&gt;&lt;br /&gt;This following week I plan toÂ  work on the Line class in 3D using the Point3D class as the base.&lt;br /&gt;&lt;br /&gt;Till then Cheers! &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-28T11:48:24+00:00</dc:date>
	<dc:creator>Akshay Narasimha</dc:creator>
</item>
<item rdf:about="http://thilinaatsympy.wordpress.com/?p=302">
	<title>Thilina Rathnayake: GSoC 2014 â Implemented Basic Matrix Classes</title>
	<link>http://thilinaatsympy.wordpress.com/2014/05/27/gsoc-2014-implemented-basic-matrix-classes/</link>
	<content:encoded>&lt;p&gt;Hi All, When the first week of the GSoC comes to an end, I was able to finish the basic structure of the Matrix class and implement some of the functionalities related to the `DenseMatrix` class. I implemented Matrix addition, multiplication, scalar addition and scalar multiplication. I am yet to update the PR with these changes. I am currently working on Gaussian elimination and having a few problems with that. I wish to solve these as soon as possible. After sorting it out, I wish to benchmark my implementation against other libraries such as Linbox and GiNaC.&lt;/p&gt;
&lt;h3&gt;Matrix Class Structure&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;`MatrixBase` Class&lt;br /&gt;
&lt;strong&gt;class MatrixBase: public Basic {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;public:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  MatrixBase(unsigned row, unsigned col)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  : row_{row}, col_{col} {};&lt;/strong&gt;&lt;strong&gt;Â Â Â  // Below methods should be implemented by the derived classes. If not&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // applicable, raise an exception&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  // Get and set elements&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const Basic&amp;gt;get(unsigned i) const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual void set(unsigned i, RCP&amp;lt;const Basic&amp;gt; &amp;amp;e) = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  virtual unsigned rank() const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const Basic&amp;gt; det() const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; inv() const = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  // These functions create a new instance of either DenseMatrix or&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // SparseMatrix and return a reference to the result&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; add_matrix(const MatrixBase &amp;amp;other) const = 0;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; mul_matrix(const MatrixBase &amp;amp;other) const = 0;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;protected:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // Stores the dimension of the Matrix&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned col_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;};&lt;br /&gt;
&lt;/strong&gt;&lt;br /&gt;
Most important thing about the `MatrixBase` class is that it is derived from the CSymPy `Basic` class. This enables the classes that are derived from `MatrixBase` to be used wherever a `Basic` class is used. This has a lot of advantages. `DenseMatrix` class is derived from `MatrixBase` class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;`DenseMatrix` class&lt;br /&gt;
&lt;strong&gt;class DenseMatrix: public MatrixBase {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;public:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // Constructors&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  DenseMatrix(unsigned row, unsigned col);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  DenseMatrix(unsigned row, unsigned col, std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; &amp;amp;l);&lt;/strong&gt;&lt;strong&gt;Â Â Â  // Virtual functions inherited from Basic class&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual std::size_t __hash__() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual bool __eq__(const Basic &amp;amp;o) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual int compare(const Basic &amp;amp;o) const;&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  // Should implement all the virtual methods from MatrixBase&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // and throw an exception if a method is not applicable.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // add_matrix, mul_matrix will have to find the correct function&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // to call depending on the `other` argument.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  // Get and set elements&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const Basic&amp;gt; get(unsigned i) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual void set(unsigned i, RCP&amp;lt;const Basic&amp;gt; &amp;amp;e);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  virtual unsigned rank() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const Basic&amp;gt; det() const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; inv() const;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  // Matrix addition&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; add_matrix(const MatrixBase &amp;amp;other) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  friend RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  const DenseMatrix &amp;amp;B);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  friend RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_scalar(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  RCP&amp;lt;const Basic&amp;gt; &amp;amp;k);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â  Â &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // Matrix multiplication&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  virtual RCP&amp;lt;const MatrixBase&amp;gt; mul_matrix(const MatrixBase &amp;amp;other) const;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  friend RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  const DenseMatrix &amp;amp;B);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  friend RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_scalar(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  RCP&amp;lt;const Basic&amp;gt; &amp;amp;k);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â  Â &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // Gaussian elimination&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  friend RCP&amp;lt;const DenseMatrix&amp;gt; gaussian_elimination(const DenseMatrix &amp;amp;A);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â  Â &lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;protected:&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  // Matrix elements are stored in row-major order&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; m_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;};&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some of the functions are declared as friend functions so that these can access private and protected members of the `DenseMatrix` class. This makes coding the algorithms a bit easier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Friend function implementations
&lt;ul&gt;
&lt;li&gt;add_dense_dense&lt;br /&gt;
&lt;strong&gt;RCP&amp;lt;const DenseMatrix&amp;gt; add_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  const DenseMatrix &amp;amp;B)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;{&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned row = A.row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned col = A.col_;&lt;/strong&gt;&lt;strong&gt;Â Â Â  CSYMPY_ASSERT(row == B.row_ &amp;amp;&amp;amp; col == B.col_)&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; sum(row*col);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt;::const_iterator ait = A.m_.begin();&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt;::const_iterator bit = B.m_.begin();&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  for(auto &amp;amp;it: sum) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  it = add(*ait, *bit);&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  ait++;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  bit++;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  return rcp(new DenseMatrix(row, col, sum));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;mul_dense_dense&lt;br /&gt;
&lt;strong&gt;RCP&amp;lt;const DenseMatrix&amp;gt; mul_dense_dense(const DenseMatrix &amp;amp;A,&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  const DenseMatrix &amp;amp;B)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;{&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned row = A.row_;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  unsigned col = A.col_;&lt;/strong&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  CSYMPY_ASSERT(col == B.row_)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  std::vector&amp;lt;RCP&amp;lt;const Basic&amp;gt;&amp;gt; prod(row*B.col_);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  for (unsigned r = 0; r&amp;lt;row; r++) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  for (unsigned c = 0; c&amp;lt;B.col_; c++) {&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  prod[r*B.col_ + c] = zero; // Integer Zero&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â  for (unsigned k = 0; k&amp;lt;col; k++)&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  prod[r*B.col_ + c] = add(prod[r*B.col_ + c],&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  mul(A.m_[r*col + k], B.m_[k*B.col_ + c]));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â Â Â Â Â  }&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Â Â Â  }&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Â Â Â  return rcp(new DenseMatrix(row, B.col_, prod));&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Plan for this week&lt;/h3&gt;
&lt;p&gt;I wish to finish implementing Gaussian elimination and do some benchmarks.&lt;/p&gt;
&lt;p&gt;Â &lt;/p&gt;
&lt;p&gt;Â &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/302/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/302/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=302&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-05-27T17:10:13+00:00</dc:date>
	<dc:creator>Thilina Rathnayake</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-8694557721186369600">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/05/in-this-first-week-i-finished.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;In this first week I finished implementing the MrvAsympt algorithm as given by Dominik gruntz in his paper &quot;A new algorithm for computing asymptotic series&quot;.&lt;br /&gt;&lt;br /&gt;One of the features of this algorithm is hierarchical series where it terminates the recursion early perhaps to give better results. Determining whether terminating earlier is better is a tough task. I left it to the user by introducing a new parameter ``hir``. If its True, it terminates after one level of expansion.&lt;br /&gt;Also in some cases going further into recursion might fail to give an asymptotic expansion. In such cases this is useful as it at least gives the user some result.&lt;br /&gt;A good example for this would be:-&lt;br /&gt;&lt;pre style=&quot;&quot;&gt;&lt;code style=&quot;color: black;&quot;&gt; &amp;gt;&amp;gt;&amp;gt; e = sin(x) * cos(exp(-x))  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x)  &lt;br /&gt; ...  &lt;br /&gt; PoleError  &lt;br /&gt; ...  &lt;br /&gt; &amp;gt;&amp;gt;&amp;gt; e.aseries(x, hir=True)  &lt;br /&gt; exp(-4*x)*sin(x)/24 - exp(-2*x)*sin(x)/2 + sin(x) + O(exp(-6*x), (x, oo))  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;Also I checked for conditions of infinite recursion. If the most rapidly varying subexpression is same as the function, we need to find a canonical representation of the equivalence class. It is found by taking the leading term of the argument of the most rapidly varying subexpression. If the canonical representation is also an exponential, it goes into infinite recursion.&lt;br /&gt;&lt;br /&gt;The issues I faced was to how to integrate this code into the existing series method.&lt;br /&gt;E.g.:- series(sin(1/x + exp(-x)) - sin(1/x), x, oo) just returns O(x**-6, (x, oo)) before. Now, if series fails to produce any relevant result or gives an error, it calls this algorithm to try and find an asymptotic expansion of the function.&lt;br /&gt;&lt;br /&gt;Next week I plan to implement asymptotic expansion for special functions where ever possible. Also I'll add various test cases related to asymptotic series. Most of them are from examples given in Gruntz paper.&lt;br /&gt;I hope to send the PR soon and get it merged without giving any troubles. &lt;/div&gt;</content:encoded>
	<dc:date>2014-05-25T19:53:07+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="https://hargup.github.io/posts/gsoc-2014-with-sympy.html">
	<title>Harsh Gupta: GSoC 2014 with Sympy</title>
	<link>https://hargup.github.io/posts/gsoc-2014-with-sympy.html</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;Hi, I'm Harsh Gupta an undergrad student at IIT Kharagpur, I've been accepted
this year for the Google Summer of Code program with Sympy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, What is a Google Summer of Code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Summer of Code is a program by Google to promote opensource development.
In this program Google pays handsome stipends to students to work for various opensource
organisations. In the application phase the students have to write proposals to
the organisations describing the projects they want to do
and how do they fit for it. If the proposal is accepted the student is provided
with a mentor and with the guidance of the mentor the student has to complete
the project in the given timeline. You can look at my
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers&quot;&gt;proposal&lt;/a&gt;.
I proposed to work on improving the current equation solvers in
Sympy. My mentors for the Project are &lt;a href=&quot;https://github.com/mrocklin&quot;&gt;Matthew Rocklin&lt;/a&gt;
and &lt;a href=&quot;https://github.com/skirpichev&quot;&gt;Sergey B Kipirchev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A word about Sympy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sympy.org/&quot;&gt;Sympy&lt;/a&gt; is a pure python library for symbolic computation. Symbolic
computation is similar to the maths you do by hands and it differs from
numerical computations. More about Symbolic and Numerical computation in
some other post. Sympy has been created by hundreds of contributors starting from 2006.
It has an awesome developer
community and we encourage outsiders to contribute and get their hands dirty with
the code. What do you need to start contributing? Some python skills and little
patience. Download the &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;latest development code&lt;/a&gt;.
Go through the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Development-workflow&quot;&gt;development workflow&lt;/a&gt;.
Find something to work on from the
&lt;a href=&quot;https://github.com/sympy/sympy/issues?labels=Easy+to+Fix&amp;amp;milestone=&amp;amp;page=1&amp;amp;state=open&quot;&gt;EasyToFix Issues&lt;/a&gt;.
Code it and send us a &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;pull request&lt;/a&gt;. Happy Coding.&lt;/p&gt;
&lt;p&gt;I'll give a brief about the project aim and current state of work in the next post.
I'm looking forward for a great summer with Sympy.&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-25T19:24:22+00:00</dc:date>
</item>
<item rdf:about="https://hargup.github.io/blog/gsoc-2014-with-sympy.html">
	<title>Harsh Gupta: GSoC 2014 with Sympy</title>
	<link>https://hargup.github.io/blog/gsoc-2014-with-sympy.html</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;Hi, I'm Harsh Gupta an undergrad student at IIT Kharagpur, I've been accepted
this year for the Google Summer of Code program with Sympy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, What is a Google Summer of Code?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Summer of Code is a program by Google to promote opensource development.
In this program Google pays handsome stipends to students to work for various opensource
organisations. In the application phase the students have to write proposals to
the organisations describing the projects they want to do
and how do they fit for it. If the proposal is accepted the student is provided
with a mentor and with the guidance of the mentor the student has to complete
the project in the given timeline. You can look at my
&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers&quot;&gt;proposal&lt;/a&gt;.
I proposed to work on improving the current equation solvers in
Sympy. My mentors for the Project are &lt;a href=&quot;https://github.com/mrocklin&quot;&gt;Matthew Rocklin&lt;/a&gt;
and &lt;a href=&quot;https://github.com/skirpichev&quot;&gt;Sergey B Kipirchev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A word about Sympy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sympy.org/&quot;&gt;Sympy&lt;/a&gt; is a pure python library for symbolic computation. Symbolic
computation is similar to the maths you do by hands and it differs from
numerical computations. More about Symbolic and Numerical computation in
some other post. Sympy has been created by hundreds of contributors starting from 2006.
It has an awesome developer
community and we encourage outsiders to contribute and get their hands dirty with
the code. What do you need to start contributing? Some python skills and little
patience. Download the &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;latest development code&lt;/a&gt;.
Go through the &lt;a href=&quot;https://github.com/sympy/sympy/wiki/Development-workflow&quot;&gt;development workflow&lt;/a&gt;.
Find something to work on from the
&lt;a href=&quot;https://github.com/sympy/sympy/issues?labels=Easy+to+Fix&amp;amp;milestone=&amp;amp;page=1&amp;amp;state=open&quot;&gt;EasyToFix Issues&lt;/a&gt;.
Code it and send us a &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;pull request&lt;/a&gt;. Happy Coding.&lt;/p&gt;
&lt;p&gt;I'll give a brief about the project aim and current state of work in the next post.
I'm looking forward for a great summer with Sympy.&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-25T19:24:22+00:00</dc:date>
</item>
<item rdf:about="http://codesachin.wordpress.com/?p=6">
	<title>Sachin Joglekar: GSoC First Week: Getting priorities straight</title>
	<link>http://codesachin.wordpress.com/2014/05/25/gsoc-first-week-getting-priorities-straight/</link>
	<content:encoded>&lt;p&gt;Ok. My first week with the my second iteration of Google Summer of Code. Things have been different this time right from the word go. Mainly to do with software design, or rather the approach to it. Jason and I have had lengthy discussions about this, and we have been trying to work out a good plan to get things done in a structured way this summer. I am hoping that this will avoid the problems Prasoon and I encountered oh-so-frequently last summer. They were mainly because we had too many TODOs and objectives all at the same time, instead of doing things step-by-step, in an incremental manner.&lt;/p&gt;
&lt;p&gt;What I have been doing this week, is thinking and talking to people regarding what the use-cases of the new module will be. I had started out trying to design an overly generalized system, but talking to Jason and Stefan has made me realise that its better to get the set of objectives straight.&lt;/p&gt;
&lt;p&gt;Basically, I have been listing out as many micro-use-cases as I can. Something like â âI, as a SymPy developer, would like to use the new vector module to prove the integral forms of Maxwellâs equations.â This is where the talking to many people came into the picture. Things like these, though they may seem a lot to process, admittedly do help you focus on whats high-priority.&lt;/p&gt;
&lt;p&gt;Broadly, I have divided my objectives for the module into the following incremental development âstepsâ-&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;i)Implementation of a basic Vector framework&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;ii)Implementation of the Del operator&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;iii)Conversion to and from coordinate systems other than Cartesian&lt;/i&gt;&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;iv) Having an API for doing vector math in different coordinate systems.&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;v)Implementation of Coordinate System class, along with a Point class&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;vi)Implementation of time-dependent functionality&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;vii)Implementation of LaTeX functionality &lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;i&gt;viii) Implementation of vector-integral functionality&lt;br /&gt;
&lt;/i&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Each of these, as you can probably see, can be done one-at-a-time (ofcourse many of them have prerequisites, like vi requiring i and v). In any case, the incremental model of software design does seem to fit well to developing the new vector module â with something like the waterfall model being used for each of these objectives individually.&lt;/p&gt;
&lt;p&gt;On the coding front, I have pretty much done with objective i. I have a stable (with a few mods necessary) system of basic vector math in place on my &lt;em&gt;gsocvect&lt;/em&gt; branch on github. I have avoided usage of coordinate systems, to ensure that the Vector class fits well with the SymPy core. Some things still need to be ironed out, like usage of functions like&lt;em&gt; trigsimp &lt;/em&gt;on a given Vector instance â Iâll probably try my hand a little more, or ask the mailing list.&lt;/p&gt;
&lt;p&gt;Anyways, thats all for now &lt;span class=&quot;wp-smiley emoji emoji-smile&quot; title=&quot;:-)&quot;&gt;:-)&lt;/span&gt;. Hope to have a great summer coding a new SymPy module. *excited*&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/codesachin.wordpress.com/6/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/codesachin.wordpress.com/6/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=codesachin.wordpress.com&amp;amp;blog=67602166&amp;amp;post=6&amp;amp;subd=codesachin&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-05-25T15:13:10+00:00</dc:date>
	<dc:creator>srjoglekar246</dc:creator>
</item>
<item rdf:about="http://kundankumar185.wordpress.com/?p=6">
	<title>Kundan Kumar: First step toward GSoC</title>
	<link>http://kundankumar185.wordpress.com/2014/05/25/first-step-toward-gsoc/</link>
	<content:encoded>&lt;p&gt;One week has been added to my life under the name of GSoC. I have been working under Sympy and as my GSoC proposal I am implementing system of differential equation. It has been one of fruiteful week for me though I would add I became a little slow in the end. I thought its a good opportunity to learn vim along with working on codebase of sympy. So, I have started fighting with vim to understand him more. Yeah him!! I have read comments of people on vim its the best text editor, once used to it you wont be leaving it for anything else.&lt;/p&gt;
&lt;p&gt;Heh, I found it hard to operate with vim in starting but I am heck of guy to leave it. &lt;span class=&quot;wp-smiley emoji emoji-bigsmile&quot; title=&quot;:D&quot;&gt;:D&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;About my work on sympy, I have implemented first order linear system of two equation. Added all method considering it and aha also documentation. Though my mentors seemed a little busy this week so I dont know much how my implementation should look like from their point of view but I have added what seemed good. Thats was it for this week, next week I am hoping of implementing the same for second order.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/6/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/6/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=6&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-05-25T05:02:38+00:00</dc:date>
	<dc:creator>Kundan</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8847459392628952171.post-4814788273799668813">
	<title>Sudhanshu Mishra: GSoC 14: First Week</title>
	<link>http://lifelesscode.blogspot.com/2014/05/gsoc-14-first-week.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;The first week of GSoC is going to end very soon. I started working very late this week because of some issues. I spent most of my time in reading books on optics.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;Due to a dependency for 3D geometry, which will take some more time, I changed my timeline from what I had proposed. Besides starting with geometrical optics(3 weeks), I have started working on wave optics.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;This is what my proposal says:&lt;/div&gt;&lt;blockquote style=&quot;border-left-color: rgb(245, 245, 245); border-left-style: solid; border-left-width: 5px; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 18px; margin: 0px 0px 18px; padding: 0px 0px 0px 15px;&quot;&gt;&lt;ul style=&quot;margin: 0px 0px 9px 25px; padding: 0px;&quot;&gt;&lt;li&gt;During this week I'll write code for classical wave equation and simple harmonic motion.&lt;/li&gt;&lt;li&gt;Introduction of properties like phase angles, phase velocity, wave velocity, amplitude, intensity, frequency and wavelength.Â &lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;&lt;a style=&quot;color: #4183c4; text-decoration: none;&quot; href=&quot;https://github.com/sympy/sympy/pull/7518&quot;&gt;This&lt;/a&gt;Â is my first pull request regarding my project (Thanks to Sean for the quick review). Till now I've only added a transverse wave class and will add more to it in the next 2 days.&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;There were no hiccups yet!&lt;/div&gt;&lt;div style=&quot;color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 1.3em; margin-bottom: 1.2em;&quot;&gt;&lt;span style=&quot;line-height: 1.3em;&quot;&gt;Cheers!&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-25T00:14:11+00:00</dc:date>
	<dc:creator>Sudhanshu Mishra</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/gsoc/csympy-week1/">
	<title>Sushant Hiray: Community Bonding and Week 1 in CSymPy</title>
	<link>http://sushant-hiray.in/posts/gsoc/csympy-week1/</link>
	<content:encoded>&lt;p&gt;Week 1 for GSoC is almost about to end and Iâm pretty much excited about the progress Iâve made.
For those who are unaware Iâm working on extending elementary functions in CSymPy. You can look over
the proposal &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Sushant-Hiray:-Extending-Elementary-Functions-CSymPy&quot;&gt;here&lt;/a&gt; to get a better idea regarding the project!
&lt;br /&gt;&lt;br /&gt;
The last few weeks have been fairly intensive. I shipped in a fair amount of code and we made a decent progress with the target. Iâm quite ahead of my proposal now, so it gives quite a decent amount of buffer to improvise things as we keep on making progress.&lt;/p&gt;

&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;/h1&gt;

&lt;p&gt;The community bonding period started off with closing some trivial issues such as adding a gitignore ( &lt;a href=&quot;https://github.com/sympy/csympy/pull/165&quot;&gt;pull 165&lt;/a&gt;). This was needed big time considering the number of untracked files we had!
&lt;br /&gt;&lt;br /&gt;
Next I started working on improving the trignometric module for CSymPy. It started with &lt;a href=&quot;https://github.com/sympy/csympy/pull/168&quot;&gt;pull 168&lt;/a&gt; which added all the remaining trignometric classes.
&lt;br /&gt;&lt;br /&gt;
After adding the trignometric classes we started working on implementing &lt;code&gt;eval&lt;/code&gt; for trignometric classes. This was based on Ondrejâs version of &lt;a href=&quot;https://github.com/certik/sympy/blob/trig/t.py&quot;&gt;eval&lt;/a&gt; which he had written for SymPy.
This PR took quite over a week to complete and get merged into master.
Now with this PR being merged we can directly evaluate arguments of type &lt;code&gt;theta + k*pi/12&lt;/code&gt; for all the trignometric classes.
&lt;br /&gt;&lt;br /&gt;
A couple of PRâs were added to improve the code quality. &lt;a href=&quot;https://github.com/sympy/csympy/pull/170&quot;&gt;PR 170&lt;/a&gt; looked into updating the constructors with C++11 standard and &lt;a href=&quot;https://github.com/sympy/csympy/pull/171&quot;&gt;pull 171&lt;/a&gt; made the argument a private member for the base class. 
&lt;br /&gt;&lt;br /&gt;
The code looks quite noeat now, later on we will try to reduce the code length. But its good for now.&lt;/p&gt;

&lt;h1 id=&quot;discussions&quot;&gt;Discussions&lt;/h1&gt;

&lt;p&gt;Most of the discussions with Ondrej happened over the pull requests. Myself, Thilina and Ondrej had an online meetup on gitter this Thursday(IST). You can follow up on the details &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;here&lt;/a&gt;
We discussed mostly regarding our progress, we also discussed a bit about possibility of compile-time hashing.&lt;/p&gt;

&lt;h1 id=&quot;the-week-ahead&quot;&gt;The Week Ahead&lt;/h1&gt;
&lt;p&gt;So for the next we have planned to get the basic implementation of inverse trignometric functions.
&lt;br /&gt;&lt;br /&gt;
Thats all for now :) Will get back next week!&lt;/p&gt;</content:encoded>
	<dc:date>2014-05-24T18:30:00+00:00</dc:date>
</item>
<item rdf:about="tag:,2014-05-24:gsoc-week-1.html">
	<title>Jim Crist: GSoC Week 1: Project Overview</title>
	<link>http://jcrist.github.io/gsoc-week-1.html</link>
	<content:encoded>&lt;p&gt;
&lt;/p&gt;&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;This summer I got accepted into &lt;a href=&quot;https://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;Google Summer of Code&lt;/a&gt; under &lt;a href=&quot;http://sympy.org/en/index.html&quot;&gt;Sympy&lt;/a&gt;. For those that don't know, Sympy is a computer algebra system (CAS) written in Python. It can handle all sorts of mathematics, but what I use it most for is deriving and solving for the equations of motion for physical systems using the functionality found in &lt;code&gt;Sympy.physics.mechanics&lt;/code&gt; (as seen in &lt;a href=&quot;http://jcrist.github.io/differential-drive-part-1.html&quot;&gt;this previous post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My project this summer is adding a robust linearization routine to this package to linearize systems with constraints. The code provided in &lt;code&gt;sympy.physics.mechanics&lt;/code&gt; currently makes it very easy to generate the equations of motion (EOM) for the dynamics of rigid, multibody systems. However, these EOM are typically nonlinear in nature, and can be quite lengthy. For analysis, linearizing the equations about equilibrium points, or trajectories is desired. Linearized equations are exceptionally useful because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They reduce the computational complexity of analysis and simulation&lt;/li&gt;
&lt;li&gt;They allow for traditional stability analysis via eigenvalue decomposition&lt;/li&gt;
&lt;li&gt;They are often used in control theory for controller design and analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nonlinear equations can typically be written in the following form:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\dot{x} = f(t, x, u)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt; is time, &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; is the system state, and &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt; is the input to the system. For unconstrained systems (systems, where the states are only functions of time, and not of each other), linearization is as simple as taking the jacobian of &lt;span class=&quot;math&quot;&gt;\(f(t, x, u)\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\dot{\delta x} \approx \nabla_x f(t, x, u) |_{x^*, u^*} \delta x + \nabla_u f(t, x, u) |_{x^*, u^*} \delta u\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&quot;math&quot;&gt;\(x^*\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u^*\)&lt;/span&gt; represent the trajectory or equilibrium point that linearization is occuring about, and &lt;span class=&quot;math&quot;&gt;\(\delta x\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\delta u\)&lt;/span&gt; are the changes from this point (i.e. &lt;span class=&quot;math&quot;&gt;\(\delta x = x - x^*\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;However, if there are constraints, then linearization becomes more complicated, due to the fact that some variables in &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt; are now functions of other variables, leading to the need to implement the chain rule. Simply taking the jacobian as you normally would leads to a linearization that doesn't accurately represent the system. This is demonstrated below with an example of a simple pendulum.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;example-single-pendulum-with-minimum-coordinates&quot;&gt;Example: Single Pendulum with Minimum Coordinates&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;To derive the equations of motion, well first use Kane's Method with no constraints. Kane's Method is something I hadn't seen before in my dynamic's classes (we focussed more on Lagrange), so I spent part of this week learning it. It differs from Lagrange's method in that instead of only choosing generalized coordinats, generalized speeds are choosen as well. This can make the equations simpler, as the speeds do not have to be the derivatives of the coordinates.&lt;/p&gt;
&lt;p&gt;While Sympy has functions to make the derivation using Kane's Method easier, I'm going to show each calculation step for a clearer description of the method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [1]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pendulum_Min_Coord.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[1]:&lt;/div&gt;

&lt;div class=&quot;output_svg output_subarea output_pyout&quot;&gt;
&lt;svg width=&quot;372.53574&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; id=&quot;svg2&quot; version=&quot;1.1&quot; height=&quot;378.96869&quot;&gt;
  &amp;lt;sodipodi:namedview bordercolor=&quot;#666666&quot; borderopacity=&quot;1.0&quot; fit-margin-bottom=&quot;5&quot; fit-margin-left=&quot;5&quot; fit-margin-right=&quot;5&quot; fit-margin-top=&quot;5&quot; id=&quot;base&quot; inkscape:current-layer=&quot;layer1&quot; inkscape:cx=&quot;115.27797&quot; inkscape:cy=&quot;110.74674&quot; inkscape:document-units=&quot;px&quot; inkscape:pageopacity=&quot;0.0&quot; inkscape:pageshadow=&quot;2&quot; inkscape:window-height=&quot;693&quot; inkscape:window-maximized=&quot;1&quot; inkscape:window-width=&quot;1366&quot; inkscape:window-x=&quot;0&quot; inkscape:window-y=&quot;23&quot; inkscape:zoom=&quot;1&quot; pagecolor=&quot;#ffffff&quot; showgrid=&quot;false&quot;&amp;gt;
  &lt;defs id=&quot;defs4&quot;&gt;
    &amp;lt;pattern id=&quot;pattern6485&quot; inkscape:collect=&quot;always&quot; patterntransform=&quot;matrix(1.4782083,0,0,12.709288,204.03947,0)&quot; xlink:href=&quot;#Strips1_4&quot;&amp;gt;
    &amp;lt;pattern height=&quot;1&quot; id=&quot;Strips1_4&quot; inkscape:collect=&quot;always&quot; inkscape:stockid=&quot;Stripes 1:4&quot; patterntransform=&quot;translate(0,0) scale(10,10)&quot; patternunits=&quot;userSpaceOnUse&quot; width=&quot;5&quot;&amp;gt;
      &lt;rect style=&quot;fill: black; stroke: none;&quot; height=&quot;2&quot; width=&quot;1&quot; y=&quot;-0.5&quot; x=&quot;0&quot; id=&quot;rect5768&quot;&gt;
    &amp;lt;/pattern&amp;gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow1Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke: #000000; stroke-width: 1pt;&quot; transform=&quot;matrix(0.8,0,0,0.8,10,0)&quot; d=&quot;M 0,0 5,-5 -12.5,0 5,5 0,0 z&quot; id=&quot;path3791&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-7&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-74&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-3&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-8&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-6&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-4&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-5&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-9&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-90&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1k&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path7949&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8071&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199-5&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km-9&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196-3&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4Xq&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8390&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1kmM&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8393&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-2&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-6&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-2&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
  &lt;/rect&gt;&lt;/defs&gt;
  &lt;metadata id=&quot;metadata7&quot;&gt;
    &amp;lt;rdf:rdf&amp;gt;
      &amp;lt;cc:work rdf:about=&quot;&quot;&amp;gt;
        &amp;lt;dc:format&amp;gt;image/svg+xml&amp;lt;/dc:format&amp;gt;
        &amp;lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;&amp;gt;
        &amp;lt;dc:title&amp;gt;&amp;lt;/dc:title&amp;gt;
      &amp;lt;/cc:work&amp;gt;
    &amp;lt;/rdf:rdf&amp;gt;
  &lt;/metadata&gt;
  &lt;g id=&quot;layer1&quot; transform=&quot;translate(-184.9363,-178.42594)&quot;&gt;
    &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(0.22219926,0,0,0.21267643,384.59418,428.325)&quot; d=&quot;m 357.59401,430.10822 c 0,39.05242 -30.30147,70.71067 -67.68022,70.71067 -37.37876,0 -67.68022,-31.65825 -67.68022,-70.71067 0,-39.05243 30.30146,-70.71068 67.68022,-70.71068 37.37875,0 67.68022,31.65825 67.68022,70.71068 z&quot; id=&quot;path2989&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 3.51907468px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 202.92616,204.8442 c 262.86866,0 262.86866,0 262.86866,0&quot; id=&quot;path2991&quot;&gt;
    &lt;path style=&quot;fill: #ffff00; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(-1,0,0,-1,555.58391,486.45996)&quot; d=&quot;m 253.532,280.49304 -31.29843,0 -31.29844,0 15.64922,-27.10524 15.64922,-27.10523 15.64921,27.10523 z&quot; id=&quot;path2993&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 339.78704,249.0287 103.5984,256.81995&quot; id=&quot;path2997&quot;&gt;
    &lt;text y=&quot;413.79074&quot; x=&quot;405.85715&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4793&quot;&gt;&lt;tspan y=&quot;413.79074&quot; x=&quot;405.85715&quot; id=&quot;tspan4795&quot;&gt;L&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;531.36218&quot; x=&quot;467.71429&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4797&quot;&gt;&lt;tspan y=&quot;531.36218&quot; x=&quot;467.71429&quot; id=&quot;tspan4799&quot;&gt;m&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;302.36218&quot; x=&quot;530.71423&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text5019&quot;&gt;&lt;tspan y=&quot;302.36218&quot; x=&quot;530.71423&quot; id=&quot;tspan5021&quot;&gt;g&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect style=&quot;fill-opacity: 1; stroke: none;&quot; transform=&quot;matrix(1,0,0.72381295,0.68999624,0,0)&quot; rx=&quot;0&quot; ry=&quot;0&quot; height=&quot;29.007917&quot; width=&quot;251.274&quot; y=&quot;265.83615&quot; x=&quot;-2.4793456&quot; id=&quot;rect5023&quot;&gt;
    &lt;text y=&quot;499.35422&quot; x=&quot;361.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6597&quot;&gt;&lt;tspan y=&quot;499.35422&quot; x=&quot;361.93631&quot; id=&quot;tspan6599&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6601&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21877503; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 520.9149,264.05894 0,92.49758&quot; id=&quot;path4827-4&quot;&gt;
    &lt;g id=&quot;g8297&quot; transform=&quot;translate(-120,-14)&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2704,243.61034 0,56.62207&quot; id=&quot;path4827-70&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2074,243.13275 56.19646,0&quot; id=&quot;path4827-9-6&quot;&gt;
    &lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
    &lt;text y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301&quot;&gt;&lt;tspan y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8571&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307&quot;&gt;&lt;tspan y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8569&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.39519,236.31191 20.29154,52.86126&quot; id=&quot;path4827-70-2&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.16523,235.88862 52.46391,-20.13901&quot; id=&quot;path4827-9-6-9&quot;&gt;
    &lt;text y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301-7&quot;&gt;&lt;tspan y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303-9&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8567&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307-4&quot;&gt;&lt;tspan y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309-7&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8565&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.49994314; stroke-opacity: 1;&quot; transform=&quot;matrix(1.5707216,0,0,1.6326654,-402.16738,-380.32792)&quot; d=&quot;m 520.11084,512.98418 c -14.91916,5.78676 -30.7279,8.94566 -46.72524,9.33662&quot; id=&quot;path3785&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2.57029223; stroke-opacity: 1;&quot; transform=&quot;matrix(0.58676057,0,0,0.58043896,62.244133,29.528251)&quot; d=&quot;m 577.53786,471.18439 c -23.97211,29.49767 -59.00862,47.85327 -96.90679,50.76937&quot; id=&quot;path3785-5&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.30337703; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.10089,263.9655 -2.32918,287.77744&quot; id=&quot;path3009&quot;&gt;
    &lt;text y=&quot;328.55539&quot; x=&quot;402.47037&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4787&quot;&gt;&lt;tspan y=&quot;328.55539&quot; x=&quot;402.47037&quot; id=&quot;tspan4789&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan4791&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
  &lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/rect&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [2]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Import required functionality&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy.physics.mechanics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For a simple pendulum, the system has one degree of freedom, so only one generalized coordinate is needed. In this case, we'll choose the angle off vertical (&lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt;). To make things simple, the generalized speed will be the angular velocity of the pendulum, which is just the derivative of this coordinate (&lt;span class=&quot;math&quot;&gt;\(u_1 = \dot{q_1}\)&lt;/span&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [3]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create generalized coordinate and speed variables. The `dynamicsymbols` &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# function creates each symbol as a function of time (i.e. q1 = q1(t))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# Generalized coordinate: angle of pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Derivative of generalized coordinate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;# Generalized speed: angular velocity of pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Derivative of generalized speed&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# `symbols` is used for things that are constant, not functions of other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# variables.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# We need t later to take derivatives with respect to time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# Length of the pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;# Mass of the pendulum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                      &lt;span class=&quot;c&quot;&gt;# Gravity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;First we need to create the world reference frame &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; and its origin &lt;span class=&quot;math&quot;&gt;\(N^*\)&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [4]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReferenceFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'N'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'N*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set the velocity of the origin to 0, as it's not moving&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, a rotating reference frame &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; is created, attached to the pendulum. The rotation of this frame is &lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt; about the &lt;span class=&quot;math&quot;&gt;\(N_z\)&lt;/span&gt; axis, with an angular velocity of &lt;span class=&quot;math&quot;&gt;\(\dot{q}_1 = u_1\)&lt;/span&gt;. The location of the pendulum mass point &lt;span class=&quot;math&quot;&gt;\(P\)&lt;/span&gt; can then be set as &lt;span class=&quot;math&quot;&gt;\(r^{P/N^*} = L \hat{a}_x\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [5]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create and orient reference frame A, and set its angular velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'axis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ang_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Locate point P relative to the origin N*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locatenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'P'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The velocity of the point P can then be found:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [6]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Calculate velocity at the point&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2pt_theory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[6]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
L*u1*A.y
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we solve for the kinematic differential equations (KDE) for the system. These relate the derivatives of the generalized coordinates to the generalized velocities by&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ kde(q, \dot{q}, u, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For this system, since the generalized speed is just the derivative of the generalized coordinates, the KDEs are rather simple:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [7]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create Kinematic Differential Equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Solve for d/dt q in terms of u. This will be used throughout to eliminate&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# d/dt q from the equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Kane's method uses the partial derivative of the velocity of each point/body with respect to each generalized speed. In our case, with only one point and speed this is just a single value:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [8]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Calculate Partial velocity at the point&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This command chain in english is:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &quot;The velocity of P in frame N, with each d/dt q replaced by expression in terms of u,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# differentiated in terms of u_1 in frame N.&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we input the resultant at each point of all forces acting on that point. For the pendulum, this is just gravity acting on the mass in the &lt;span class=&quot;math&quot;&gt;\(N_x\)&lt;/span&gt; direction.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [9]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Input the force resultant at P&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The generalized active forces are then found by the following expression:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[F_r = \sum_{i=1}^v v_r^{P_i} \cdot R_i \quad (r = 1, ..., n)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;These form the &quot;&lt;strong&gt;&lt;em&gt;F&lt;/em&gt;&lt;/strong&gt;&quot; part of Newton's second law (&lt;strong&gt;&lt;em&gt;F = ma&lt;/em&gt;&lt;/strong&gt;). In this case, n = 1, v = 1, so &lt;span class=&quot;math&quot;&gt;\(F_1\)&lt;/span&gt; is then:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [10]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for F1:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next we need to solve for the generalized inertial forces. This is the &quot;&lt;strong&gt;&lt;em&gt;ma&lt;/em&gt;&lt;/strong&gt;&quot; part in Newton's second law. To do this, we first need to find the acceleration of the pendulum point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [11]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for accelerations at the point&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The inertial force &lt;span class=&quot;math&quot;&gt;\(R^*\)&lt;/span&gt; for the point is then&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [12]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for generalized inertial forces&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;R_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The generalized inertial forces are then found by the following expression:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ F_r^* = \sum_{i=1}^v v_r^{P_i} \cdot R_i^* \quad (r = 1, ..., n)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As before, n = 1, v = 1, so &lt;span class=&quot;math&quot;&gt;\(F_1^*\)&lt;/span&gt; is then:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [13]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for F1_star&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;F1_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1_p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Kanes equations for the dynamic differential equations are then&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ F_r + F_r^* = 0 \quad (r = 1, ... , n) \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [14]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for the dynamic differential equations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dyn_eqs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F1_star&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Combining the kinematic differential equations with the dynamic differential equations yields a system with 2 unknowns (&lt;span class=&quot;math&quot;&gt;\(\dot{q}_1\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(\dot{u}_1\)&lt;/span&gt;), and 2 equations. Thus, it can be solved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [15]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# The equations of motion are composed of the kinematic differential equations,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and the dynamic differential equations.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;dyn_eqs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[                    -u1 + q1&amp;amp;apos],
[-L**2*m*u1&amp;amp;apos - 9.8*L*m*sin(q1)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [16]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solving the equations of motion for q1' and u1'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [17]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Recomposing the system into a first order differential equation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;sols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[            u1],
[-9.8*sin(q1)/L]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Thus, the final form for the equations of motion is:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \begin{bmatrix} \dot{q}_1 \\ \dot{u}_1 \end{bmatrix} = \begin{bmatrix} u_1 \\ \frac{-9.8}{L} sin(q_1) \end{bmatrix} \]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As I'm still just learning Kane's method myself, the above derivation isn't very explanatory. I plan on making a post better explaining the procedure once I get the hang of it better. Luckily, Sympy contains a &lt;code&gt;KanesMethod&lt;/code&gt; class that crunches all the above math for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;using-kanes-method-class&quot;&gt;Using Kanes Method Class&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Continuing with what was already derived above, all that needs to be done is create a &lt;code&gt;Particle&lt;/code&gt; object for the pendulum mass, and then create a &lt;code&gt;KanesMethod&lt;/code&gt; object with the forces and bodies derived above. I won't go too in depth on these steps, as we're just replicating what was done above using the easy functionality provided by &lt;code&gt;sympy.physics.mechanics&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [18]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create a particle object representing the pendulum mass&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Particle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a KanesMethod object. This takes the global reference frame N,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the independent coordinates (q1), the independent velocities (q2), and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the Kinematic equations derived above (kde)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KanesMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kd_eqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [19]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Make a list of tuples of the form (Particle/Body, Force on Particle/Body)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Make a list of Particles/Bodies in the system&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Derive the generalized active forces, and the generalized inertial forces&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frstar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kanes_equations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [20]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Solve for the equations of motion in first order form.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# What's happening here is the mass matrix (M) and the forcing&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# matrix (F) are being solved for. This results in a system of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# equations of the form M*[q', u']^T = F.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kindiffdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mass_matrix_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forcing_full&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The final first order form is then solved for as&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [q', u']^T = M^-1 * F.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_km&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[            u1],
[-9.8*sin(q1)/L]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As seen here, the results match what was solved for above by hand, but in a much easier manner using the methods provided in Sympy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;non-minimal-set-of-coordinates&quot;&gt;Non-minimal set of coordinates&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The pendulum system demonstrated above is extremely simple, and a minimal set of coordinates and speeds readily found. But for more complicated systems it's often not that easy to find a such a minimal representation. In these cases additional coordinates and speeds are used, and an additional set of &lt;em&gt;constraint equations&lt;/em&gt; are added relating the coordinates and speeds together.&lt;/p&gt;
&lt;p&gt;To demonstrate this, the pendulum system will be re-derived using the x and y coordinates of the mass as generalized coordinates, and their derivatives as the generalized speeds. While you would never do this in practice (it makes the problem much harder), it should be a good demonstration of both configuration and velocity constraints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [21]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SVG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pendulum_NonMin_Coord.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[21]:&lt;/div&gt;

&lt;div class=&quot;output_svg output_subarea output_pyout&quot;&gt;
&lt;svg width=&quot;378.90466&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; id=&quot;svg2&quot; version=&quot;1.1&quot; height=&quot;456.13843&quot;&gt;
  &amp;lt;sodipodi:namedview bordercolor=&quot;#666666&quot; borderopacity=&quot;1.0&quot; fit-margin-bottom=&quot;5&quot; fit-margin-left=&quot;5&quot; fit-margin-right=&quot;5&quot; fit-margin-top=&quot;5&quot; id=&quot;base&quot; inkscape:current-layer=&quot;layer1&quot; inkscape:cx=&quot;115.27797&quot; inkscape:cy=&quot;187.91648&quot; inkscape:document-units=&quot;px&quot; inkscape:pageopacity=&quot;0.0&quot; inkscape:pageshadow=&quot;2&quot; inkscape:window-height=&quot;693&quot; inkscape:window-maximized=&quot;1&quot; inkscape:window-width=&quot;1366&quot; inkscape:window-x=&quot;0&quot; inkscape:window-y=&quot;23&quot; inkscape:zoom=&quot;1&quot; pagecolor=&quot;#ffffff&quot; showgrid=&quot;false&quot;&amp;gt;
  &lt;defs id=&quot;defs4&quot;&gt;
    &amp;lt;pattern id=&quot;pattern6485&quot; inkscape:collect=&quot;always&quot; patterntransform=&quot;matrix(1.4782083,0,0,12.709288,204.03947,0)&quot; xlink:href=&quot;#Strips1_4&quot;&amp;gt;
    &amp;lt;pattern height=&quot;1&quot; id=&quot;Strips1_4&quot; inkscape:collect=&quot;always&quot; inkscape:stockid=&quot;Stripes 1:4&quot; patterntransform=&quot;translate(0,0) scale(10,10)&quot; patternunits=&quot;userSpaceOnUse&quot; width=&quot;5&quot;&amp;gt;
      &lt;rect style=&quot;fill: black; stroke: none;&quot; height=&quot;2&quot; width=&quot;1&quot; y=&quot;-0.5&quot; x=&quot;0&quot; id=&quot;rect5768&quot;&gt;
    &amp;lt;/pattern&amp;gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow1Lstart&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke: #000000; stroke-width: 1pt;&quot; transform=&quot;matrix(0.8,0,0,0.8,10,0)&quot; d=&quot;M 0,0 5,-5 -12.5,0 5,5 0,0 z&quot; id=&quot;path3791&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lstart-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(1.1,0,0,1.1,1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3809-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-7&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-7&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-74&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-3&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-8&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-6&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-4&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-5&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-9&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill-rule: evenodd; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path3812-90&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1k&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path7949&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8071&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4X-8&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8199-5&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1km-9&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #0000ff; fill-rule: evenodd; stroke: #0000ff; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8196-3&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend4Xq&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8390&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
    &lt;marker style=&quot;overflow: visible;&quot; id=&quot;Arrow2Lend-1kmM&quot; orient=&quot;auto&quot;&gt;
      &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #ff0000; stroke-width: 0.625; stroke-linejoin: round;&quot; transform=&quot;matrix(-1.1,0,0,-1.1,-1.1,0)&quot; d=&quot;M 8.7185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.3720609 -1.7354408,5.6174519 -6e-7,8.035443 z&quot; id=&quot;path8393&quot;&gt;
    &lt;/path&gt;&lt;/marker&gt;
  &lt;/rect&gt;&lt;/defs&gt;
  &lt;metadata id=&quot;metadata7&quot;&gt;
    &amp;lt;rdf:rdf&amp;gt;
      &amp;lt;cc:work rdf:about=&quot;&quot;&amp;gt;
        &amp;lt;dc:format&amp;gt;image/svg+xml&amp;lt;/dc:format&amp;gt;
        &amp;lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;&amp;gt;
        &amp;lt;dc:title&amp;gt;&amp;lt;/dc:title&amp;gt;
      &amp;lt;/cc:work&amp;gt;
    &amp;lt;/rdf:rdf&amp;gt;
  &lt;/metadata&gt;
  &lt;g id=&quot;layer1&quot; transform=&quot;translate(-184.9363,-178.42594)&quot;&gt;
    &lt;path style=&quot;fill: #ff0000; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(0.22219926,0,0,0.21267643,384.59418,428.325)&quot; d=&quot;m 357.59401,430.10822 c 0,39.05242 -30.30147,70.71067 -67.68022,70.71067 -37.37876,0 -67.68022,-31.65825 -67.68022,-70.71067 0,-39.05243 30.30146,-70.71068 67.68022,-70.71068 37.37875,0 67.68022,31.65825 67.68022,70.71068 z&quot; id=&quot;path2989&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 3.51907468px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 202.92616,204.8442 c 262.86866,0 262.86866,0 262.86866,0&quot; id=&quot;path2991&quot;&gt;
    &lt;path style=&quot;fill: #ffff00; fill-rule: evenodd; stroke: #000000; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; transform=&quot;matrix(-1,0,0,-1,555.58391,486.45996)&quot; d=&quot;m 253.532,280.49304 -31.29843,0 -31.29844,0 15.64922,-27.10524 15.64922,-27.10523 15.64921,27.10523 z&quot; id=&quot;path2993&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 2; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 339.78704,249.0287 103.5984,256.81995&quot; id=&quot;path2997&quot;&gt;
    &lt;text y=&quot;383.79074&quot; x=&quot;402.85715&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4793&quot;&gt;&lt;tspan y=&quot;383.79074&quot; x=&quot;402.85715&quot; id=&quot;tspan4795&quot;&gt;L&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;559.36218&quot; x=&quot;459.71429&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text4797&quot;&gt;&lt;tspan y=&quot;559.36218&quot; x=&quot;459.71429&quot; id=&quot;tspan4799&quot;&gt;m&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21548557; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 448.57079,536.36278 0,91.58741&quot; id=&quot;path4827&quot;&gt;
    &lt;text y=&quot;302.36218&quot; x=&quot;530.71423&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text5019&quot;&gt;&lt;tspan y=&quot;302.36218&quot; x=&quot;530.71423&quot; id=&quot;tspan5021&quot;&gt;g&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect style=&quot;fill-opacity: 1; stroke: none;&quot; transform=&quot;matrix(1,0,0.72381295,0.68999624,0,0)&quot; rx=&quot;0&quot; ry=&quot;0&quot; height=&quot;29.007917&quot; width=&quot;251.274&quot; y=&quot;265.83615&quot; x=&quot;-2.4793456&quot; id=&quot;rect5023&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.99330068; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.91099,256.55129 0,263.31654&quot; id=&quot;path4827-1&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.34446955; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.80895,522.381 113.26991,0&quot; id=&quot;path4827-7&quot;&gt;
    &lt;text y=&quot;388.35422&quot; x=&quot;287.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6597&quot;&gt;&lt;tspan y=&quot;388.35422&quot; x=&quot;287.93631&quot; id=&quot;tspan6599&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6601&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;506.35422&quot; x=&quot;366.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6603&quot;&gt;&lt;tspan y=&quot;506.35422&quot; x=&quot;366.93631&quot; id=&quot;tspan6605&quot;&gt;q&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6607&quot;&gt;2&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21548557; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 465.63937,521.37564 91.58741,0&quot; id=&quot;path4827-9&quot;&gt;
    &lt;text y=&quot;582.35425&quot; x=&quot;402.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6633&quot;&gt;&lt;tspan y=&quot;582.35425&quot; x=&quot;402.93631&quot; id=&quot;tspan6635&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6637&quot;&gt;1&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;508.35422&quot; x=&quot;481.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text6639&quot;&gt;&lt;tspan y=&quot;508.35422&quot; x=&quot;481.93631&quot; id=&quot;tspan6641&quot;&gt;u&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan6643&quot;&gt;2&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #000000; stroke-width: 1.21877503; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 520.9149,264.05894 0,92.49758&quot; id=&quot;path4827-4&quot;&gt;
    &lt;g id=&quot;g8297&quot; transform=&quot;translate(-120,-14)&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2704,243.61034 0,56.62207&quot; id=&quot;path4827-70&quot;&gt;
      &lt;path style=&quot;fill: none; stroke: #0000ff; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 333.2074,243.13275 56.19646,0&quot; id=&quot;path4827-9-6&quot;&gt;
    &lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
    &lt;text y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301&quot;&gt;&lt;tspan y=&quot;299.35422&quot; x=&quot;216.93629&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8571&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307&quot;&gt;&lt;tspan y=&quot;258.35422&quot; x=&quot;247.93631&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309&quot;&gt;N&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8569&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.53423667; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.39519,236.31191 20.29154,52.86126&quot; id=&quot;path4827-70-2&quot;&gt;
    &lt;path style=&quot;fill: none; stroke: #ff0000; stroke-width: 1.65040851; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;&quot; d=&quot;m 335.16523,235.88862 52.46391,-20.13901&quot; id=&quot;path4827-9-6-9&quot;&gt;
    &lt;text y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8301-7&quot;&gt;&lt;tspan y=&quot;284.70227&quot; x=&quot;361.07303&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8303-9&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8567&quot;&gt;x&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
    &lt;text y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 40px; font-style: normal; font-weight: normal; line-height: 125%; letter-spacing: 0px; fill: #000000; fill-opacity: 1; stroke: none; font-family: Sans;&quot; xml:space=&quot;preserve&quot; id=&quot;text8307-4&quot;&gt;&lt;tspan y=&quot;235.20618&quot; x=&quot;386.03787&quot; style=&quot;font-size: 24px;&quot; id=&quot;tspan8309-7&quot;&gt;A&lt;tspan style=&quot;font-size: 65.00091553%;&quot; id=&quot;tspan8565&quot;&gt;y&lt;/tspan&gt;&lt;/tspan&gt;&lt;/text&gt;
  &lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/rect&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/path&gt;&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [22]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create generalized coordinates and speeds for this non-minimal realization&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'q1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicsymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'u1:3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As before, the a rotating reference frame &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; is attached to the pendulum. However, this time we don't have a generalized coordinate representing the rotation angle. This can be easily calculated though as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\theta = \arctan(q_2/q_1)\]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [23]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;theta1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientnew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'axis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The pendulum mass can easily be located in the global reference frame &lt;span class=&quot;math&quot;&gt;\(N\)&lt;/span&gt; using the generalized coordinates, as they're just the x and y coordinates of the mass.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [24]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locatenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'P1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
q1*N.x + q2*N.y

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Next, we calculate the kinematic differential equations as before&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [25]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The velocity of point P is just the time derivative of its position vector from the origin. Here we substitute all &lt;span class=&quot;math&quot;&gt;\(\dot{q}\)&lt;/span&gt; terms for an equivalent expression using &lt;span class=&quot;math&quot;&gt;\(u\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [26]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
u1*N.x + u2*N.y

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As the system has only one degree of freedom, but two generalized coordinates, there needs to be a configuration consttraint relating the coordinates. The configuration constraint is expressed in the form&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ f_c(q, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, the length of the pendulum must always be &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;, so &lt;span class=&quot;math&quot;&gt;\(f_c\)&lt;/span&gt; can be expressed as&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [27]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magnitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[-L + sqrt(q1**2 + q2**2)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Similarly, there are two generalized speeds, making the use of a velocity constraint equation necessary. Velocity constraints are written as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ f_v(q, u, t) = 0 \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, the velocity in the &lt;span class=&quot;math&quot;&gt;\(A_x\)&lt;/span&gt; direction is always zero (the pendulum is never getting longer). This can be expressed by calculating the velocity of &lt;strong&gt;&lt;em&gt;P&lt;/em&gt;&lt;/strong&gt; in reference frame &lt;strong&gt;&lt;em&gt;N&lt;/em&gt;&lt;/strong&gt;, and setting the component in the &lt;span class=&quot;math&quot;&gt;\(A_x\)&lt;/span&gt; direction to 0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [28]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[sqrt((q1**2 + q2**2)/q1**2)*(q1*u1 + q2*u2)*q1/(q1**2 + q2**2)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Acceleration constraints are then just the time derivative of the velocity constraint:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [29]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([[sqrt((q1**2 + q2**2)/q1**2)*(q1**3*u1&amp;amp;apos + q1**2*q2*u2&amp;amp;apos + q1**2*u2*q2&amp;amp;apos + q1*q2**2*u1&amp;amp;apos - q1*q2*u1*q2&amp;amp;apos - q1*q2*u2*q1&amp;amp;apos + q2**3*u2&amp;amp;apos + q2**2*u1*q1&amp;amp;apos)*q1/(q1**4 + 2*q1**2*q2**2 + q2**4)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;For this example, the remainder will be calculated using the &lt;code&gt;KanesMethod&lt;/code&gt; class as above. Due to the presence of velocity constraints (nonholonomic), Kanes Method proceeds a little different than before, and this post is already long enough...&lt;/p&gt;
&lt;p&gt;All you really need to know is that before the EOM are derived, a subset of generalized coordinates and speeds needs to be choosen to be the &quot;independent&quot; variables, making the remaining &quot;dependent&quot;. There are reasons to choose some variables over others, but here we'll just let &lt;span class=&quot;math&quot;&gt;\(q_1\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u_1\)&lt;/span&gt; be independent, making &lt;span class=&quot;math&quot;&gt;\(q_2\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(u_2\)&lt;/span&gt; dependent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [30]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Derive the equations of motion using the KanesMethod class. This proceeds much the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# same as it did in the previous section. The only difference is the addition&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# of the dependent variable and constraint kwargs.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Particle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KanesMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_ind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u_dependent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;configuration_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acceleration_constraints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kd_eqs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frstar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kanes_equations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kindiffdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mass_matrix_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forcing_full&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Solve for the first order form of the EOM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simplify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Matrix([
[                                                                                                                                  u1],
[                                                                                                                                  u2],
[(-1.0*q1**3*u2**2 + 9.8*q1**2*q2**2 + 2.0*q1**2*q2*u1*u2 - 1.0*q1*q2**2*u1**2 + 9.8*q2**4)/(1.0*q1**4 + 2.0*q1**2*q2**2 + 1.0*q2**4)],
[  -1.0*(9.8*q1**3 + 1.0*q1**2*u2**2 + 9.8*q1*q2**2 - 2.0*q1*q2*u1*u2 + 1.0*q2**2*u1**2)*q2/(1.0*q1**4 + 2.0*q1**2*q2**2 + 1.0*q2**4)]])

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Note that the right hand side is now a 4x1 matrix, rather than a 2x1 as before. This will be important later.&lt;/p&gt;
&lt;p&gt;To ensure that the derived equations are equivalent, a variable transformation could be done, and the minimal case trasnformed into the nonminimal equations. However, we're just going to simulate the system to show that they have the same response. Not rigorous at all, but it's good enough for now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;simulation&quot;&gt;Simulation&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [31]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sympy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.integrate&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;First we need to substitute in numbers for the constants &lt;strong&gt;&lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [32]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;c&quot;&gt;# Length of 1 m&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# Mass of 1/2 kg&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Substitute into the minimal and nonminimal EOM expressions:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Using &lt;code&gt;lambdify&lt;/code&gt;, the equations of motion derived above can then be converted into equivalent &lt;code&gt;Numpy&lt;/code&gt; expressions, allowing for fast computations. Then, a second lambda expression can be used to put the EOM into the needed for numerical integration with &lt;code&gt;odeint&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [33]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_minimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lambda expressions for use with odeint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Both systems can then be simulated with &lt;code&gt;odeint&lt;/code&gt;. Let's define the initial condition to be horizontal to the right, with no initial velocity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [34]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Define initial condition to be horizontal to the right, with no velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_0_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_0_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create time vector, and run the simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_0_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_0_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Plot both simulations on top of each other&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minimal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nonminimal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As can be seen by the above, the simulation results are identical. Thus, both the minimal and nonminimal sets of coordinates result in the same system equations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;linearization&quot;&gt;Linearization&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;As mentioned at the beginning of this behemoth of a post, my project for the summer is on implementing functionality for linearizing systems of equations with and without constraints. While linearizing an unconstrained system is simple, some care must be taken for linearizing a system with constraints.&lt;/p&gt;
&lt;p&gt;In the above sections we derived two sets of equations of motion for a simple pendulum; one set without constraints, and one with. Now let's see what happens when we apply the naive linearization method of the simple jacobian to both systems:&lt;/p&gt;
&lt;p&gt;First, we need to determine the trim condition we wish to linearize about. This must be a valid position (satisfy the system of equations). For simplicity, lets choose the stable, straight down at rest configuration (&lt;span class=&quot;math&quot;&gt;\(\theta = 0\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(\omega = 0\)&lt;/span&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [35]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Set the trim condition for the minimal approach&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Perform simple linearization by computing the jacobian of the rhs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jacobian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[35]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
Matrix([
[   0, 1],
[-9.8, 0]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [36]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Set the trim condition for the nonminimal approach&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Perform naive linearization by computing the jacobian of the rhs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qudots_nm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jacobian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt output_prompt&quot;&gt;
    Out[36]:&lt;/div&gt;


&lt;div class=&quot;output_text output_subarea output_pyout&quot;&gt;
&lt;pre&gt;
Matrix([
[0,    0, 1, 0],
[0,    0, 0, 1],
[0,    0, 0, 0],
[0, -9.8, 0, 0]])
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;One use for a linearized system is for stability analysis at the point of linearization. This is done by computing the eigenvalues of the resulting system matrix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [37]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Minimal Eigenvalues:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nonminimal Eigenvalues:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;
Minimal Eigenvalues:
 {7*sqrt(5)*I/5: 1, -7*sqrt(5)*I/5: 1}
Nonminimal Eigenvalues:
 {0: 2, 7*sqrt(5)*I/5: 1, -7*sqrt(5)*I/5: 1}

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Looking at the eigenvalues of each matrix (as well as the &lt;em&gt;shape&lt;/em&gt; of each matrix) you can already see something's not quite correct with the nonminimal linearization. With only one coordinate and one speed needed to set the state for the system, there should be only 2 eigenvalues, while the nonminimal linearization gives 4.&lt;/p&gt;
&lt;p&gt;To further the point, the linearized systems can be simulated and compared with the nonlinear system. For small angle deviations, the system responses should be similar. We'll use a deviation of 1 degree, which should be small enough that they match:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [38]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create the initial conditions based on the trim a deviation of 1 degree&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# from the trim condition, with no initial velocity&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [39]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Create the required functions for simulation with odeint&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_nonminimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonmin_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f_minimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lambdify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_lin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_nonminimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_nonminimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rhs_minimal_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_minimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [40]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Run the simulation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_nonminimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0nonmin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_nm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs_minimal_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_cond_m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
InÂ [41]:
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot;highlight-ipynb&quot;&gt;&lt;pre class=&quot;ipynb&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Plot the results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Minimal Coordinates Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonlinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_m_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_y$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonminimal Coordinates Simulation Results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nonlinear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_nm_lin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'t, (s)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'$N_x$ Coordinate (m)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;


&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;&lt;div class=&quot;prompt&quot;&gt;&lt;/div&gt;


&lt;div class=&quot;output_png output_subarea &quot;&gt;
&lt;img /&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;
&lt;div class=&quot;prompt input_prompt&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;While the minimal coordinate linear and nonlinear simulation results line up nicely, the &lt;span class=&quot;math&quot;&gt;\(N_x\)&lt;/span&gt; coordinate response of the linearized nonminimal system is significantly off. This is because for the nonminimal system, the generalized coordinates and speeds aren't independent but functions of other coordinates and speeds. Thus, when taking the jacobian the chain rule needs to be applied correctly, and the dependent states removed from the linearized expression.&lt;/p&gt;
&lt;p&gt;This is the basis for my GSoC project. The implementation of a robust way to linearize systems that &lt;em&gt;works&lt;/em&gt;, regardless of constraints or nonminimal system realization. A method for doing this in a systematic manner was derived by one of my mentors, and I plan on starting with that. I think it can be generalized to Lagrange's equations, as well as other systems, but I need to think more on that.&lt;/p&gt;
&lt;p&gt;This week I spent some time teaching myself Kane's Method, and then the remainder working through a bunch of test cases to be used as unit tests for the linearization routines. Next week I'll begin work on the actual implementation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This ipython notebook can be found &lt;a href=&quot;https://github.com/jcrist/ipython_notebooks/tree/master/Pendulum&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? &quot;innerHTML&quot; : &quot;text&quot;)] =
            &quot;MathJax.Hub.Config({&quot; +
            &quot;    config: ['MMLorHTML.js'],&quot; +
            &quot;    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } },&quot; +
            &quot;    jax: ['input/TeX','input/MathML','output/HTML-CSS'],&quot; +
            &quot;    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],&quot; +
            &quot;    displayAlign: 'center',&quot; +
            &quot;    displayIndent: '0em',&quot; +
            &quot;    showMathMenu: true,&quot; +
            &quot;    tex2jax: { &quot; +
            &quot;        inlineMath: [ ['$','$'] ], &quot; +
            &quot;        displayMath: [ ['$$','$$'] ],&quot; +
            &quot;        processEscapes: true,&quot; +
            &quot;        preview: 'TeX',&quot; +
            &quot;    }, &quot; +
            &quot;    'HTML-CSS': { &quot; +
            &quot;        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }&quot; +
            &quot;    } &quot; +
            &quot;}); &quot;;
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&amp;lt;/script&amp;gt;</content:encoded>
	<dc:date>2014-05-24T15:00:00+00:00</dc:date>
	<dc:creator>Jim Crist</dc:creator>
</item>
<item rdf:about="http://tarzzz.github.io/gsoc14/community-bonding.html">
	<title>Tarun Gaba: GSoC 14: Community Bonding Period Ends</title>
	<link>http://tarzzz.github.io/gsoc14/community-bonding.html</link>
	<content:encoded>{% include JB/setup %}


[ &amp;lt;-Back to posts ](/gsoc14)

Community bonding period has ended, and it has been great for multiple reasons.
Our organization has decided to introduce some new suggestions for improving
the quality of the projects, we would be collaborating with another open source project for a 
software package, and everybody will be having fun this summers!!

About the new suggestions, there are mainly two:

  - Firstly, the PR's of a student will be reviewed, in addition to the mentor
    by other students in the organization before merging. PyDy has three students this year
    and all three will be reviewing each other's PR's. This is a nice innovation to help other
    students keep track of what other students are up to. They can help them, correct them, 
    constructively criticize them, and above all become better friends. 

  - Secondly, We have decided to fix the pattern of the weekly blog posts. From now on, all 
    my _official_ weekly blog posts will come in AOI format (Not [A.O.E.](en.wikipedia.org/wiki/Age_of_Empires)).
    In this format I should mention the **Achievements** of the previous week(s), The **Objectives**
    of the next week, and the **Issues** involved. Introducing a fix pattern makes the official blog posts
    more readable and useful for those who want to get quick information of where the project is headed to!


Another good thing is that the organization has decided to collaborate with [Adam Leeper](http://adamleeper.com/), 
who has happily agreed to collaborate with us. Adam has written a software package MGView, which is similar to our 
PyDy visualizer, but uses a different dynamics backend. We will be collaborating on developing a generic 
dynamics visualizer, which should be able to visualize output data from various dynamics engines. 
We are working on an API for the new visualizer this week.

Apart from these, I have also been playing around to explore the new functionality of the Widgets introduced 
in IPython2.0, which is going to be helpful in my project. I will also try to give some demonstrations of 
new IPython2.0 features, hopefully(If I get enough _time_).

So another Summer of Code, kick starts!!

Happy Coding!


[ &amp;lt;-Back to posts ](/gsoc14)</content:encoded>
	<dc:date>2014-05-23T08:40:42+00:00</dc:date>
</item>
<item rdf:about="http://tarzzz.github.io/gsoc14/first-post.html">
	<title>Tarun Gaba: GSoC 14: First Post</title>
	<link>http://tarzzz.github.io/gsoc14/first-post.html</link>
	<content:encoded>{% include JB/setup %}
[ &amp;lt;-Back to posts ](/gsoc14)

This is the first blog of the series, which I will maintain to provide information
and updates on my Google Summer of Code,14 project.

I feel very elated on getting selected consecutively for the second time for GSoC.
I had spent a great summer coding on the project last year, and I am really looking 
forward for an exciting summer this year as well.

In this very first blog post, I am going to give a bird's eye view of what is proposed
in this project.(it is a slightly long post, so please bear with me! :) )

In a nut-shell we plan to develop a generic dynamics visualizer and then provide IPython support for it.
Along with that we plan to create a gallery to showcase the benchmark problems in dynamics, and also help new users 
to be aware of all the functionality provided by `pydy.viz`.

About the generic visualizer, it should be able to take data input from major dynamics 
engines( [PyDy](https://pydy.org) and [MotionGenesis](https://www.motiongenesis.com/) at the very least ) and be able to visualize and animate it.

Another facet of this visualizer is that we should be able to change Simulation parameters from the GUI itself
and then re-run the simulations(in the respective dynamics engines) and then be able to produce the new results, visually.

IPython has become a great tool among scientific community, and we plan to provide IPython notebook support for the visualizer.

A call to:

    scene.display()


should be able to display the visualizer in the output cell of the IPython notebook, with the functionality to change 
the simulation parameters, which are then sent to dynamics engine, using IPython kernel, and then new results can be visualized.

Mainly the new visualizer is intended to run in IPython notebooks, but we also have to make arrangements for those who
(for some reasons!) don't want to use IPython to display the visualizations. We should be able to spit out static html files
for the visualizations, and they can then be run on a simple HTTP Server, or directly viewed in the browser. 
These static files will not have functionality to rerun the simulations after changing parameters, but it is useful in the sense
that we can keep the visualizations in the static format on the drive(or repository), and view it/publish it/present it.

[ &amp;lt;-Back to posts ](/gsoc14)</content:encoded>
	<dc:date>2014-05-21T00:20:44+00:00</dc:date>
</item>
<item rdf:about="http://thilinaatsympy.wordpress.com/?p=274">
	<title>Thilina Rathnayake: GSoC-2014 â Linear Algebra Module for CSymPy</title>
	<link>http://thilinaatsympy.wordpress.com/2014/05/20/gsoc-2014-linear-algebra-module-for-csympy/</link>
	<content:encoded>&lt;p&gt;Hi All,&lt;/p&gt;
&lt;p&gt;This summer, as my GSoC project, I will be working on a Linear Algebra Module for CSymPy which is hoped to be used along with SymPy after the completion. I am going to mainly focus on Matrices and associated algorithms. This is my second GSoC project. I did my first project last summer with SymPy and I am really excited to work with the SymPy community again.&lt;/p&gt;
&lt;p&gt;CSymPy is a fast core written in C++ for SymPy. It was started by Ondrej and try to address some performance critical applications where python is rather slow.Â  Linear algebra and related algorithms are performance critical as we have to deal with large matrices. So writing them in C++ will make them faster and these fast algorithms can be used in SymPy via python wrappers. You can find more about CSymPy by visiting the &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;project page&lt;/a&gt; in github.&lt;/p&gt;
&lt;p&gt;Apart from focusing on performance, I like to pay special attention to symbolic matrices and their manipulations. My aim is to make CSymPy the fastest library available for symbolic mathematics. There are a few challenges we need to overcome, especially avoiding intermediate expression swelling.&lt;/p&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/sympy/csympy/pull/169&quot;&gt;PR&lt;/a&gt; with the basic structure for the Matrices. Please have a look. I would love to hear what you have to say.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/thilinaatsympy.wordpress.com/274/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/thilinaatsympy.wordpress.com/274/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=thilinaatsympy.wordpress.com&amp;amp;blog=52956410&amp;amp;post=274&amp;amp;subd=thilinaatsympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-05-19T22:27:09+00:00</dc:date>
	<dc:creator>Thilina Rathnayake</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-501859786358105166">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/05/i-started-my-work-with-implementing.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;I started my work with implementing asymptotic expansion.&lt;br /&gt;&lt;br /&gt;Gruntz mention the MrvAsympt algorithm to compute asymptotic expansion in his paper &quot;A new algorithm for computing asymptotic series&quot;. It uses mrv and rewrite sub-routines which are already implemented in SymPy making my work easier.&lt;br /&gt;However there are some issues that I must deal with. One of them is to figure out when to call this algorithm. Currently if the current implementation of series fails to return any relevant output, this algorithm is called to give an asymptotic expansion of the expression.&lt;br /&gt;The user can also directly call this algorithm by calling the aseries method similar to the previous nseries and lseries methods.&lt;br /&gt;&lt;br /&gt;This algorithm uses a top down recursion method. Next step will be to implement hierarchical series which is nothing but stopping the recursion at an early level. It should be under user's control so an extra parameter should be needed.&lt;br /&gt;This is just the beginning and I hope to add more interesting features to SymPy.&lt;br /&gt;&lt;br /&gt;Here are the results till now:-&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;clear: both; text-align: center;&quot; class=&quot;separator&quot;&gt;&lt;a style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot; href=&quot;http://2.bp.blogspot.com/-_bxLsM3335g/U3o6L4fFPcI/AAAAAAAAAcY/e4I7ftfKV6g/s1600/Asympt.png&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-_bxLsM3335g/U3o6L4fFPcI/AAAAAAAAAcY/e4I7ftfKV6g/s1600/Asympt.png&quot; border=&quot;0&quot; height=&quot;223&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-19T17:09:43+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="https://hargup.github.io/blog/blah.html">
	<title>Harsh Gupta: Blah</title>
	<link>https://hargup.github.io/blog/blah.html</link>
	<content:encoded>&lt;p&gt;Write your post here.&lt;/p&gt;</content:encoded>
	<dc:date>2014-05-13T20:25:35+00:00</dc:date>
</item>
<item rdf:about="tag:blogger.com,1999:blog-283806077182880539.post-3114660856880190348">
	<title>Avichal Dayal</title>
	<link>http://gsocblog.blogspot.com/2014/05/this-summer-ill-be-coding-for-sympy-as.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This summer I'll be coding for SymPy as part of Google Summer Of Code 2014 program. SymPy is a computer algebra system written in pure python. &lt;a href=&quot;http://sympy.org/en/index.html&quot;&gt;Here&lt;/a&gt; is its official homepage. &lt;br /&gt;&lt;br /&gt;My project is &quot;Series expansion&quot;. I aim to improve asymptotic expansion and implement formal power series. My mentors for this project are Stefan Krastanov and Sergey B Kirpichev. I am really excited to get started with the project.&lt;br /&gt;&lt;br /&gt;During the community bonding period, I'll try to get started with my work and get a head start.&lt;br /&gt;&lt;br /&gt;Hope to have a great summer and thank you to Google and SymPy for the opportunity!&lt;/div&gt;</content:encoded>
	<dc:date>2014-05-12T10:54:59+00:00</dc:date>
	<dc:creator>Avichal Dayal</dc:creator>
</item>
<item rdf:about="http://kundankumar185.wordpress.com/?p=3">
	<title>Kundan Kumar: Beginning of a journey</title>
	<link>http://kundankumar185.wordpress.com/2014/05/04/beginning-of-a-journey/</link>
	<content:encoded>&lt;p align=&quot;justify&quot;&gt;Its matter of great happiness for me, I got selected in GSOC. Well not only that three of us (friends), out of four, who together were preparing for GSOC got selected. At the same time, it feels bad when someone is giving same input as you but does not get same output. Same happened with one of us, but nevertheless it gives an inspiration to work harder to achieve what we opt for.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;The sacrifice of holidays and mid-exams turned out in fruitful manner and here we are preparing ourselves to work with our respective organizations in GSOCâ14. We gave what we had to our fullest during last 2 months with no knowledge of day and night.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Itâs my first time I am contributing to an open source organization. Sympy is the first open source organization with which I am engaging with and also got selected in GSOC under this organization. From the last two month I am playing with the sympy code on differential equation solving engine. Till now I have fixed two bugs and added a method to solve a type of ODE.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;After working in open source organization, particularly sympy, I got to learn many things. The thing I liked the most is that people contributing selflessly to build software which will be available to everyone, especially those who find it very difficult to buy a software because of its high cost. It has connected people across the globe to work together and know each other, being rare for those who canât go abroad. It feels really great to know others and make friends from all over the world. In this matter, Google has done a great job by promoting open source through Google Summer of Code, thats a thing for which I would really like to praise Google among many others. It has provided a force to every coders to contribute to open source.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Well about how I started working in sympy is a long story of hard work and patience. I started working from 27 Feb, just 22 days before proposal submission and it took a lot of time to understand things, how sympy works. Initially I was even unable to understand its issues completely and didnât know how to solve so I just kept reading the issues over and over. Well it was hard but sympy mentors helped a lot. That time I learned âtime teaches everything what we need is dedication to workâ.&lt;/p&gt;
&lt;p align=&quot;justify&quot;&gt;Thatâs it for now I think for my first post on first blog. I have a lot to say but they are for next time. There is a long journey I have to travel, being started with Google Summer of Code.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kundankumar185.wordpress.com/3/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/kundankumar185.wordpress.com/3/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;http://stats.wordpress.com/b.gif?host=kundankumar185.wordpress.com&amp;amp;blog=68025302&amp;amp;post=3&amp;amp;subd=kundankumar185&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-05-04T23:40:25+00:00</dc:date>
	<dc:creator>Kundan</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-8847459392628952171.post-581868626457110552">
	<title>Sudhanshu Mishra: GSoC 2014 with SymPy</title>
	<link>http://lifelesscode.blogspot.com/2014/04/gsoc-2014-with-sympy.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;My proposal is intended to add more to optics in SymPy. Till now it can only do computations related to Gaussian optics and a bit of geometrical optics.Â &lt;a href=&quot;https://github.com/certik&quot; target=&quot;_blank&quot;&gt;OndÅej ÄertÃ­k&lt;/a&gt; and &lt;a href=&quot;https://github.com/flacjacket&quot; target=&quot;_blank&quot;&gt;Sean Vig&lt;/a&gt;Â are my mentors for the project.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;For those who don't know what is SymPy, SymPy is a Python library for symbolic computation. It provides computer algebra capabilities either as a standalone application, as a library to other applications, or live on the web as SymPy Live. SymPy is trivial to install and to inspect because is written entirely in Python and because it does not depend on any additional libraries. This ease of access combined with a simple and extensible code base in a well known language make SymPy a computer algebra system with a relatively low barrier to entry. SymPy is free software and is licensed under New BSD license. The lead developers are OndÅej ÄertÃ­k and Aaron Meurer.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Three more people other than me got selected for SymPy from my college, namely, Akshay, Sachin Joglekar and Soumya Dipta Biswas.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;During this &lt;i&gt;Community Bonding Period &lt;/i&gt;I'll try to get familiar with the huge code base of SymPy and its community of developers. I'm also working on few old pull requests that are dead for so long.&lt;br /&gt;&lt;br /&gt;Looking forward to work with such a great organization! Thanks to Google and SymPy for this opportunity!&lt;/div&gt;</content:encoded>
	<dc:date>2014-04-25T18:00:29+00:00</dc:date>
	<dc:creator>Sudhanshu Mishra</dc:creator>
</item>
<item rdf:about="tag:blogger.com,1999:blog-54146973659574488.post-8832200362911847122">
	<title>Akshay Narasimha: Gsoc-14 with SymPy</title>
	<link>http://geekpy.blogspot.com/2014/04/gsoc-14-with-sympy.html</link>
	<content:encoded>&lt;div style=&quot;text-align: left;&quot; dir=&quot;ltr&quot;&gt;This summer is really going to be productive as I will be writing code for SymPy as a part of Google Summer of Code-14 (Gsoc). For more details regarding the programme visit this &lt;a href=&quot;https://www.google-melange.com/&quot;&gt;site&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;For those of you who are not familiar with SymPy, well it is a Computational algebraic system(CAS) library written in pure python.The project is currently headed by Aaron Meurer and Ondrej Certik.&lt;br /&gt;&lt;br /&gt;Â My project &quot;Improvements to the Geometry library&quot; got accepted under SymPy organisation. My mentor for this project will be Stefan Krastanov and I am really excited to work with him. There are three other guys from my university who got selected for SymPy Sudhanshu Mishra, Sachin Joglekar, Soumya Dipta Biswas ,and I would like to wish them luck for their projects.&lt;br /&gt;&lt;br /&gt;Â Coming to my project I would be extending the geometry module of SymPy to include 3-D entities and also implementing some new classes along the way. For more details about my project you could check my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application--Akshay--Geometry-Module&quot;&gt;proposal&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Â This is my first time participating in Gsoc and I am looking forward to a great summer.&lt;/div&gt;</content:encoded>
	<dc:date>2014-04-24T20:27:00+00:00</dc:date>
	<dc:creator>Akshay Narasimha</dc:creator>
</item>
<item rdf:about="tag:fa.bianp.net,2014-04-21:blog/2014/surrogate-loss-functions-in-machine-learning/">
	<title>Fabian Pedregosa: Surrogate Loss Functions in Machine Learning</title>
	<link>http://fa.bianp.net/blog/2014/surrogate-loss-functions-in-machine-learning/</link>
	<content:encoded>&lt;p&gt;&lt;span class=&quot;bold&quot;&gt;TL; DR&lt;/span&gt; These are some notes on calibration of surrogate loss functions in the context of machine learning. But mostly it is an excuse to post some images I made.&lt;/p&gt;
&lt;p&gt;In the binary-class classification setting we are given $n$ training samples $\{(X_1, Y_1), \ldots, (X_n, Y_n)\}$, where $X_i$ belongs to some sample space $\mathcal{X}$, usually $\mathbb{R}^p$ but for the purpose of this post we can keep i abstract, and $y_i \in \{-1, 1\}$ is an integer representing the class label. &lt;/p&gt;
&lt;p&gt;We are also given a loss function $\ell: \{-1, 1\} \times \{-1, 1\} \to \mathbb{R}$ that measures the error of a given prediction. The value of the loss function $\ell$ at an arbitrary point $(y, \hat{y})$ is interpreted as the cost incurred by predicting $\hat{y}$ when the true label is $y$. In classification this function is often the zero-one loss, that is, $\ell(y, \hat{y})$ is zero when $y = \hat{y}$  and one otherwise.&lt;/p&gt;
&lt;p&gt;The goal is to find a function $h: \mathcal{X} \to [k]$, the classifier, with the smallest expected loss on a new sample. In other words, we seek to find a function $h$ that minimizes the expected $\ell$-risk, given by 
$$
\mathcal{R}_{\ell}(h) = \mathbb{E}_{XY}[\ell(Y, h(X))]
$$&lt;/p&gt;
&lt;p&gt;In theory, we could directly minimize the $\ell$-risk and we would have the optimal classifier, also known as &lt;em&gt;Bayes predictor&lt;/em&gt;. However, there are several problems associated with this approach. One is that the probability distribution of $XY$ is unknown, thus computing the exact expected value is not feasible. It must be approximated by the empirical risk. Another issue is that this quantity is difficult to optimize because the function $\ell$ is discontinuous. Take for example a problem in which $\mathcal{X} = \mathbb{R}^2, k=2$, and we seek to find the linear function $f(X) = \text{sign}(X w), w \in \mathbb{R}^2$  and that minimizes the $\ell$-risk. As a function of the parameter $w$ this function looks something like&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img width=&quot;350px&quot; alt=&quot;loss as function of w&quot; style=&quot;margin-top: 0px;&quot; src=&quot;http://fa.bianp.net/blog/images/2014/loss_01.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This function is discontinuous with large, flat regions and is thus extremely hard to optimize using gradient-based methods. For this reason it is usual to consider a proxy to the loss called a &lt;em&gt;surrogate loss function&lt;/em&gt;. For computational reasons this is usually convex function $\Psi: \mathbb{R}  \to \mathbb{R}_+$. An example of such surrogate loss functions is the &lt;em&gt;hinge loss&lt;/em&gt;, $\Psi(t) = \max(1-t, 0)$, which is the loss used by Support Vector Machines (SVMs). Another example is the logistic loss, $\Psi(t) = 1/(1 + \exp(-t))$, used by the logistic regression model. If we consider the logistic loss, minimizing the $\Psi$-risk, given by $\mathbb{E}_{XY}[\Psi(Y, f(X))]$, of the function $f(X) = X w$ becomes a much more more tractable optimization problem:&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;http://fa.bianp.net/blog/images/2014/loss_log.png&quot; style=&quot;margin-top: 0px;&quot; width=&quot;350px&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;In short, we have replaced the $\ell$-risk which is computationally difficult to optimize with the $\Psi$-risk which has more advantageous properties. A natural questions to ask is how much have we lost by this change. The property of whether minimizing the $\Psi$-risk leads to a function that also minimizes the $\ell$-risk is often referred to as &lt;em&gt;consistency&lt;/em&gt; or &lt;em&gt;calibration&lt;/em&gt;. For a more formal definition see [&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;] and [&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:2&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;]. This property will depend on the surrogate function $\Psi$: for some functions $\Psi$ it will be verified the consistency property and for some not. One of the most useful characterizations was given in [&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;http://fa.bianp.net/blog/feed/#fn:1&quot; class=&quot;footnote-ref&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;] and states that if $\Psi$ is convex then it is consistent if and only if it is differentiable at zero and $\Psi'(0) &amp;lt; 0$. This includes most of the commonly used surrogate loss functions, including hinge, logistic regression and Huber loss functions.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;http://fa.bianp.net/blog/images/2014/loss_functions.png&quot; style=&quot;margin-top: 0px;&quot; width=&quot;550px&quot; /&gt;
&lt;/div&gt;

&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;P. L. Bartlett, M. I. Jordan, and J. D. McAuliffe, âConvexity , Classification , and Risk Bounds,â J. Am. Stat. Assoc., pp. 1â36, 2003.Â &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:1&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;A. Tewari and P. L. Bartlett, âOn the Consistency of Multiclass Classification Methods,â J. Mach. Learn. Res., vol. 8, pp. 1007â1025, 2007.Â &lt;a href=&quot;http://fa.bianp.net/blog/feed/#fnref:2&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;â©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded>
	<dc:date>2014-04-20T22:00:00+00:00</dc:date>
	<dc:creator>Fabian Pedregosa</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/gsoc/selected-gsoc/">
	<title>Sushant Hiray: GSoC in Project CSymPy</title>
	<link>http://sushant-hiray.in/posts/gsoc/selected-gsoc/</link>
	<content:encoded>&lt;p&gt;Well its endsem time and probably the first time Iâm quite happy during this period. Iâve been selected for &lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2014&quot;&gt;GSoC&lt;/a&gt; under the organization &lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/sympy&quot;&gt;SymPy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will be working for the project &lt;a href=&quot;https://github.com/sympy/csympy&quot;&gt;CSymPy&lt;/a&gt; in enhancing the elementary functions module. And well I will be mentored by the awesome &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej CertÃ­k&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;project-description&quot;&gt;Project Description&lt;/h2&gt;
&lt;p&gt;Currently there are very few functions implemented in CSymPy. I aim to extend the module of the elementary functions further, on the similar lines of SymPy . I expect to implement a certain subset of special functions which are already implemented in SymPy. Since CSymPy is particularly new, almost all the special functions have certain dependencies. The project aims in developing a modular architecture to first implement the dependencies and then develop the special functions.&lt;/p&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;
&lt;p&gt;I have discussed my timeline in quite some details both in &lt;a href=&quot;https://groups.google.com/forum/#!forum/sympy&quot;&gt;SymPy mailinglist&lt;/a&gt; and on &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;gitter&lt;/a&gt;. My proposal is &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Sushant-Hiray:-Extending-Elementary-Functions-CSymPy&quot;&gt;here&lt;/a&gt;
This might get refined a bit during the ongoing community bonding period!&lt;/p&gt;

&lt;h2 id=&quot;road-ahead&quot;&gt;Road Ahead&lt;/h2&gt;
&lt;p&gt;Officially GSoC starts from May 19, well but we would probably start shipping in code post endsems.
If you are free this summer and would love to contribute, feel free to catch us up at &lt;a href=&quot;https://gitter.im/sympy/csympy&quot;&gt;gitter&lt;/a&gt;. We will help you get started. Till then sayonara, will continue posting updates hopefully each week! :)&lt;/p&gt;</content:encoded>
	<dc:date>2014-04-20T18:30:00+00:00</dc:date>
</item>
<item rdf:about="https://asmeurersympy.wordpress.com/?p=1413">
	<title>Aaron Meurer (old): This blog has moved</title>
	<link>https://asmeurersympy.wordpress.com/2014/04/05/this-blog-has-moved/</link>
	<content:encoded>&lt;p&gt;This blog has moved toÂ &lt;a href=&quot;http://asmeurer.github.io&quot;&gt;http://asmeurer.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Â &lt;/p&gt;
&lt;p&gt;SeeÂ &lt;a href=&quot;http://asmeurer.github.io/blog/posts/moving-to-github-pages-with-nikola/&quot;&gt;http://asmeurer.github.io/blog/posts/moving-to-github-pages-with-nikola/&lt;/a&gt; for more details on why I have moved. For now, all posts on this blog have not been migrated.Â &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/asmeurersympy.wordpress.com/1413/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://feeds.wordpress.com/1.0/comments/asmeurersympy.wordpress.com/1413/&quot; alt=&quot;&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;img src=&quot;https://stats.wordpress.com/b.gif?host=asmeurersympy.wordpress.com&amp;amp;blog=7467151&amp;amp;post=1413&amp;amp;subd=asmeurersympy&amp;amp;ref=&amp;amp;feed=1&quot; alt=&quot;&quot; border=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</content:encoded>
	<dc:date>2014-04-05T01:16:25+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/getting-started-with-open-source">
	<title>Sushant Hiray: Getting Started With Open Source</title>
	<link>http://sushant-hiray.in/posts/getting-started-with-open-source</link>
	<content:encoded>&lt;p&gt;Open source is so ubiquitous nowadays that its inevitable you are benefiting from it every day even if you donât know it just by using applications on the desktop, web, or mobile. The applications you use most likely have dependencies that are open source. If youâre on Mac or Linux, the unix kernel that powers them is open source.&lt;/p&gt;

&lt;p&gt;Many people including myself feel encouraged to contribute projects that we use and benefit from because it helps the ecosystem as a whole. The entire ecosystem grows exponentially as more people contribute and work together, itâs a powerful thing.&lt;/p&gt;

&lt;p&gt;GitHub has made all of this easier by focusing on the most important aspects of every project, the source code as well as the ability to work on it and be social. Because of this there is now a surge in people contributing and working together for a common goal, making better things. People are working on open source everything, books, software, blogs, you name it, there is no limit to what people are working on.&lt;/p&gt;

&lt;h2&gt;Find a project&lt;/h2&gt;

&lt;p&gt;There are millions of projects on GitHub. Whatever  work you do, regardless of any language you use, thereâs bound to be something. Every time I come across something I like and think I will some day use, I bookmark/star/watch it. Remember that strange bug you experienced with one of your libraries?
These are the best ways to start finding some interesting projects. Github also has an interesting &lt;a href=&quot;https://github.com/explore&quot;&gt;showcase&lt;/a&gt; of trending projects which you can explore.&lt;/p&gt;

&lt;h2&gt;Work on it&lt;/h2&gt;

&lt;p&gt;When you find something to work on, fork/clone it and start making changes. Add new features, fix bugs, discuss with other people, be social. Maybe the creator only knew English and you know French so you can help translate docs, if not anything else. There is so much potential and no limit to what you can do to help.&lt;/p&gt;

&lt;h2&gt;Submit your changes&lt;/h2&gt;

&lt;p&gt;When youâre ready to, submit a pull request back to the original project. Itâs possible the maintainer will ask you to do some tweaks or modifications to meet their standards. Hopefully you will have your changes merged in the original and everyone who uses the project will benefit. Donât know &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;? GitHub has made it easy to create and edit files in your browser. If it is software you are using and youâre not technical and canât work on it, submit an issue so that everyone who uses it knows what the status of the project is.&lt;/p&gt;

&lt;h2&gt;Enjoy your karma&lt;/h2&gt;

&lt;p&gt;Do this for all of the projects you encounter, the internet will thank you for it.&lt;/p&gt;</content:encoded>
	<dc:date>2014-03-28T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/">
	<title>Aaron Meurer: Moving to GitHub pages with Nikola</title>
	<link>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</link>
	<content:encoded>&lt;div&gt;&lt;p&gt;So I've finally decided to move my blog from Wordpress to GitHub pages.  I
highly recommend it if you are technically skilled enough to do it. I was
getting pretty annoyed at Wordpress. It forces you to write your posts in
html (or else using their WYSIWYG editor), the wordpress.com is locked down,
so you can't add any Javascript, their math is stuck in the past rendering png
instead of using MathJax. The list goes on.&lt;/p&gt;
&lt;p&gt;With GitHub pages, I can write my posts in Markdown, and I have full control
over everything. And there is no lock in. If I decide I don't like the
software that is generating the posts, I can easily move to something else,
since the post content itself is all Markdown (or the occasional rst or
IPython notebook if I want to do something that Markdown doesn't support). I
can use MathJax for math (like \( e^{i\pi} + 1 = 0 \)). Wordpress.com
doesn't let you install abtirary Javascript on your blog, so you can't do
things like install MathJax or enable some cool sidebar thing (like a Twitter
feed).&lt;/p&gt;
&lt;h2&gt;Setting up GitHub Pages&lt;/h2&gt;
&lt;p&gt;First, you need to set up GitHub pages. This is a bit confusing, because there
are actually two kinds of GitHub pages, user pages and project pages. User
pages are if you have a repo named &lt;code&gt;username.github.io&lt;/code&gt; (or &lt;code&gt;.com&lt;/code&gt;). The pages
are served from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;For project pages, you add a &lt;code&gt;gh-pages&lt;/code&gt; branch to any one of your projects,
and GitHub hosts the content automatically at
&lt;code&gt;username.github.io/projectname&lt;/code&gt;. I originally had my blog content at
&lt;code&gt;asmeurer.github.io&lt;/code&gt;, but I didn't like that I had to do everything in master,
both the generated and original content. So instead I created a repo called
&lt;code&gt;blog&lt;/code&gt;. I have my content in the &lt;code&gt;master&lt;/code&gt; branch and the generated pages in
the &lt;code&gt;gh-pages&lt;/code&gt; branch (more on this later). At my
&lt;a href=&quot;https://github.com/asmeurer/asmeurer.github.com&quot;&gt;&lt;code&gt;asmeurer.github.com&lt;/code&gt;&lt;/a&gt; repo,
I just have for now a basic redirect to the blog. In the future, I may want to
put additional, non-blog content on the website, and it would go there (or in
a separate project repo with its own &lt;code&gt;gh-pages&lt;/code&gt; branch).&lt;/p&gt;
&lt;h2&gt;Nikola&lt;/h2&gt;
&lt;p&gt;I had initially planned on using
&lt;a href=&quot;http://blog.getpelican.com/&quot;&gt;Pelican&lt;/a&gt;. However, I got stalled on the
Wordpress import. I like that Pelican is written in Python, but I was not too
keen on their abrasive
&lt;a href=&quot;https://github.com/getpelican/pelican/blob/master/LICENSE&quot;&gt;license&lt;/a&gt;. Frankly,
I shouldn't say too many bad things about Pelican because I never really tried
that hard with it.&lt;/p&gt;
&lt;p&gt;I have decided to try &lt;a href=&quot;http://getnikola.com/&quot;&gt;Nikola&lt;/a&gt; instead. It's also
written in Python. It has a very nice
&lt;a href=&quot;https://github.com/getnikola/nikola/blob/master/LICENSE.txt&quot;&gt;license&lt;/a&gt;. I like
the philosophy of the &lt;a href=&quot;http://getnikola.com/handbook.html&quot;&gt;manual&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've also discovered that the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/nikola-discuss&quot;&gt;Nikola community&lt;/a&gt; is
&lt;em&gt;very&lt;/em&gt; nice. And of course, even if Nikola ends up not being for me, it will
be easy to switch, because my actual content is just some Markdown files that
I own.&lt;/p&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Getting started with Nikola is pretty easy. First, you need to install it. It
has a &lt;em&gt;ton&lt;/em&gt; of dependencies (fortunately all Python, so it won't be that
hard). In addition to the ones in the requirements.txt, you should also
install &lt;code&gt;markdown&lt;/code&gt; and &lt;code&gt;webassets&lt;/code&gt;. While using &lt;code&gt;nikola&lt;/code&gt;, it will tell you if
you don't have something installed that you should, so if you see that, just
install what it tells you to.  If you use &lt;code&gt;conda&lt;/code&gt; and Mac OS X, I have
uploaded all the dependencies to my &lt;a href=&quot;https://binstar.org/asmeurer/&quot;&gt;Binstar&lt;/a&gt;,
so you can just &lt;code&gt;conda install -c asmeurer nikola&lt;/code&gt;. Oh and don't worry, Nikola
and its dependencies fully support Python 3 (I wouldn't be using it if they
didn't).&lt;/p&gt;
&lt;p&gt;Then you just run the commands from
http://getnikola.com/handbook.html#all-you-need-to-know.&lt;/p&gt;
&lt;p&gt;One thing that doesn't tell you is that after you init the site, you should
walk through &lt;code&gt;conf.py&lt;/code&gt; and change the settings to your liking.&lt;/p&gt;
&lt;p&gt;Another trick not there is that you can add&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`nikola tabcompletion`&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to your Bash profile to get tab completion.&lt;/p&gt;
&lt;h3&gt;Tricks&lt;/h3&gt;
&lt;p&gt;Here are some useful tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To enable MathJax, you have to type &lt;code&gt;mathjax&lt;/code&gt; in a line by itself in the
metadata file. There are some bugs right now, but ideally you could do inline
math with &lt;code&gt;$math$&lt;/code&gt; and display math with &lt;code&gt;$$math$$&lt;/code&gt;. &lt;code&gt;$math$&lt;/code&gt; doesn't work
currently, but you can do &lt;code&gt;\\(math\\)&lt;/code&gt; (both &lt;code&gt;\&lt;/code&gt;s are required, although this
is likely a bug). You can do &lt;code&gt;\\[math\\]&lt;/code&gt; for display math.  Here are some
examples. Inline: \( \sin ^2{x} + \cos^2{x} = 1\). Display: $$ e^{i\pi} + 1 = 0 .$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your one-stop command when blogging is &lt;code&gt;nikola auto&lt;/code&gt;. This requires
  &lt;code&gt;livereload&lt;/code&gt;. This will serve the blog on localhost, and automatically
  rebuild it when any change is made (and I really mean &lt;em&gt;any&lt;/em&gt; change: it can
  even detect when you change Nikola itself).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I have the following in my conf.py to deploy:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;DEPLOY_COMMANDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git checkout gh-pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ .&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git add -A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git commit -a -m 'Updating blog content'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;git checkout master&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WARNING: These commands are dangerous. If you don't properly exclude things
like &lt;code&gt;.git&lt;/code&gt;, you will wipe your entire git history. I &lt;em&gt;highly&lt;/em&gt; recommend
committing everything and pushing to GitHub before deploying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;_site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyc&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DS_Store&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Despite what it says on the Nikola page, be sure to read the docs, because
there are a lot of cool features you won't know about unless you read about
them. Also be sure to read through &lt;code&gt;conf.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wordpress import&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This is something that I am still figuring out. You can see the progress at
  &lt;a href=&quot;http://asmeurer.github.io/blog/old_blog&quot;&gt;http://asmeurer.github.io/blog/old_blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Importing from Wordpress is pretty easy actually (at least in theory). First
you need to go to the Wordpress site dashboard and go to &quot;Export&quot; from the
&quot;Tools&quot; menu. From here you can download an XML file with all your
content. Then just do&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;nikola&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;import_wordpress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;export_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the current version of Nikola as of this writing (6.3.0) doesn't do
this right, so you'll need to use the
&lt;a href=&quot;https://github.com/getnikola/nikola&quot;&gt;git master&lt;/a&gt;. There are some issues with
the import, since Wordpress has its own markup that it doesn't know everything
about, so you may need to go in and fix things. Or report them as bugs to
Nikola and reimport when they are fixed.&lt;/p&gt;
&lt;p&gt;You'll need to go through the posts and make sure that they are rendered
correctly (this is one reason I haven't finished doing it yet).&lt;/p&gt;
&lt;p&gt;For comments, you first need to create a Disqus account, and enable it in your
conf.py. You should then upload the xml file that you exported from Wordpress
to Disqus. At this point, the comments should just work, because Nikola sets
the Disqus url for the imported comments to the old Wordpress url (look at the
Disqus section of one of the built pages).&lt;/p&gt;
&lt;p&gt;I don't know how to automatically backlink from Wordpress back to
Nikola. Maybe I should just automatically generate some links and paste them
in manually.&lt;/p&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2014-02-09T23:19:18+00:00</dc:date>
	<dc:creator>Aaron Meurer</dc:creator>
</item>
<item rdf:about="http://sushant-hiray.in/posts/y-u-no-use-screen">
	<title>Sushant Hiray: Y U NO USE screen</title>
	<link>http://sushant-hiray.in/posts/y-u-no-use-screen</link>
	<content:encoded>&lt;p&gt;Imagine a fairly common situation â you are ssh'ed to a remote server, doing stuff and then all of a sudden your internet connection drops and the console has frozen. And even after the connection is back, console wonât respond, because the pipe between your computer and remote one has broken.&lt;/p&gt;

&lt;p&gt;Weâve all been there, it sucks. And it sucks even more if there was a long running process executed from that console say for example &lt;code&gt;scp&lt;/code&gt;ing a huge file.&lt;/p&gt;

&lt;p&gt;Well I faced this situation quite some times while working for our compilerâs lab assignment this weekend and it pissed me enough to search for a solution!&lt;/p&gt;

&lt;p&gt;There is a very old and simple tool, that can help you to prevent this from happening. It is called â &lt;code&gt;GNU Screen&lt;/code&gt;. I had a faint remembrance of seeing &lt;a href=&quot;https://www.facebook.com/manish.goregaokar&quot;&gt;Manish&lt;/a&gt; use it, so I decided to explore it a bit more. Basically, screen allows you to create a virtual session inside your ssh session(or any console session), that isnât bound to your connection. Meaning that if your connection drops, you will be able to connect to this virtual session afterwards. Hopefully, you already see the benefits you can get from using it, so letâs get to how you actually use it.&lt;/p&gt;

&lt;h2&gt;1. Installing screen&lt;/h2&gt;

&lt;p&gt;Usually screen wonât be installed your system, so you would:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or do whatever you do to install stuff on your machine.&lt;/p&gt;

&lt;h2&gt;2. Starting a new screen session&lt;/h2&gt;

&lt;p&gt;To start and new virtual session simply type &lt;code&gt;screen&lt;/code&gt; into your console. Normally it would greet you with a copyright notice. Press return to skip it and youâre set â now you are inside the virtual console. Feels pretty much the same, right? Except now you can go ahead and disconnect from the internet and you will be able to connect to the session once you are back online.&lt;/p&gt;

&lt;h2&gt;3. Communicating with screen&lt;/h2&gt;

&lt;p&gt;Inside a virtual session you can initiate communication with the screen tool by pressing &lt;code&gt;Ctrl + A&lt;/code&gt;, followed by a single letter command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;D&lt;/code&gt; â âdetachâ. It detaches you from current session, leaving it running in background.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;K&lt;/code&gt; â âkillâ. This would terminate the screen session. It would probably ask you to confirm this, so press y if you are sure about it. Logging out from a virtual console also terminates it.&lt;/p&gt;

&lt;p&gt;These are two commands that you would need for basic understanding of screen, but ofcourse, as most of the UNIX tools, &lt;code&gt;screen&lt;/code&gt; has much more power underneath the bonet.&lt;/p&gt;

&lt;h2&gt;4. Connecting to an existings virtual session&lt;/h2&gt;

&lt;p&gt;In case of a lost connection or to resume a previously started session, you need to type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will attach you to a screen session. In case there are more then one active session, youâll see a list of them. To connect to a particular screen, simply add itâs identifier as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r 12345.pts-0.yourserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way you can have multiple sessions running, allowing you to switch between them and not having to keep multiple ssh connections alive. To see a list of active screens, just type in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -ls
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. Naming your screens&lt;/h2&gt;

&lt;p&gt;You can also give your screen a name, that you can use later on as a connection identifier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -S something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to restore that session:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen -r something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And thatâs basically it. With these few simple commands in mind you wonât be afraid of a frozen consoles and âBroken pipeâ error messages, because your session is safe and sound with screen. So go ahead try it and get used to it, because it will help you a lot.&lt;/p&gt;

&lt;p&gt;ps: The title is motivated by a blogpost I recently saw being shared on &lt;a href=&quot;http://news.ycombinator.com&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2014-01-27T08:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sushant-hiray.in/posts/30-days-github-streak">
	<title>Sushant Hiray: 30 Days of Github Streaking</title>
	<link>http://sushant-hiray.in/posts/30-days-github-streak</link>
	<content:encoded>This winter I started off with an interesting aim, trying to maximize my commit streak on github.
&lt;br /&gt;
First of all, itâs really fun to see your stats (the green graph on your profile), and once you have a streak going, you should avoid breaking it! C'mon who likes seeing gray idle zones in a green graph!
&lt;br /&gt;
&lt;img src=&quot;http://sushant-hiray.in/images/streak.png&quot; /&gt;
&lt;br /&gt;
It all started when I was working on &lt;a href=&quot;http://sushant-hiray.github.io/tshn/&quot;&gt;TSHN&lt;/a&gt; I noticed that I had bettered my previous best was of 17 days streak! It was a lack-luster streak that I wanted to improve but just couldnât find enough motivation. 
&lt;br /&gt;And &amp;lt;bold&amp;gt;bang&amp;lt;/bold&amp;gt; I broke my streak in just  &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-13&quot;&gt;3 days&lt;/a&gt; :(
&lt;br /&gt;
So I decided to set up a task for myself.
&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;The 30 day challenge&lt;/h3&gt;
The task was simple: to keep the streak for atleast 30 days. &lt;br /&gt;
I started this streak off with a bang, contributing nearly &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-15&quot;&gt;20 commits&lt;/a&gt; to my &lt;a href=&quot;http://sushant-hiray.github.io/&quot;&gt;website&lt;/a&gt; and other various projects on the second day. Soon I wen past that with &lt;a href=&quot;https://github.com/sushant-hiray?tab=contributions&amp;amp;from=2013-12-17&quot;&gt;34 contributions&lt;/a&gt;This actually happened to be the most contributions in a single day that I made throughout the current streak.
&lt;br /&gt;
&lt;br /&gt;
One week into the challenge it was getting though to keep on contributing.
I was nearly forgetting to commit or otherwise contribute, waiting until the last possible moment to submit my daily contribution. Ofcourse since GitHub runs on PST, which meant I could contribute anywhere from 12am â 1:30pm local time (IST) and have it count for the previous day. When I got home extra late a few nights, this trick had my back.
&lt;br /&gt;
&lt;br /&gt;
Three weeks in it was easier to remember to commit, it was becoming more of a habit. 
&lt;br /&gt;
&lt;br /&gt;
&lt;i&gt;Thirty days&lt;/i&gt; was exciting! I had made it! And all I wanted to do was keep going! After a couple of weeks, it just became a way of life. Eat, sleep, commit was a part of routine and I no longer found it difficult to include in my day-to-day rituals. But it was hard to be 100% consistent, so there were definitely some close calls on busy days and some tricks did help me save from ruining my streak. &lt;br /&gt;
These are present in &lt;a href=&quot;https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile&quot;&gt;Github FAQ&lt;/a&gt;
 &lt;br /&gt;
 &lt;br /&gt;
&lt;h3&gt;Looking Back&lt;/h3&gt;
Looking back to the past 30 days, it has been quite fun to push myself and make sure I donot leave a dry mark. Also I did learn a couple of stuff:
&lt;ul&gt;
	&lt;li&gt;Try to work on multiple projects, in this way you have enough ways to contribute code &lt;/li&gt;
	&lt;li&gt;Its not necessary to start your own project, helping someone with minor fixes is almost as good. After all that is what social coding is for &lt;/li&gt;
	&lt;li&gt;I've noticed quite a few people commit a bulk of changes obly once, but this sorta beats the purpose of using version control. Try to break a big task into small sub tasks and commit them accordingly, this will help to revert back easily. Regardless to say, it does help increase your contribution stats!
&lt;/li&gt;&lt;/ul&gt;	
All in all it has been a git streak winter! I'm not sure how much more I can possibly extend this streak considering we have the most dreadful 3rd year 2nd sem starting!
&lt;br /&gt;&lt;br /&gt;
Happy Streaking! 
&lt;br /&gt;</content:encoded>
	<dc:date>2014-01-12T08:00:00+00:00</dc:date>
</item>
<item rdf:about="http://sushant-hiray.in/posts/setting-up-post-receive-hook">
	<title>Sushant Hiray: Setting up post-receive hook</title>
	<link>http://sushant-hiray.in/posts/setting-up-post-receive-hook</link>
	<content:encoded>&lt;p&gt;Recently, we switched to using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for our &lt;a href=&quot;http://wncc-iitb.org/&quot;&gt;WnCC&lt;/a&gt; website.
This post will essentially help to configure &lt;code&gt;post-receive hooks&lt;/code&gt; on your local repository.&lt;/p&gt;

&lt;p&gt;Using git hooks you no longer need to manually deploy the website on your server. Everytime you push to git, a remote server handles the deployment.&lt;/p&gt;

&lt;p&gt;Setting up the post-receive hook is done as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptop$ ssh deployer@example.com
server$ mkdir myrepo.git
server$ cd myrepo.git
server$ git --bare init
server$ cp hooks/post-receive.sample hooks/post-receive
server$ mkdir /var/www/myrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add the following lines to &lt;code&gt;hooks/post-receive&lt;/code&gt; and be sure &lt;code&gt;Jekyll&lt;/code&gt; is installed on the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GIT_REPO=$HOME/myrepo.git
TMP_GIT_CLONE=$HOME/tmp/myrepo
PUBLIC_WWW=/var/www/myrepo
JEKYLL = /path/to/jekyll
git clone $GIT_REPO $TMP_GIT_CLONE
$JEKYLL build -s $TMP_GIT_CLONE -d $PUBLIC_WWW
rm -Rf $TMP_GIT_CLONE
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, run the following command on any users laptop that needs to be able to deploy using this hook:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git remote add deploy deployer@example.com:~/myrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everytime you push, make sure you push it to remote server as well&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case, you wish multiple users to be able to deploy
You need to run the following command on the other laptops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git remote add deploy deployer@example.com:~/myrepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ofcourse goes without saying, each user should deploy to remote server using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you are maintaining the repository on github as well, make sure to sync the repositories.
So, your &lt;code&gt;git push&lt;/code&gt; could look as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;laptops$ git push deploy master
laptops$ git push origin master
&lt;/code&gt;&lt;/pre&gt;</content:encoded>
	<dc:date>2014-01-10T08:00:00+00:00</dc:date>
</item>

</rdf:RDF>
